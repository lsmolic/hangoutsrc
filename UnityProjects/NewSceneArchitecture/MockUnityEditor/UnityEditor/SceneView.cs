using System;
using System.Collections;
using System.Collections.Generic;
using System.Runtime.Serialization;


namespace UnityEditor {
[UnityEngine.SerializePrivateVariables]
public class SceneView : UnityEditor.EditorWindow {
	// Mock data:
	private Dictionary<string, int> m_functionCallCounts;
	public Dictionary<string, int> FunctionCallCounts {
		get { 
			if(m_functionCallCounts == null) {
				m_functionCallCounts = new Dictionary<string, int>();
			}
			return m_functionCallCounts;
		}
	}

	public static void RepaintAll( ){
	}

	public void OnEnable( ){
		//Mock Data:
		if(m_functionCallCounts == null) {
			m_functionCallCounts = new Dictionary<string, int>();
		}
		if(!m_functionCallCounts.ContainsKey( "Void OnEnable()" )){
			m_functionCallCounts.Add( "Void OnEnable()", 0 );
		}
		m_functionCallCounts["Void OnEnable()"]++;
			throw new NotImplementedException("This function was automatically generated by Mockery and has no real implementation yet.");
	}

	public void OnDisable( ){
		//Mock Data:
		if(m_functionCallCounts == null) {
			m_functionCallCounts = new Dictionary<string, int>();
		}
		if(!m_functionCallCounts.ContainsKey( "Void OnDisable()" )){
			m_functionCallCounts.Add( "Void OnDisable()", 0 );
		}
		m_functionCallCounts["Void OnDisable()"]++;
			throw new NotImplementedException("This function was automatically generated by Mockery and has no real implementation yet.");
	}

	public void FixNegativeSize( ){
		//Mock Data:
		if(m_functionCallCounts == null) {
			m_functionCallCounts = new Dictionary<string, int>();
		}
		if(!m_functionCallCounts.ContainsKey( "Void FixNegativeSize()" )){
			m_functionCallCounts.Add( "Void FixNegativeSize()", 0 );
		}
		m_functionCallCounts["Void FixNegativeSize()"]++;
			throw new NotImplementedException("This function was automatically generated by Mockery and has no real implementation yet.");
	}

	public void LookAt( UnityEngine.Vector3 position ){
		//Mock Data:
		if(m_functionCallCounts == null) {
			m_functionCallCounts = new Dictionary<string, int>();
		}
		if(!m_functionCallCounts.ContainsKey( "Void LookAt(Vector3)" )){
			m_functionCallCounts.Add( "Void LookAt(Vector3)", 0 );
		}
		m_functionCallCounts["Void LookAt(Vector3)"]++;
			throw new NotImplementedException("This function was automatically generated by Mockery and has no real implementation yet.");
	}

	public void LookAt( UnityEngine.Vector3 position, UnityEngine.Quaternion rotation ){
		//Mock Data:
		if(m_functionCallCounts == null) {
			m_functionCallCounts = new Dictionary<string, int>();
		}
		if(!m_functionCallCounts.ContainsKey( "Void LookAt(Vector3, Quaternion)" )){
			m_functionCallCounts.Add( "Void LookAt(Vector3, Quaternion)", 0 );
		}
		m_functionCallCounts["Void LookAt(Vector3, Quaternion)"]++;
			throw new NotImplementedException("This function was automatically generated by Mockery and has no real implementation yet.");
	}

	public void LookAt( UnityEngine.Vector3 position, UnityEngine.Quaternion rotation, System.Single size ){
		//Mock Data:
		if(m_functionCallCounts == null) {
			m_functionCallCounts = new Dictionary<string, int>();
		}
		if(!m_functionCallCounts.ContainsKey( "Void LookAt(Vector3, Quaternion, Single)" )){
			m_functionCallCounts.Add( "Void LookAt(Vector3, Quaternion, Single)", 0 );
		}
		m_functionCallCounts["Void LookAt(Vector3, Quaternion, Single)"]++;
			throw new NotImplementedException("This function was automatically generated by Mockery and has no real implementation yet.");
	}

	public void LookAt( UnityEngine.Vector3 position, UnityEngine.Quaternion rotation, System.Single size, System.Boolean orthographic ){
		//Mock Data:
		if(m_functionCallCounts == null) {
			m_functionCallCounts = new Dictionary<string, int>();
		}
		if(!m_functionCallCounts.ContainsKey( "Void LookAt(Vector3, Quaternion, Single, Boolean)" )){
			m_functionCallCounts.Add( "Void LookAt(Vector3, Quaternion, Single, Boolean)", 0 );
		}
		m_functionCallCounts["Void LookAt(Vector3, Quaternion, Single, Boolean)"]++;
			throw new NotImplementedException("This function was automatically generated by Mockery and has no real implementation yet.");
	}

	public static void PickTool( ){
	}

	public void AlignViewToObject( UnityEngine.Transform t ){
		//Mock Data:
		if(m_functionCallCounts == null) {
			m_functionCallCounts = new Dictionary<string, int>();
		}
		if(!m_functionCallCounts.ContainsKey( "Void AlignViewToObject(UnityEngine.Transform)" )){
			m_functionCallCounts.Add( "Void AlignViewToObject(UnityEngine.Transform)", 0 );
		}
		m_functionCallCounts["Void AlignViewToObject(UnityEngine.Transform)"]++;
			throw new NotImplementedException("This function was automatically generated by Mockery and has no real implementation yet.");
	}

	public void AlignWithView( ){
		//Mock Data:
		if(m_functionCallCounts == null) {
			m_functionCallCounts = new Dictionary<string, int>();
		}
		if(!m_functionCallCounts.ContainsKey( "Void AlignWithView()" )){
			m_functionCallCounts.Add( "Void AlignWithView()", 0 );
		}
		m_functionCallCounts["Void AlignWithView()"]++;
			throw new NotImplementedException("This function was automatically generated by Mockery and has no real implementation yet.");
	}

	public void MoveToView( ){
		//Mock Data:
		if(m_functionCallCounts == null) {
			m_functionCallCounts = new Dictionary<string, int>();
		}
		if(!m_functionCallCounts.ContainsKey( "Void MoveToView()" )){
			m_functionCallCounts.Add( "Void MoveToView()", 0 );
		}
		m_functionCallCounts["Void MoveToView()"]++;
			throw new NotImplementedException("This function was automatically generated by Mockery and has no real implementation yet.");
	}

	public void MoveToView( UnityEngine.Transform target ){
		//Mock Data:
		if(m_functionCallCounts == null) {
			m_functionCallCounts = new Dictionary<string, int>();
		}
		if(!m_functionCallCounts.ContainsKey( "Void MoveToView(UnityEngine.Transform)" )){
			m_functionCallCounts.Add( "Void MoveToView(UnityEngine.Transform)", 0 );
		}
		m_functionCallCounts["Void MoveToView(UnityEngine.Transform)"]++;
			throw new NotImplementedException("This function was automatically generated by Mockery and has no real implementation yet.");
	}

	public System.Boolean FrameSelected( ){
		//Mock Data:
		if(m_functionCallCounts == null) {
			m_functionCallCounts = new Dictionary<string, int>();
		}
		if(!m_functionCallCounts.ContainsKey( "Boolean FrameSelected()" )){
			m_functionCallCounts.Add( "Boolean FrameSelected()", 0 );
		}
		m_functionCallCounts["Boolean FrameSelected()"]++;
			throw new NotImplementedException("This function was automatically generated by Mockery and has no real implementation yet.");
		throw new NotImplementedException("This function was automatically generated by Mockery and has no real implementation yet.");
	}

	public SceneView( ){
		//Mock Data:
			m_functionCallCounts = new Dictionary<string, int>();
		if(!m_functionCallCounts.ContainsKey( "Void .ctor()" )){
			m_functionCallCounts.Add( "Void .ctor()", 0 );
		}
		m_functionCallCounts["Void .ctor()"]++;
			throw new NotImplementedException("This function was automatically generated by Mockery and has no real implementation yet.");
	}

	public System.Collections.Generic.IEnumerable<UnityEngine.GameObject> activeGameObjects {
		get {
			if(m_functionCallCounts == null) {
				m_functionCallCounts = new Dictionary<string, int>();
			}
			if(!m_functionCallCounts.ContainsKey( "get_activeGameObjects" )){
				m_functionCallCounts.Add( "get_activeGameObjects", 0 );
			}
			m_functionCallCounts["get_activeGameObjects"]++;
			throw new NotImplementedException("This function was automatically generated by Mockery and has no real implementation yet.");
			throw new NotImplementedException("This function was automatically generated by Mockery and has no real implementation yet.");
		}
	}

	public UnityEngine.Quaternion rotation {
		get {
			if(m_functionCallCounts == null) {
				m_functionCallCounts = new Dictionary<string, int>();
			}
			if(!m_functionCallCounts.ContainsKey( "get_rotation" )){
				m_functionCallCounts.Add( "get_rotation", 0 );
			}
			m_functionCallCounts["get_rotation"]++;
			throw new NotImplementedException("This function was automatically generated by Mockery and has no real implementation yet.");
			throw new NotImplementedException("This function was automatically generated by Mockery and has no real implementation yet.");
		}
		set {
			if(m_functionCallCounts == null) {
				m_functionCallCounts = new Dictionary<string, int>();
			}
			if(!m_functionCallCounts.ContainsKey( "set_rotation" )){
				m_functionCallCounts.Add( "set_rotation", 0 );
			}
			m_functionCallCounts["set_rotation"]++;
			throw new NotImplementedException("This function was automatically generated by Mockery and has no real implementation yet.");
		}
	}

	public System.Single size {
		get {
			if(m_functionCallCounts == null) {
				m_functionCallCounts = new Dictionary<string, int>();
			}
			if(!m_functionCallCounts.ContainsKey( "get_size" )){
				m_functionCallCounts.Add( "get_size", 0 );
			}
			m_functionCallCounts["get_size"]++;
			throw new NotImplementedException("This function was automatically generated by Mockery and has no real implementation yet.");
			throw new NotImplementedException("This function was automatically generated by Mockery and has no real implementation yet.");
		}
		set {
			if(m_functionCallCounts == null) {
				m_functionCallCounts = new Dictionary<string, int>();
			}
			if(!m_functionCallCounts.ContainsKey( "set_size" )){
				m_functionCallCounts.Add( "set_size", 0 );
			}
			m_functionCallCounts["set_size"]++;
			throw new NotImplementedException("This function was automatically generated by Mockery and has no real implementation yet.");
		}
	}

	public System.Boolean orthographic {
		get {
			if(m_functionCallCounts == null) {
				m_functionCallCounts = new Dictionary<string, int>();
			}
			if(!m_functionCallCounts.ContainsKey( "get_orthographic" )){
				m_functionCallCounts.Add( "get_orthographic", 0 );
			}
			m_functionCallCounts["get_orthographic"]++;
			throw new NotImplementedException("This function was automatically generated by Mockery and has no real implementation yet.");
			throw new NotImplementedException("This function was automatically generated by Mockery and has no real implementation yet.");
		}
		set {
			if(m_functionCallCounts == null) {
				m_functionCallCounts = new Dictionary<string, int>();
			}
			if(!m_functionCallCounts.ContainsKey( "set_orthographic" )){
				m_functionCallCounts.Add( "set_orthographic", 0 );
			}
			m_functionCallCounts["set_orthographic"]++;
			throw new NotImplementedException("This function was automatically generated by Mockery and has no real implementation yet.");
		}
	}

	public UnityEngine.Camera camera {
		get {
			if(m_functionCallCounts == null) {
				m_functionCallCounts = new Dictionary<string, int>();
			}
			if(!m_functionCallCounts.ContainsKey( "get_camera" )){
				m_functionCallCounts.Add( "get_camera", 0 );
			}
			m_functionCallCounts["get_camera"]++;
			throw new NotImplementedException("This function was automatically generated by Mockery and has no real implementation yet.");
			throw new NotImplementedException("This function was automatically generated by Mockery and has no real implementation yet.");
		}
	}

	public UnityEngine.Vector3 pivot {
		get {
			if(m_functionCallCounts == null) {
				m_functionCallCounts = new Dictionary<string, int>();
			}
			if(!m_functionCallCounts.ContainsKey( "get_pivot" )){
				m_functionCallCounts.Add( "get_pivot", 0 );
			}
			m_functionCallCounts["get_pivot"]++;
			throw new NotImplementedException("This function was automatically generated by Mockery and has no real implementation yet.");
			throw new NotImplementedException("This function was automatically generated by Mockery and has no real implementation yet.");
		}
		set {
			if(m_functionCallCounts == null) {
				m_functionCallCounts = new Dictionary<string, int>();
			}
			if(!m_functionCallCounts.ContainsKey( "set_pivot" )){
				m_functionCallCounts.Add( "set_pivot", 0 );
			}
			m_functionCallCounts["set_pivot"]++;
			throw new NotImplementedException("This function was automatically generated by Mockery and has no real implementation yet.");
		}
	}
}
}
