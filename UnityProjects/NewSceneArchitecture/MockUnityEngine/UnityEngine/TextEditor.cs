using System;
using System.Collections;
using System.Collections.Generic;
using System.Runtime.Serialization;


namespace UnityEngine {
public class TextEditor {
	// Mock data:
	private Dictionary<string, int> m_functionCallCounts;
	public Dictionary<string, int> FunctionCallCounts {
		get { 
			if(m_functionCallCounts == null) {
				m_functionCallCounts = new Dictionary<string, int>();
			}
			return m_functionCallCounts;
		}
	}

	public virtual void OnFocus( ){
		//Mock Data:
		if(m_functionCallCounts == null) {
			m_functionCallCounts = new Dictionary<string, int>();
		}
		if(!m_functionCallCounts.ContainsKey( "Void OnFocus()" )){
			m_functionCallCounts.Add( "Void OnFocus()", 0 );
		}
		m_functionCallCounts["Void OnFocus()"]++;
			
	}

	public virtual void OnLostFocus( ){
		//Mock Data:
		if(m_functionCallCounts == null) {
			m_functionCallCounts = new Dictionary<string, int>();
		}
		if(!m_functionCallCounts.ContainsKey( "Void OnLostFocus()" )){
			m_functionCallCounts.Add( "Void OnLostFocus()", 0 );
		}
		m_functionCallCounts["Void OnLostFocus()"]++;
			
	}

	public System.Boolean HandleKeyEvent( UnityEngine.Event e ){
		//Mock Data:
		if(m_functionCallCounts == null) {
			m_functionCallCounts = new Dictionary<string, int>();
		}
		if(!m_functionCallCounts.ContainsKey( "Boolean HandleKeyEvent(UnityEngine.Event)" )){
			m_functionCallCounts.Add( "Boolean HandleKeyEvent(UnityEngine.Event)", 0 );
		}
		m_functionCallCounts["Boolean HandleKeyEvent(UnityEngine.Event)"]++;
			
		throw new NotImplementedException("This function was automatically generated by Mockery and has no real implementation yet.");
	}

	public System.Boolean Delete( ){
		//Mock Data:
		if(m_functionCallCounts == null) {
			m_functionCallCounts = new Dictionary<string, int>();
		}
		if(!m_functionCallCounts.ContainsKey( "Boolean Delete()" )){
			m_functionCallCounts.Add( "Boolean Delete()", 0 );
		}
		m_functionCallCounts["Boolean Delete()"]++;
			
		throw new NotImplementedException("This function was automatically generated by Mockery and has no real implementation yet.");
	}

	public System.Boolean CanPaste( ){
		//Mock Data:
		if(m_functionCallCounts == null) {
			m_functionCallCounts = new Dictionary<string, int>();
		}
		if(!m_functionCallCounts.ContainsKey( "Boolean CanPaste()" )){
			m_functionCallCounts.Add( "Boolean CanPaste()", 0 );
		}
		m_functionCallCounts["Boolean CanPaste()"]++;
			
		throw new NotImplementedException("This function was automatically generated by Mockery and has no real implementation yet.");
	}

	public System.Boolean Backspace( ){
		//Mock Data:
		if(m_functionCallCounts == null) {
			m_functionCallCounts = new Dictionary<string, int>();
		}
		if(!m_functionCallCounts.ContainsKey( "Boolean Backspace()" )){
			m_functionCallCounts.Add( "Boolean Backspace()", 0 );
		}
		m_functionCallCounts["Boolean Backspace()"]++;
			
		throw new NotImplementedException("This function was automatically generated by Mockery and has no real implementation yet.");
	}

	public void SelectAll( ){
		//Mock Data:
		if(m_functionCallCounts == null) {
			m_functionCallCounts = new Dictionary<string, int>();
		}
		if(!m_functionCallCounts.ContainsKey( "Void SelectAll()" )){
			m_functionCallCounts.Add( "Void SelectAll()", 0 );
		}
		m_functionCallCounts["Void SelectAll()"]++;
			
	}

	public void SelectNone( ){
		//Mock Data:
		if(m_functionCallCounts == null) {
			m_functionCallCounts = new Dictionary<string, int>();
		}
		if(!m_functionCallCounts.ContainsKey( "Void SelectNone()" )){
			m_functionCallCounts.Add( "Void SelectNone()", 0 );
		}
		m_functionCallCounts["Void SelectNone()"]++;
			
	}

	public System.Boolean DeleteSelection( ){
		//Mock Data:
		if(m_functionCallCounts == null) {
			m_functionCallCounts = new Dictionary<string, int>();
		}
		if(!m_functionCallCounts.ContainsKey( "Boolean DeleteSelection()" )){
			m_functionCallCounts.Add( "Boolean DeleteSelection()", 0 );
		}
		m_functionCallCounts["Boolean DeleteSelection()"]++;
			
		throw new NotImplementedException("This function was automatically generated by Mockery and has no real implementation yet.");
	}

	public void ReplaceSelection( System.String replace ){
		//Mock Data:
		if(m_functionCallCounts == null) {
			m_functionCallCounts = new Dictionary<string, int>();
		}
		if(!m_functionCallCounts.ContainsKey( "Void ReplaceSelection(System.String)" )){
			m_functionCallCounts.Add( "Void ReplaceSelection(System.String)", 0 );
		}
		m_functionCallCounts["Void ReplaceSelection(System.String)"]++;
			
	}

	public void Insert( System.Char c ){
		//Mock Data:
		if(m_functionCallCounts == null) {
			m_functionCallCounts = new Dictionary<string, int>();
		}
		if(!m_functionCallCounts.ContainsKey( "Void Insert(Char)" )){
			m_functionCallCounts.Add( "Void Insert(Char)", 0 );
		}
		m_functionCallCounts["Void Insert(Char)"]++;
			
	}

	public void MoveSelectionToAltCursor( ){
		//Mock Data:
		if(m_functionCallCounts == null) {
			m_functionCallCounts = new Dictionary<string, int>();
		}
		if(!m_functionCallCounts.ContainsKey( "Void MoveSelectionToAltCursor()" )){
			m_functionCallCounts.Add( "Void MoveSelectionToAltCursor()", 0 );
		}
		m_functionCallCounts["Void MoveSelectionToAltCursor()"]++;
			
	}

	public void MoveRight( ){
		//Mock Data:
		if(m_functionCallCounts == null) {
			m_functionCallCounts = new Dictionary<string, int>();
		}
		if(!m_functionCallCounts.ContainsKey( "Void MoveRight()" )){
			m_functionCallCounts.Add( "Void MoveRight()", 0 );
		}
		m_functionCallCounts["Void MoveRight()"]++;
			
	}

	public void MoveLeft( ){
		//Mock Data:
		if(m_functionCallCounts == null) {
			m_functionCallCounts = new Dictionary<string, int>();
		}
		if(!m_functionCallCounts.ContainsKey( "Void MoveLeft()" )){
			m_functionCallCounts.Add( "Void MoveLeft()", 0 );
		}
		m_functionCallCounts["Void MoveLeft()"]++;
			
	}

	public void MoveUp( ){
		//Mock Data:
		if(m_functionCallCounts == null) {
			m_functionCallCounts = new Dictionary<string, int>();
		}
		if(!m_functionCallCounts.ContainsKey( "Void MoveUp()" )){
			m_functionCallCounts.Add( "Void MoveUp()", 0 );
		}
		m_functionCallCounts["Void MoveUp()"]++;
			
	}

	public void MoveDown( ){
		//Mock Data:
		if(m_functionCallCounts == null) {
			m_functionCallCounts = new Dictionary<string, int>();
		}
		if(!m_functionCallCounts.ContainsKey( "Void MoveDown()" )){
			m_functionCallCounts.Add( "Void MoveDown()", 0 );
		}
		m_functionCallCounts["Void MoveDown()"]++;
			
	}

	public void MoveLineStart( ){
		//Mock Data:
		if(m_functionCallCounts == null) {
			m_functionCallCounts = new Dictionary<string, int>();
		}
		if(!m_functionCallCounts.ContainsKey( "Void MoveLineStart()" )){
			m_functionCallCounts.Add( "Void MoveLineStart()", 0 );
		}
		m_functionCallCounts["Void MoveLineStart()"]++;
			
	}

	public void MoveLineEnd( ){
		//Mock Data:
		if(m_functionCallCounts == null) {
			m_functionCallCounts = new Dictionary<string, int>();
		}
		if(!m_functionCallCounts.ContainsKey( "Void MoveLineEnd()" )){
			m_functionCallCounts.Add( "Void MoveLineEnd()", 0 );
		}
		m_functionCallCounts["Void MoveLineEnd()"]++;
			
	}

	public void MoveGraphicalLineStart( ){
		//Mock Data:
		if(m_functionCallCounts == null) {
			m_functionCallCounts = new Dictionary<string, int>();
		}
		if(!m_functionCallCounts.ContainsKey( "Void MoveGraphicalLineStart()" )){
			m_functionCallCounts.Add( "Void MoveGraphicalLineStart()", 0 );
		}
		m_functionCallCounts["Void MoveGraphicalLineStart()"]++;
			
	}

	public void MoveGraphicalLineEnd( ){
		//Mock Data:
		if(m_functionCallCounts == null) {
			m_functionCallCounts = new Dictionary<string, int>();
		}
		if(!m_functionCallCounts.ContainsKey( "Void MoveGraphicalLineEnd()" )){
			m_functionCallCounts.Add( "Void MoveGraphicalLineEnd()", 0 );
		}
		m_functionCallCounts["Void MoveGraphicalLineEnd()"]++;
			
	}

	public void MoveTextStart( ){
		//Mock Data:
		if(m_functionCallCounts == null) {
			m_functionCallCounts = new Dictionary<string, int>();
		}
		if(!m_functionCallCounts.ContainsKey( "Void MoveTextStart()" )){
			m_functionCallCounts.Add( "Void MoveTextStart()", 0 );
		}
		m_functionCallCounts["Void MoveTextStart()"]++;
			
	}

	public void MoveTextEnd( ){
		//Mock Data:
		if(m_functionCallCounts == null) {
			m_functionCallCounts = new Dictionary<string, int>();
		}
		if(!m_functionCallCounts.ContainsKey( "Void MoveTextEnd()" )){
			m_functionCallCounts.Add( "Void MoveTextEnd()", 0 );
		}
		m_functionCallCounts["Void MoveTextEnd()"]++;
			
	}

	public void MoveParagraphForward( ){
		//Mock Data:
		if(m_functionCallCounts == null) {
			m_functionCallCounts = new Dictionary<string, int>();
		}
		if(!m_functionCallCounts.ContainsKey( "Void MoveParagraphForward()" )){
			m_functionCallCounts.Add( "Void MoveParagraphForward()", 0 );
		}
		m_functionCallCounts["Void MoveParagraphForward()"]++;
			
	}

	public void MoveParagraphBackward( ){
		//Mock Data:
		if(m_functionCallCounts == null) {
			m_functionCallCounts = new Dictionary<string, int>();
		}
		if(!m_functionCallCounts.ContainsKey( "Void MoveParagraphBackward()" )){
			m_functionCallCounts.Add( "Void MoveParagraphBackward()", 0 );
		}
		m_functionCallCounts["Void MoveParagraphBackward()"]++;
			
	}

	public void MoveCursorToPosition( UnityEngine.Vector2 cursorPosition ){
		//Mock Data:
		if(m_functionCallCounts == null) {
			m_functionCallCounts = new Dictionary<string, int>();
		}
		if(!m_functionCallCounts.ContainsKey( "Void MoveCursorToPosition(Vector2)" )){
			m_functionCallCounts.Add( "Void MoveCursorToPosition(Vector2)", 0 );
		}
		m_functionCallCounts["Void MoveCursorToPosition(Vector2)"]++;
			
	}

	public void MoveAltCursorToPosition( UnityEngine.Vector2 cursorPosition ){
		//Mock Data:
		if(m_functionCallCounts == null) {
			m_functionCallCounts = new Dictionary<string, int>();
		}
		if(!m_functionCallCounts.ContainsKey( "Void MoveAltCursorToPosition(Vector2)" )){
			m_functionCallCounts.Add( "Void MoveAltCursorToPosition(Vector2)", 0 );
		}
		m_functionCallCounts["Void MoveAltCursorToPosition(Vector2)"]++;
			
	}

	public System.Boolean IsOverSelection( UnityEngine.Vector2 cursorPosition ){
		//Mock Data:
		if(m_functionCallCounts == null) {
			m_functionCallCounts = new Dictionary<string, int>();
		}
		if(!m_functionCallCounts.ContainsKey( "Boolean IsOverSelection(Vector2)" )){
			m_functionCallCounts.Add( "Boolean IsOverSelection(Vector2)", 0 );
		}
		m_functionCallCounts["Boolean IsOverSelection(Vector2)"]++;
			
		throw new NotImplementedException("This function was automatically generated by Mockery and has no real implementation yet.");
	}

	public void SelectToPosition( UnityEngine.Vector2 cursorPosition ){
		//Mock Data:
		if(m_functionCallCounts == null) {
			m_functionCallCounts = new Dictionary<string, int>();
		}
		if(!m_functionCallCounts.ContainsKey( "Void SelectToPosition(Vector2)" )){
			m_functionCallCounts.Add( "Void SelectToPosition(Vector2)", 0 );
		}
		m_functionCallCounts["Void SelectToPosition(Vector2)"]++;
			
	}

	public void SelectLeft( ){
		//Mock Data:
		if(m_functionCallCounts == null) {
			m_functionCallCounts = new Dictionary<string, int>();
		}
		if(!m_functionCallCounts.ContainsKey( "Void SelectLeft()" )){
			m_functionCallCounts.Add( "Void SelectLeft()", 0 );
		}
		m_functionCallCounts["Void SelectLeft()"]++;
			
	}

	public void SelectRight( ){
		//Mock Data:
		if(m_functionCallCounts == null) {
			m_functionCallCounts = new Dictionary<string, int>();
		}
		if(!m_functionCallCounts.ContainsKey( "Void SelectRight()" )){
			m_functionCallCounts.Add( "Void SelectRight()", 0 );
		}
		m_functionCallCounts["Void SelectRight()"]++;
			
	}

	public void SelectUp( ){
		//Mock Data:
		if(m_functionCallCounts == null) {
			m_functionCallCounts = new Dictionary<string, int>();
		}
		if(!m_functionCallCounts.ContainsKey( "Void SelectUp()" )){
			m_functionCallCounts.Add( "Void SelectUp()", 0 );
		}
		m_functionCallCounts["Void SelectUp()"]++;
			
	}

	public void SelectDown( ){
		//Mock Data:
		if(m_functionCallCounts == null) {
			m_functionCallCounts = new Dictionary<string, int>();
		}
		if(!m_functionCallCounts.ContainsKey( "Void SelectDown()" )){
			m_functionCallCounts.Add( "Void SelectDown()", 0 );
		}
		m_functionCallCounts["Void SelectDown()"]++;
			
	}

	public void SelectTextEnd( ){
		//Mock Data:
		if(m_functionCallCounts == null) {
			m_functionCallCounts = new Dictionary<string, int>();
		}
		if(!m_functionCallCounts.ContainsKey( "Void SelectTextEnd()" )){
			m_functionCallCounts.Add( "Void SelectTextEnd()", 0 );
		}
		m_functionCallCounts["Void SelectTextEnd()"]++;
			
	}

	public void SelectTextStart( ){
		//Mock Data:
		if(m_functionCallCounts == null) {
			m_functionCallCounts = new Dictionary<string, int>();
		}
		if(!m_functionCallCounts.ContainsKey( "Void SelectTextStart()" )){
			m_functionCallCounts.Add( "Void SelectTextStart()", 0 );
		}
		m_functionCallCounts["Void SelectTextStart()"]++;
			
	}

	public void MouseDragSelectsWholeWords( System.Boolean on ){
		//Mock Data:
		if(m_functionCallCounts == null) {
			m_functionCallCounts = new Dictionary<string, int>();
		}
		if(!m_functionCallCounts.ContainsKey( "Void MouseDragSelectsWholeWords(Boolean)" )){
			m_functionCallCounts.Add( "Void MouseDragSelectsWholeWords(Boolean)", 0 );
		}
		m_functionCallCounts["Void MouseDragSelectsWholeWords(Boolean)"]++;
			
	}

	public void DblClickSnap( UnityEngine.DblClickSnapping snapping ){
		//Mock Data:
		if(m_functionCallCounts == null) {
			m_functionCallCounts = new Dictionary<string, int>();
		}
		if(!m_functionCallCounts.ContainsKey( "Void DblClickSnap(DblClickSnapping)" )){
			m_functionCallCounts.Add( "Void DblClickSnap(DblClickSnapping)", 0 );
		}
		m_functionCallCounts["Void DblClickSnap(DblClickSnapping)"]++;
			
	}

	public void MoveWordRight( ){
		//Mock Data:
		if(m_functionCallCounts == null) {
			m_functionCallCounts = new Dictionary<string, int>();
		}
		if(!m_functionCallCounts.ContainsKey( "Void MoveWordRight()" )){
			m_functionCallCounts.Add( "Void MoveWordRight()", 0 );
		}
		m_functionCallCounts["Void MoveWordRight()"]++;
			
	}

	public void MoveToStartOfNextWord( ){
		//Mock Data:
		if(m_functionCallCounts == null) {
			m_functionCallCounts = new Dictionary<string, int>();
		}
		if(!m_functionCallCounts.ContainsKey( "Void MoveToStartOfNextWord()" )){
			m_functionCallCounts.Add( "Void MoveToStartOfNextWord()", 0 );
		}
		m_functionCallCounts["Void MoveToStartOfNextWord()"]++;
			
	}

	public void MoveToEndOfPreviousWord( ){
		//Mock Data:
		if(m_functionCallCounts == null) {
			m_functionCallCounts = new Dictionary<string, int>();
		}
		if(!m_functionCallCounts.ContainsKey( "Void MoveToEndOfPreviousWord()" )){
			m_functionCallCounts.Add( "Void MoveToEndOfPreviousWord()", 0 );
		}
		m_functionCallCounts["Void MoveToEndOfPreviousWord()"]++;
			
	}

	public void SelectToStartOfNextWord( ){
		//Mock Data:
		if(m_functionCallCounts == null) {
			m_functionCallCounts = new Dictionary<string, int>();
		}
		if(!m_functionCallCounts.ContainsKey( "Void SelectToStartOfNextWord()" )){
			m_functionCallCounts.Add( "Void SelectToStartOfNextWord()", 0 );
		}
		m_functionCallCounts["Void SelectToStartOfNextWord()"]++;
			
	}

	public void SelectToEndOfPreviousWord( ){
		//Mock Data:
		if(m_functionCallCounts == null) {
			m_functionCallCounts = new Dictionary<string, int>();
		}
		if(!m_functionCallCounts.ContainsKey( "Void SelectToEndOfPreviousWord()" )){
			m_functionCallCounts.Add( "Void SelectToEndOfPreviousWord()", 0 );
		}
		m_functionCallCounts["Void SelectToEndOfPreviousWord()"]++;
			
	}

	public System.Int32 FindStartOfNextWord( System.Int32 p ){
		//Mock Data:
		if(m_functionCallCounts == null) {
			m_functionCallCounts = new Dictionary<string, int>();
		}
		if(!m_functionCallCounts.ContainsKey( "Int32 FindStartOfNextWord(Int32)" )){
			m_functionCallCounts.Add( "Int32 FindStartOfNextWord(Int32)", 0 );
		}
		m_functionCallCounts["Int32 FindStartOfNextWord(Int32)"]++;
			
		throw new NotImplementedException("This function was automatically generated by Mockery and has no real implementation yet.");
	}

	public void MoveWordLeft( ){
		//Mock Data:
		if(m_functionCallCounts == null) {
			m_functionCallCounts = new Dictionary<string, int>();
		}
		if(!m_functionCallCounts.ContainsKey( "Void MoveWordLeft()" )){
			m_functionCallCounts.Add( "Void MoveWordLeft()", 0 );
		}
		m_functionCallCounts["Void MoveWordLeft()"]++;
			
	}

	public void SelectWordRight( ){
		//Mock Data:
		if(m_functionCallCounts == null) {
			m_functionCallCounts = new Dictionary<string, int>();
		}
		if(!m_functionCallCounts.ContainsKey( "Void SelectWordRight()" )){
			m_functionCallCounts.Add( "Void SelectWordRight()", 0 );
		}
		m_functionCallCounts["Void SelectWordRight()"]++;
			
	}

	public void SelectWordLeft( ){
		//Mock Data:
		if(m_functionCallCounts == null) {
			m_functionCallCounts = new Dictionary<string, int>();
		}
		if(!m_functionCallCounts.ContainsKey( "Void SelectWordLeft()" )){
			m_functionCallCounts.Add( "Void SelectWordLeft()", 0 );
		}
		m_functionCallCounts["Void SelectWordLeft()"]++;
			
	}

	public void ExpandSelectGraphicalLineStart( ){
		//Mock Data:
		if(m_functionCallCounts == null) {
			m_functionCallCounts = new Dictionary<string, int>();
		}
		if(!m_functionCallCounts.ContainsKey( "Void ExpandSelectGraphicalLineStart()" )){
			m_functionCallCounts.Add( "Void ExpandSelectGraphicalLineStart()", 0 );
		}
		m_functionCallCounts["Void ExpandSelectGraphicalLineStart()"]++;
			
	}

	public void ExpandSelectGraphicalLineEnd( ){
		//Mock Data:
		if(m_functionCallCounts == null) {
			m_functionCallCounts = new Dictionary<string, int>();
		}
		if(!m_functionCallCounts.ContainsKey( "Void ExpandSelectGraphicalLineEnd()" )){
			m_functionCallCounts.Add( "Void ExpandSelectGraphicalLineEnd()", 0 );
		}
		m_functionCallCounts["Void ExpandSelectGraphicalLineEnd()"]++;
			
	}

	public void SelectGraphicalLineStart( ){
		//Mock Data:
		if(m_functionCallCounts == null) {
			m_functionCallCounts = new Dictionary<string, int>();
		}
		if(!m_functionCallCounts.ContainsKey( "Void SelectGraphicalLineStart()" )){
			m_functionCallCounts.Add( "Void SelectGraphicalLineStart()", 0 );
		}
		m_functionCallCounts["Void SelectGraphicalLineStart()"]++;
			
	}

	public void SelectGraphicalLineEnd( ){
		//Mock Data:
		if(m_functionCallCounts == null) {
			m_functionCallCounts = new Dictionary<string, int>();
		}
		if(!m_functionCallCounts.ContainsKey( "Void SelectGraphicalLineEnd()" )){
			m_functionCallCounts.Add( "Void SelectGraphicalLineEnd()", 0 );
		}
		m_functionCallCounts["Void SelectGraphicalLineEnd()"]++;
			
	}

	public void SelectParagraphForward( ){
		//Mock Data:
		if(m_functionCallCounts == null) {
			m_functionCallCounts = new Dictionary<string, int>();
		}
		if(!m_functionCallCounts.ContainsKey( "Void SelectParagraphForward()" )){
			m_functionCallCounts.Add( "Void SelectParagraphForward()", 0 );
		}
		m_functionCallCounts["Void SelectParagraphForward()"]++;
			
	}

	public void SelectParagraphBackward( ){
		//Mock Data:
		if(m_functionCallCounts == null) {
			m_functionCallCounts = new Dictionary<string, int>();
		}
		if(!m_functionCallCounts.ContainsKey( "Void SelectParagraphBackward()" )){
			m_functionCallCounts.Add( "Void SelectParagraphBackward()", 0 );
		}
		m_functionCallCounts["Void SelectParagraphBackward()"]++;
			
	}

	public void SelectCurrentWord( ){
		//Mock Data:
		if(m_functionCallCounts == null) {
			m_functionCallCounts = new Dictionary<string, int>();
		}
		if(!m_functionCallCounts.ContainsKey( "Void SelectCurrentWord()" )){
			m_functionCallCounts.Add( "Void SelectCurrentWord()", 0 );
		}
		m_functionCallCounts["Void SelectCurrentWord()"]++;
			
	}

	public void SelectCurrentParagraph( ){
		//Mock Data:
		if(m_functionCallCounts == null) {
			m_functionCallCounts = new Dictionary<string, int>();
		}
		if(!m_functionCallCounts.ContainsKey( "Void SelectCurrentParagraph()" )){
			m_functionCallCounts.Add( "Void SelectCurrentParagraph()", 0 );
		}
		m_functionCallCounts["Void SelectCurrentParagraph()"]++;
			
	}

	public void DrawCursor( System.String text ){
		//Mock Data:
		if(m_functionCallCounts == null) {
			m_functionCallCounts = new Dictionary<string, int>();
		}
		if(!m_functionCallCounts.ContainsKey( "Void DrawCursor(System.String)" )){
			m_functionCallCounts.Add( "Void DrawCursor(System.String)", 0 );
		}
		m_functionCallCounts["Void DrawCursor(System.String)"]++;
			
	}

	public void SaveBackup( ){
		//Mock Data:
		if(m_functionCallCounts == null) {
			m_functionCallCounts = new Dictionary<string, int>();
		}
		if(!m_functionCallCounts.ContainsKey( "Void SaveBackup()" )){
			m_functionCallCounts.Add( "Void SaveBackup()", 0 );
		}
		m_functionCallCounts["Void SaveBackup()"]++;
			
	}

	public void Undo( ){
		//Mock Data:
		if(m_functionCallCounts == null) {
			m_functionCallCounts = new Dictionary<string, int>();
		}
		if(!m_functionCallCounts.ContainsKey( "Void Undo()" )){
			m_functionCallCounts.Add( "Void Undo()", 0 );
		}
		m_functionCallCounts["Void Undo()"]++;
			
	}

	public System.Boolean Cut( ){
		//Mock Data:
		if(m_functionCallCounts == null) {
			m_functionCallCounts = new Dictionary<string, int>();
		}
		if(!m_functionCallCounts.ContainsKey( "Boolean Cut()" )){
			m_functionCallCounts.Add( "Boolean Cut()", 0 );
		}
		m_functionCallCounts["Boolean Cut()"]++;
			
		throw new NotImplementedException("This function was automatically generated by Mockery and has no real implementation yet.");
	}

	public void Copy( ){
		//Mock Data:
		if(m_functionCallCounts == null) {
			m_functionCallCounts = new Dictionary<string, int>();
		}
		if(!m_functionCallCounts.ContainsKey( "Void Copy()" )){
			m_functionCallCounts.Add( "Void Copy()", 0 );
		}
		m_functionCallCounts["Void Copy()"]++;
			
	}

	public System.Boolean Paste( ){
		//Mock Data:
		if(m_functionCallCounts == null) {
			m_functionCallCounts = new Dictionary<string, int>();
		}
		if(!m_functionCallCounts.ContainsKey( "Boolean Paste()" )){
			m_functionCallCounts.Add( "Boolean Paste()", 0 );
		}
		m_functionCallCounts["Boolean Paste()"]++;
			
		throw new NotImplementedException("This function was automatically generated by Mockery and has no real implementation yet.");
	}

	public void ClampPos( ){
		//Mock Data:
		if(m_functionCallCounts == null) {
			m_functionCallCounts = new Dictionary<string, int>();
		}
		if(!m_functionCallCounts.ContainsKey( "Void ClampPos()" )){
			m_functionCallCounts.Add( "Void ClampPos()", 0 );
		}
		m_functionCallCounts["Void ClampPos()"]++;
			
	}

	public TextEditor( ){
		//Mock Data:
			m_functionCallCounts = new Dictionary<string, int>();
		if(!m_functionCallCounts.ContainsKey( "Void .ctor()" )){
			m_functionCallCounts.Add( "Void .ctor()", 0 );
		}
		m_functionCallCounts["Void .ctor()"]++;
			
	}

	public System.String SelectedText {
		get {
			if(m_functionCallCounts == null) {
				m_functionCallCounts = new Dictionary<string, int>();
			}
			if(!m_functionCallCounts.ContainsKey( "get_SelectedText" )){
				m_functionCallCounts.Add( "get_SelectedText", 0 );
			}
			m_functionCallCounts["get_SelectedText"]++;
			
			throw new NotImplementedException("This function was automatically generated by Mockery and has no real implementation yet.");
		}
	}

	public System.Boolean hasSelection {
		get {
			if(m_functionCallCounts == null) {
				m_functionCallCounts = new Dictionary<string, int>();
			}
			if(!m_functionCallCounts.ContainsKey( "get_hasSelection" )){
				m_functionCallCounts.Add( "get_hasSelection", 0 );
			}
			m_functionCallCounts["get_hasSelection"]++;
			
			throw new NotImplementedException("This function was automatically generated by Mockery and has no real implementation yet.");
		}
	}
}
}
