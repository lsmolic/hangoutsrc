using System;
using System.Collections;
using System.Collections.Generic;
using System.Runtime.Serialization;


namespace UnityEngine {
[System.Reflection.DefaultMemberAttribute("")]
public struct Vector4 {
	
	private float m_x;
	private float m_y;
	private float m_z;
	private float m_w;
 
	public Vector4(float x, float y, float z, float w) {
		m_functionCallCounts = new Dictionary<string, int>();
		m_x = x;
		m_y = y;
		m_z = z;
		m_w = w;
	}

	public float x {
		get { return m_x; }
		set { m_x = value; }
	}

	public float y {
		get { return m_y; }
		set { m_y = value; }
	}
	
	public float z {
		get { return m_z; }
		set { m_z = value; }
	}

	public float w {
		get { return m_w; }
		set { m_w = value; }
	}

	// Mock data:
	private Dictionary<string, int> m_functionCallCounts;
	public Dictionary<string, int> FunctionCallCounts {
		get { 
			if(m_functionCallCounts == null) {
				m_functionCallCounts = new Dictionary<string, int>();
			}
			return m_functionCallCounts;
		}
	}

	public static UnityEngine.Vector4 Lerp( UnityEngine.Vector4 from, UnityEngine.Vector4 to, System.Single t ){
		throw new NotImplementedException("This function was automatically generated by Mockery and has no real implementation yet.");
	}

	public static UnityEngine.Vector4 Scale( UnityEngine.Vector4 a, UnityEngine.Vector4 b ){
		throw new NotImplementedException("This function was automatically generated by Mockery and has no real implementation yet.");
	}

	public void Scale( UnityEngine.Vector4 scale ){
		//Mock Data:
		if(m_functionCallCounts == null) {
			m_functionCallCounts = new Dictionary<string, int>();
		}
		if(!m_functionCallCounts.ContainsKey( "Void Scale(Vector4)" )){
			m_functionCallCounts.Add( "Void Scale(Vector4)", 0 );
		}
		m_functionCallCounts["Void Scale(Vector4)"]++;
			
	}

	public override System.Int32 GetHashCode( ){
		//Mock Data:
		if(m_functionCallCounts == null) {
			m_functionCallCounts = new Dictionary<string, int>();
		}
		if(!m_functionCallCounts.ContainsKey( "Int32 GetHashCode()" )){
			m_functionCallCounts.Add( "Int32 GetHashCode()", 0 );
		}
		m_functionCallCounts["Int32 GetHashCode()"]++;
			
		throw new NotImplementedException("This function was automatically generated by Mockery and has no real implementation yet.");
	}

	public override System.Boolean Equals( System.Object other ){
		//Mock Data:
		if(m_functionCallCounts == null) {
			m_functionCallCounts = new Dictionary<string, int>();
		}
		if(!m_functionCallCounts.ContainsKey( "Boolean Equals(System.Object)" )){
			m_functionCallCounts.Add( "Boolean Equals(System.Object)", 0 );
		}
		m_functionCallCounts["Boolean Equals(System.Object)"]++;
			
		throw new NotImplementedException("This function was automatically generated by Mockery and has no real implementation yet.");
	}

	public static UnityEngine.Vector4 Normalize( UnityEngine.Vector4 a ){
		throw new NotImplementedException("This function was automatically generated by Mockery and has no real implementation yet.");
	}

	public void Normalize( ){
		//Mock Data:
		if(m_functionCallCounts == null) {
			m_functionCallCounts = new Dictionary<string, int>();
		}
		if(!m_functionCallCounts.ContainsKey( "Void Normalize()" )){
			m_functionCallCounts.Add( "Void Normalize()", 0 );
		}
		m_functionCallCounts["Void Normalize()"]++;
			
	}

	public override System.String ToString( ){
		//Mock Data:
		if(m_functionCallCounts == null) {
			m_functionCallCounts = new Dictionary<string, int>();
		}
		if(!m_functionCallCounts.ContainsKey( "System.String ToString()" )){
			m_functionCallCounts.Add( "System.String ToString()", 0 );
		}
		m_functionCallCounts["System.String ToString()"]++;
			
		throw new NotImplementedException("This function was automatically generated by Mockery and has no real implementation yet.");
	}

	public static System.Single Dot( UnityEngine.Vector4 a, UnityEngine.Vector4 b ){
		throw new NotImplementedException("This function was automatically generated by Mockery and has no real implementation yet.");
	}

	public static UnityEngine.Vector4 Project( UnityEngine.Vector4 a, UnityEngine.Vector4 b ){
		throw new NotImplementedException("This function was automatically generated by Mockery and has no real implementation yet.");
	}

	public static System.Single Distance( UnityEngine.Vector4 a, UnityEngine.Vector4 b ){
		throw new NotImplementedException("This function was automatically generated by Mockery and has no real implementation yet.");
	}

	public static System.Single Magnitude( UnityEngine.Vector4 a ){
		throw new NotImplementedException("This function was automatically generated by Mockery and has no real implementation yet.");
	}

	public static System.Single SqrMagnitude( UnityEngine.Vector4 a ){
		throw new NotImplementedException("This function was automatically generated by Mockery and has no real implementation yet.");
	}

	public System.Single SqrMagnitude( ){
		//Mock Data:
		if(m_functionCallCounts == null) {
			m_functionCallCounts = new Dictionary<string, int>();
		}
		if(!m_functionCallCounts.ContainsKey( "Single SqrMagnitude()" )){
			m_functionCallCounts.Add( "Single SqrMagnitude()", 0 );
		}
		m_functionCallCounts["Single SqrMagnitude()"]++;
			
		throw new NotImplementedException("This function was automatically generated by Mockery and has no real implementation yet.");
	}

	public static UnityEngine.Vector4 operator +( UnityEngine.Vector4 a, UnityEngine.Vector4 b ){
		throw new NotImplementedException("This function was automatically generated by Mockery and has no real implementation yet.");
	}

	public static UnityEngine.Vector4 operator -( UnityEngine.Vector4 a, UnityEngine.Vector4 b ){
		throw new NotImplementedException("This function was automatically generated by Mockery and has no real implementation yet.");
	}

	public static UnityEngine.Vector4 operator !( UnityEngine.Vector4 a ){
		throw new NotImplementedException("This function was automatically generated by Mockery and has no real implementation yet.");
	}

	public static UnityEngine.Vector4 operator *( UnityEngine.Vector4 a, System.Single d ){
		throw new NotImplementedException("This function was automatically generated by Mockery and has no real implementation yet.");
	}

	public static UnityEngine.Vector4 operator *( System.Single d, UnityEngine.Vector4 a ){
		throw new NotImplementedException("This function was automatically generated by Mockery and has no real implementation yet.");
	}

	public static UnityEngine.Vector4 operator /( UnityEngine.Vector4 a, System.Single d ){
		throw new NotImplementedException("This function was automatically generated by Mockery and has no real implementation yet.");
	}

	public static System.Boolean operator ==( UnityEngine.Vector4 lhs, UnityEngine.Vector4 rhs ){
		throw new NotImplementedException("This function was automatically generated by Mockery and has no real implementation yet.");
	}

	public static System.Boolean operator !=( UnityEngine.Vector4 lhs, UnityEngine.Vector4 rhs ){
		throw new NotImplementedException("This function was automatically generated by Mockery and has no real implementation yet.");
	}

	public static implicit operator UnityEngine.Vector4( UnityEngine.Vector3 v ){
		throw new NotImplementedException("This function was automatically generated by Mockery and has no real implementation yet.");
	}

	public static implicit operator UnityEngine.Vector3( UnityEngine.Vector4 v ){
		throw new NotImplementedException("This function was automatically generated by Mockery and has no real implementation yet.");
	}

	public System.Single Item {
		get {
			if(m_functionCallCounts == null) {
				m_functionCallCounts = new Dictionary<string, int>();
			}
			if(!m_functionCallCounts.ContainsKey( "get_Item" )){
				m_functionCallCounts.Add( "get_Item", 0 );
			}
			m_functionCallCounts["get_Item"]++;
			
			throw new NotImplementedException("This function was automatically generated by Mockery and has no real implementation yet.");
		}
		set {
			if(m_functionCallCounts == null) {
				m_functionCallCounts = new Dictionary<string, int>();
			}
			if(!m_functionCallCounts.ContainsKey( "set_Item" )){
				m_functionCallCounts.Add( "set_Item", 0 );
			}
			m_functionCallCounts["set_Item"]++;
			
		}
	}

	public static UnityEngine.Vector4 zero {
		get {
			throw new NotImplementedException("This function was automatically generated by Mockery and has no real implementation yet.");
		}
	}

	public System.Single magnitude {
		get {
			if(m_functionCallCounts == null) {
				m_functionCallCounts = new Dictionary<string, int>();
			}
			if(!m_functionCallCounts.ContainsKey( "get_magnitude" )){
				m_functionCallCounts.Add( "get_magnitude", 0 );
			}
			m_functionCallCounts["get_magnitude"]++;
			
			throw new NotImplementedException("This function was automatically generated by Mockery and has no real implementation yet.");
		}
	}

	public System.Single sqrMagnitude {
		get {
			if(m_functionCallCounts == null) {
				m_functionCallCounts = new Dictionary<string, int>();
			}
			if(!m_functionCallCounts.ContainsKey( "get_sqrMagnitude" )){
				m_functionCallCounts.Add( "get_sqrMagnitude", 0 );
			}
			m_functionCallCounts["get_sqrMagnitude"]++;
			
			throw new NotImplementedException("This function was automatically generated by Mockery and has no real implementation yet.");
		}
	}

	public static UnityEngine.Vector4 one {
		get {
			throw new NotImplementedException("This function was automatically generated by Mockery and has no real implementation yet.");
		}
	}

	public UnityEngine.Vector4 normalized {
		get {
			if(m_functionCallCounts == null) {
				m_functionCallCounts = new Dictionary<string, int>();
			}
			if(!m_functionCallCounts.ContainsKey( "get_normalized" )){
				m_functionCallCounts.Add( "get_normalized", 0 );
			}
			m_functionCallCounts["get_normalized"]++;
			
			throw new NotImplementedException("This function was automatically generated by Mockery and has no real implementation yet.");
		}
	}
}
}
