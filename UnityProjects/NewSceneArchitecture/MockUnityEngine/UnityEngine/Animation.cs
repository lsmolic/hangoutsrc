using System;
using System.Collections;
using System.Collections.Generic;
using System.Runtime.Serialization;


namespace UnityEngine 
{

public class Animation : UnityEngine.Behaviour 
{
	// Mock data:
	private Dictionary<string, int> m_functionCallCounts;
	public Dictionary<string, int> FunctionCallCounts {
		get { 
			if(m_functionCallCounts == null) {
				m_functionCallCounts = new Dictionary<string, int>();
			}
			return m_functionCallCounts;
		}
	}

	public void Stop( ){
		//Mock Data:
		if(m_functionCallCounts == null) {
			m_functionCallCounts = new Dictionary<string, int>();
		}
		if(!m_functionCallCounts.ContainsKey( "Void Stop()" )){
			m_functionCallCounts.Add( "Void Stop()", 0 );
		}
		m_functionCallCounts["Void Stop()"]++;
			
	}

	public void Stop( System.String name ){
		//Mock Data:
		if(m_functionCallCounts == null) {
			m_functionCallCounts = new Dictionary<string, int>();
		}
		if(!m_functionCallCounts.ContainsKey( "Void Stop(System.String)" )){
			m_functionCallCounts.Add( "Void Stop(System.String)", 0 );
		}
		m_functionCallCounts["Void Stop(System.String)"]++;
			
	}

	public void Rewind( System.String name ){
		//Mock Data:
		if(m_functionCallCounts == null) {
			m_functionCallCounts = new Dictionary<string, int>();
		}
		if(!m_functionCallCounts.ContainsKey( "Void Rewind(System.String)" )){
			m_functionCallCounts.Add( "Void Rewind(System.String)", 0 );
		}
		m_functionCallCounts["Void Rewind(System.String)"]++;
			
	}

	public void Rewind( ){
		//Mock Data:
		if(m_functionCallCounts == null) {
			m_functionCallCounts = new Dictionary<string, int>();
		}
		if(!m_functionCallCounts.ContainsKey( "Void Rewind()" )){
			m_functionCallCounts.Add( "Void Rewind()", 0 );
		}
		m_functionCallCounts["Void Rewind()"]++;
			
	}

	public void Sample( ){
		//Mock Data:
		if(m_functionCallCounts == null) {
			m_functionCallCounts = new Dictionary<string, int>();
		}
		if(!m_functionCallCounts.ContainsKey( "Void Sample()" )){
			m_functionCallCounts.Add( "Void Sample()", 0 );
		}
		m_functionCallCounts["Void Sample()"]++;
			
	}

	public System.Boolean IsPlaying( System.String name ){
		//Mock Data:
		if(m_functionCallCounts == null) {
			m_functionCallCounts = new Dictionary<string, int>();
		}
		if(!m_functionCallCounts.ContainsKey( "Boolean IsPlaying(System.String)" )){
			m_functionCallCounts.Add( "Boolean IsPlaying(System.String)", 0 );
		}
		m_functionCallCounts["Boolean IsPlaying(System.String)"]++;
			
		throw new NotImplementedException("This function was automatically generated by Mockery and has no real implementation yet.");
	}

	public System.Boolean Play( ){
		//Mock Data:
		if(m_functionCallCounts == null) {
			m_functionCallCounts = new Dictionary<string, int>();
		}
		if(!m_functionCallCounts.ContainsKey( "Boolean Play()" )){
			m_functionCallCounts.Add( "Boolean Play()", 0 );
		}
		m_functionCallCounts["Boolean Play()"]++;
			
		throw new NotImplementedException("This function was automatically generated by Mockery and has no real implementation yet.");
	}

	public System.Boolean Play( UnityEngine.PlayMode mode ){
		//Mock Data:
		if(m_functionCallCounts == null) {
			m_functionCallCounts = new Dictionary<string, int>();
		}
		if(!m_functionCallCounts.ContainsKey( "Boolean Play(PlayMode)" )){
			m_functionCallCounts.Add( "Boolean Play(PlayMode)", 0 );
		}
		m_functionCallCounts["Boolean Play(PlayMode)"]++;
			
		throw new NotImplementedException("This function was automatically generated by Mockery and has no real implementation yet.");
	}

	public System.Boolean Play( System.String animation, UnityEngine.PlayMode mode ){
		//Mock Data:
		if(m_functionCallCounts == null) {
			m_functionCallCounts = new Dictionary<string, int>();
		}
		if(!m_functionCallCounts.ContainsKey( "Boolean Play(System.String, PlayMode)" )){
			m_functionCallCounts.Add( "Boolean Play(System.String, PlayMode)", 0 );
		}
		m_functionCallCounts["Boolean Play(System.String, PlayMode)"]++;
			
		throw new NotImplementedException("This function was automatically generated by Mockery and has no real implementation yet.");
	}

	public System.Boolean Play( System.String animation ){
		//Mock Data:
		if(m_functionCallCounts == null) {
			m_functionCallCounts = new Dictionary<string, int>();
		}
		if(!m_functionCallCounts.ContainsKey( "Boolean Play(System.String)" )){
			m_functionCallCounts.Add( "Boolean Play(System.String)", 0 );
		}
		m_functionCallCounts["Boolean Play(System.String)"]++;
			
		throw new NotImplementedException("This function was automatically generated by Mockery and has no real implementation yet.");
	}

	public void CrossFade( System.String animation, System.Single fadeLength, UnityEngine.PlayMode mode ){
		//Mock Data:
		if(m_functionCallCounts == null) {
			m_functionCallCounts = new Dictionary<string, int>();
		}
		if(!m_functionCallCounts.ContainsKey( "Void CrossFade(System.String, Single, PlayMode)" )){
			m_functionCallCounts.Add( "Void CrossFade(System.String, Single, PlayMode)", 0 );
		}
		m_functionCallCounts["Void CrossFade(System.String, Single, PlayMode)"]++;
			
	}

	public void CrossFade( System.String animation, System.Single fadeLength ){
		//Mock Data:
		if(m_functionCallCounts == null) {
			m_functionCallCounts = new Dictionary<string, int>();
		}
		if(!m_functionCallCounts.ContainsKey( "Void CrossFade(System.String, Single)" )){
			m_functionCallCounts.Add( "Void CrossFade(System.String, Single)", 0 );
		}
		m_functionCallCounts["Void CrossFade(System.String, Single)"]++;
			
	}

	public void CrossFade( System.String animation ){
		//Mock Data:
		if(m_functionCallCounts == null) {
			m_functionCallCounts = new Dictionary<string, int>();
		}
		if(!m_functionCallCounts.ContainsKey( "Void CrossFade(System.String)" )){
			m_functionCallCounts.Add( "Void CrossFade(System.String)", 0 );
		}
		m_functionCallCounts["Void CrossFade(System.String)"]++;
			
	}

	public void Blend( System.String animation, System.Single targetWeight, System.Single fadeLength ){
		//Mock Data:
		if(m_functionCallCounts == null) {
			m_functionCallCounts = new Dictionary<string, int>();
		}
		if(!m_functionCallCounts.ContainsKey( "Void Blend(System.String, Single, Single)" )){
			m_functionCallCounts.Add( "Void Blend(System.String, Single, Single)", 0 );
		}
		m_functionCallCounts["Void Blend(System.String, Single, Single)"]++;
			
	}

	public void Blend( System.String animation, System.Single targetWeight ){
		//Mock Data:
		if(m_functionCallCounts == null) {
			m_functionCallCounts = new Dictionary<string, int>();
		}
		if(!m_functionCallCounts.ContainsKey( "Void Blend(System.String, Single)" )){
			m_functionCallCounts.Add( "Void Blend(System.String, Single)", 0 );
		}
		m_functionCallCounts["Void Blend(System.String, Single)"]++;
			
	}

	public void Blend( System.String animation ){
		//Mock Data:
		if(m_functionCallCounts == null) {
			m_functionCallCounts = new Dictionary<string, int>();
		}
		if(!m_functionCallCounts.ContainsKey( "Void Blend(System.String)" )){
			m_functionCallCounts.Add( "Void Blend(System.String)", 0 );
		}
		m_functionCallCounts["Void Blend(System.String)"]++;
			
	}

	public UnityEngine.AnimationState CrossFadeQueued( System.String animation, System.Single fadeLength, UnityEngine.QueueMode queue, UnityEngine.PlayMode mode ){
		//Mock Data:
		if(m_functionCallCounts == null) {
			m_functionCallCounts = new Dictionary<string, int>();
		}
		if(!m_functionCallCounts.ContainsKey( "UnityEngine.AnimationState CrossFadeQueued(System.String, Single, QueueMode, PlayMode)" )){
			m_functionCallCounts.Add( "UnityEngine.AnimationState CrossFadeQueued(System.String, Single, QueueMode, PlayMode)", 0 );
		}
		m_functionCallCounts["UnityEngine.AnimationState CrossFadeQueued(System.String, Single, QueueMode, PlayMode)"]++;
			
		throw new NotImplementedException("This function was automatically generated by Mockery and has no real implementation yet.");
	}

	public UnityEngine.AnimationState CrossFadeQueued( System.String animation, System.Single fadeLength, UnityEngine.QueueMode queue ){
		//Mock Data:
		if(m_functionCallCounts == null) {
			m_functionCallCounts = new Dictionary<string, int>();
		}
		if(!m_functionCallCounts.ContainsKey( "UnityEngine.AnimationState CrossFadeQueued(System.String, Single, QueueMode)" )){
			m_functionCallCounts.Add( "UnityEngine.AnimationState CrossFadeQueued(System.String, Single, QueueMode)", 0 );
		}
		m_functionCallCounts["UnityEngine.AnimationState CrossFadeQueued(System.String, Single, QueueMode)"]++;
			
		throw new NotImplementedException("This function was automatically generated by Mockery and has no real implementation yet.");
	}

	public UnityEngine.AnimationState CrossFadeQueued( System.String animation, System.Single fadeLength ){
		//Mock Data:
		if(m_functionCallCounts == null) {
			m_functionCallCounts = new Dictionary<string, int>();
		}
		if(!m_functionCallCounts.ContainsKey( "UnityEngine.AnimationState CrossFadeQueued(System.String, Single)" )){
			m_functionCallCounts.Add( "UnityEngine.AnimationState CrossFadeQueued(System.String, Single)", 0 );
		}
		m_functionCallCounts["UnityEngine.AnimationState CrossFadeQueued(System.String, Single)"]++;
			
		throw new NotImplementedException("This function was automatically generated by Mockery and has no real implementation yet.");
	}

	public UnityEngine.AnimationState CrossFadeQueued( System.String animation ){
		//Mock Data:
		if(m_functionCallCounts == null) {
			m_functionCallCounts = new Dictionary<string, int>();
		}
		if(!m_functionCallCounts.ContainsKey( "UnityEngine.AnimationState CrossFadeQueued(System.String)" )){
			m_functionCallCounts.Add( "UnityEngine.AnimationState CrossFadeQueued(System.String)", 0 );
		}
		m_functionCallCounts["UnityEngine.AnimationState CrossFadeQueued(System.String)"]++;
			
		throw new NotImplementedException("This function was automatically generated by Mockery and has no real implementation yet.");
	}

	public UnityEngine.AnimationState PlayQueued( System.String animation, UnityEngine.QueueMode queue, UnityEngine.PlayMode mode ){
		//Mock Data:
		if(m_functionCallCounts == null) {
			m_functionCallCounts = new Dictionary<string, int>();
		}
		if(!m_functionCallCounts.ContainsKey( "UnityEngine.AnimationState PlayQueued(System.String, QueueMode, PlayMode)" )){
			m_functionCallCounts.Add( "UnityEngine.AnimationState PlayQueued(System.String, QueueMode, PlayMode)", 0 );
		}
		m_functionCallCounts["UnityEngine.AnimationState PlayQueued(System.String, QueueMode, PlayMode)"]++;
			
		throw new NotImplementedException("This function was automatically generated by Mockery and has no real implementation yet.");
	}

	public UnityEngine.AnimationState PlayQueued( System.String animation, UnityEngine.QueueMode queue ){
		//Mock Data:
		if(m_functionCallCounts == null) {
			m_functionCallCounts = new Dictionary<string, int>();
		}
		if(!m_functionCallCounts.ContainsKey( "UnityEngine.AnimationState PlayQueued(System.String, QueueMode)" )){
			m_functionCallCounts.Add( "UnityEngine.AnimationState PlayQueued(System.String, QueueMode)", 0 );
		}
		m_functionCallCounts["UnityEngine.AnimationState PlayQueued(System.String, QueueMode)"]++;
			
		throw new NotImplementedException("This function was automatically generated by Mockery and has no real implementation yet.");
	}

	public UnityEngine.AnimationState PlayQueued( System.String animation ){
		//Mock Data:
		if(m_functionCallCounts == null) {
			m_functionCallCounts = new Dictionary<string, int>();
		}
		if(!m_functionCallCounts.ContainsKey( "UnityEngine.AnimationState PlayQueued(System.String)" )){
			m_functionCallCounts.Add( "UnityEngine.AnimationState PlayQueued(System.String)", 0 );
		}
		m_functionCallCounts["UnityEngine.AnimationState PlayQueued(System.String)"]++;
			
		throw new NotImplementedException("This function was automatically generated by Mockery and has no real implementation yet.");
	}

	public void AddClip( UnityEngine.AnimationClip clip, System.String newName ){
		//Mock Data:
		if(m_functionCallCounts == null) {
			m_functionCallCounts = new Dictionary<string, int>();
		}
		if(!m_functionCallCounts.ContainsKey( "Void AddClip(UnityEngine.AnimationClip, System.String)" )){
			m_functionCallCounts.Add( "Void AddClip(UnityEngine.AnimationClip, System.String)", 0 );
		}
		m_functionCallCounts["Void AddClip(UnityEngine.AnimationClip, System.String)"]++;
			
	}

	public void AddClip( UnityEngine.AnimationClip clip, System.String newName, System.Int32 firstFrame, System.Int32 lastFrame, System.Boolean addLoopFrame ){
		//Mock Data:
		if(m_functionCallCounts == null) {
			m_functionCallCounts = new Dictionary<string, int>();
		}
		if(!m_functionCallCounts.ContainsKey( "Void AddClip(UnityEngine.AnimationClip, System.String, Int32, Int32, Boolean)" )){
			m_functionCallCounts.Add( "Void AddClip(UnityEngine.AnimationClip, System.String, Int32, Int32, Boolean)", 0 );
		}
		m_functionCallCounts["Void AddClip(UnityEngine.AnimationClip, System.String, Int32, Int32, Boolean)"]++;
			
	}

	public void AddClip( UnityEngine.AnimationClip clip, System.String newName, System.Int32 firstFrame, System.Int32 lastFrame ){
		//Mock Data:
		if(m_functionCallCounts == null) {
			m_functionCallCounts = new Dictionary<string, int>();
		}
		if(!m_functionCallCounts.ContainsKey( "Void AddClip(UnityEngine.AnimationClip, System.String, Int32, Int32)" )){
			m_functionCallCounts.Add( "Void AddClip(UnityEngine.AnimationClip, System.String, Int32, Int32)", 0 );
		}
		m_functionCallCounts["Void AddClip(UnityEngine.AnimationClip, System.String, Int32, Int32)"]++;
			
	}

	public void RemoveClip( UnityEngine.AnimationClip clip ){
		//Mock Data:
		if(m_functionCallCounts == null) {
			m_functionCallCounts = new Dictionary<string, int>();
		}
		if(!m_functionCallCounts.ContainsKey( "Void RemoveClip(UnityEngine.AnimationClip)" )){
			m_functionCallCounts.Add( "Void RemoveClip(UnityEngine.AnimationClip)", 0 );
		}
		m_functionCallCounts["Void RemoveClip(UnityEngine.AnimationClip)"]++;
			
	}

	public void RemoveClip( System.String clipName ){
		//Mock Data:
		if(m_functionCallCounts == null) {
			m_functionCallCounts = new Dictionary<string, int>();
		}
		if(!m_functionCallCounts.ContainsKey( "Void RemoveClip(System.String)" )){
			m_functionCallCounts.Add( "Void RemoveClip(System.String)", 0 );
		}
		m_functionCallCounts["Void RemoveClip(System.String)"]++;
			
	}

	public System.Int32 GetClipCount( ){
		//Mock Data:
		if(m_functionCallCounts == null) {
			m_functionCallCounts = new Dictionary<string, int>();
		}
		if(!m_functionCallCounts.ContainsKey( "Int32 GetClipCount()" )){
			m_functionCallCounts.Add( "Int32 GetClipCount()", 0 );
		}
		m_functionCallCounts["Int32 GetClipCount()"]++;
			
		throw new NotImplementedException("This function was automatically generated by Mockery and has no real implementation yet.");
	}

	public System.Boolean Play( UnityEngine.AnimationPlayMode mode ){
		//Mock Data:
		if(m_functionCallCounts == null) {
			m_functionCallCounts = new Dictionary<string, int>();
		}
		if(!m_functionCallCounts.ContainsKey( "Boolean Play(AnimationPlayMode)" )){
			m_functionCallCounts.Add( "Boolean Play(AnimationPlayMode)", 0 );
		}
		m_functionCallCounts["Boolean Play(AnimationPlayMode)"]++;
			
		throw new NotImplementedException("This function was automatically generated by Mockery and has no real implementation yet.");
	}

    public UnityEngine.AnimationState this[string stateName]
    {
        get
        {
            //Mock Data:
            if (m_functionCallCounts == null)
            {
                m_functionCallCounts = new Dictionary<string, int>();
            }
            if (!m_functionCallCounts.ContainsKey("AnimationState this[string]"))
            {
                m_functionCallCounts.Add("AnimationState this[string]", 0);
            }
            m_functionCallCounts["AnimationState this[string]"]++;

            throw new NotImplementedException("This function was automatically generated by Mockery and has no real implementation yet.");
        }
    }

	public System.Boolean Play( System.String animation, UnityEngine.AnimationPlayMode mode ){
		//Mock Data:
		if(m_functionCallCounts == null) {
			m_functionCallCounts = new Dictionary<string, int>();
		}
		if(!m_functionCallCounts.ContainsKey( "Boolean Play(System.String, AnimationPlayMode)" )){
			m_functionCallCounts.Add( "Boolean Play(System.String, AnimationPlayMode)", 0 );
		}
		m_functionCallCounts["Boolean Play(System.String, AnimationPlayMode)"]++;
			
		throw new NotImplementedException("This function was automatically generated by Mockery and has no real implementation yet.");
	}

	public void SyncLayer( System.Int32 layer ){
		//Mock Data:
		if(m_functionCallCounts == null) {
			m_functionCallCounts = new Dictionary<string, int>();
		}
		if(!m_functionCallCounts.ContainsKey( "Void SyncLayer(Int32)" )){
			m_functionCallCounts.Add( "Void SyncLayer(Int32)", 0 );
		}
		m_functionCallCounts["Void SyncLayer(Int32)"]++;
			
	}

	public virtual System.Collections.IEnumerator GetEnumerator( ){
		//Mock Data:
		if(m_functionCallCounts == null) {
			m_functionCallCounts = new Dictionary<string, int>();
		}
		if(!m_functionCallCounts.ContainsKey( "IEnumerator GetEnumerator()" )){
			m_functionCallCounts.Add( "IEnumerator GetEnumerator()", 0 );
		}
		m_functionCallCounts["IEnumerator GetEnumerator()"]++;
			
		throw new NotImplementedException("This function was automatically generated by Mockery and has no real implementation yet.");
	}

	public UnityEngine.AnimationClip GetClip( System.String name ){
		//Mock Data:
		if(m_functionCallCounts == null) {
			m_functionCallCounts = new Dictionary<string, int>();
		}
		if(!m_functionCallCounts.ContainsKey( "UnityEngine.AnimationClip GetClip(System.String)" )){
			m_functionCallCounts.Add( "UnityEngine.AnimationClip GetClip(System.String)", 0 );
		}
		m_functionCallCounts["UnityEngine.AnimationClip GetClip(System.String)"]++;
			
		throw new NotImplementedException("This function was automatically generated by Mockery and has no real implementation yet.");
	}

	public Animation( ){
		//Mock Data:
			m_functionCallCounts = new Dictionary<string, int>();
		if(!m_functionCallCounts.ContainsKey( "Void .ctor()" )){
			m_functionCallCounts.Add( "Void .ctor()", 0 );
		}
		m_functionCallCounts["Void .ctor()"]++;
			
	}

	public UnityEngine.WrapMode wrapMode {
		get {
			if(m_functionCallCounts == null) {
				m_functionCallCounts = new Dictionary<string, int>();
			}
			if(!m_functionCallCounts.ContainsKey( "get_wrapMode" )){
				m_functionCallCounts.Add( "get_wrapMode", 0 );
			}
			m_functionCallCounts["get_wrapMode"]++;
			
			throw new NotImplementedException("This function was automatically generated by Mockery and has no real implementation yet.");
		}
		set {
			if(m_functionCallCounts == null) {
				m_functionCallCounts = new Dictionary<string, int>();
			}
			if(!m_functionCallCounts.ContainsKey( "set_wrapMode" )){
				m_functionCallCounts.Add( "set_wrapMode", 0 );
			}
			m_functionCallCounts["set_wrapMode"]++;
			
		}
	}

    public UnityEngine.AnimationClip clip {
		get {
			if(m_functionCallCounts == null) {
				m_functionCallCounts = new Dictionary<string, int>();
			}
			if(!m_functionCallCounts.ContainsKey( "get_clip" )){
				m_functionCallCounts.Add( "get_clip", 0 );
			}
			m_functionCallCounts["get_clip"]++;
			
			throw new NotImplementedException("This function was automatically generated by Mockery and has no real implementation yet.");
		}
		set {
			if(m_functionCallCounts == null) {
				m_functionCallCounts = new Dictionary<string, int>();
			}
			if(!m_functionCallCounts.ContainsKey( "set_clip" )){
				m_functionCallCounts.Add( "set_clip", 0 );
			}
			m_functionCallCounts["set_clip"]++;
			
		}
	}

	public System.Boolean animatePhysics {
		get {
			if(m_functionCallCounts == null) {
				m_functionCallCounts = new Dictionary<string, int>();
			}
			if(!m_functionCallCounts.ContainsKey( "get_animatePhysics" )){
				m_functionCallCounts.Add( "get_animatePhysics", 0 );
			}
			m_functionCallCounts["get_animatePhysics"]++;
			
			throw new NotImplementedException("This function was automatically generated by Mockery and has no real implementation yet.");
		}
		set {
			if(m_functionCallCounts == null) {
				m_functionCallCounts = new Dictionary<string, int>();
			}
			if(!m_functionCallCounts.ContainsKey( "set_animatePhysics" )){
				m_functionCallCounts.Add( "set_animatePhysics", 0 );
			}
			m_functionCallCounts["set_animatePhysics"]++;
			
		}
	}

	public System.Boolean playAutomatically {
		get {
			if(m_functionCallCounts == null) {
				m_functionCallCounts = new Dictionary<string, int>();
			}
			if(!m_functionCallCounts.ContainsKey( "get_playAutomatically" )){
				m_functionCallCounts.Add( "get_playAutomatically", 0 );
			}
			m_functionCallCounts["get_playAutomatically"]++;
			
			throw new NotImplementedException("This function was automatically generated by Mockery and has no real implementation yet.");
		}
		set {
			if(m_functionCallCounts == null) {
				m_functionCallCounts = new Dictionary<string, int>();
			}
			if(!m_functionCallCounts.ContainsKey( "set_playAutomatically" )){
				m_functionCallCounts.Add( "set_playAutomatically", 0 );
			}
			m_functionCallCounts["set_playAutomatically"]++;
			
		}
	}

	public System.Boolean isPlaying {
		get {
			if(m_functionCallCounts == null) {
				m_functionCallCounts = new Dictionary<string, int>();
			}
			if(!m_functionCallCounts.ContainsKey( "get_isPlaying" )){
				m_functionCallCounts.Add( "get_isPlaying", 0 );
			}
			m_functionCallCounts["get_isPlaying"]++;
			
			throw new NotImplementedException("This function was automatically generated by Mockery and has no real implementation yet.");
		}
	}
}
}
