using System;
using System.Collections;
using System.Collections.Generic;
using System.Runtime.Serialization;


namespace UnityEngine {
public class Texture : UnityEngine.Object {
	// Mock data:
	private Dictionary<string, int> m_functionCallCounts;
	public Dictionary<string, int> FunctionCallCounts {
		get { 
			if(m_functionCallCounts == null) {
				m_functionCallCounts = new Dictionary<string, int>();
			}
			return m_functionCallCounts;
		}
	}

	public Texture( ){
		//Mock Data:
			m_functionCallCounts = new Dictionary<string, int>();
		if(!m_functionCallCounts.ContainsKey( "Void .ctor()" )){
			m_functionCallCounts.Add( "Void .ctor()", 0 );
		}
		m_functionCallCounts["Void .ctor()"]++;
			
	}

	public UnityEngine.TextureWrapMode wrapMode {
		get {
			if(m_functionCallCounts == null) {
				m_functionCallCounts = new Dictionary<string, int>();
			}
			if(!m_functionCallCounts.ContainsKey( "get_wrapMode" )){
				m_functionCallCounts.Add( "get_wrapMode", 0 );
			}
			m_functionCallCounts["get_wrapMode"]++;
			
			throw new NotImplementedException("This function was automatically generated by Mockery and has no real implementation yet.");
		}
		set {
			if(m_functionCallCounts == null) {
				m_functionCallCounts = new Dictionary<string, int>();
			}
			if(!m_functionCallCounts.ContainsKey( "set_wrapMode" )){
				m_functionCallCounts.Add( "set_wrapMode", 0 );
			}
			m_functionCallCounts["set_wrapMode"]++;
			
		}
	}

	public UnityEngine.FilterMode filterMode {
		get {
			if(m_functionCallCounts == null) {
				m_functionCallCounts = new Dictionary<string, int>();
			}
			if(!m_functionCallCounts.ContainsKey( "get_filterMode" )){
				m_functionCallCounts.Add( "get_filterMode", 0 );
			}
			m_functionCallCounts["get_filterMode"]++;
			
			throw new NotImplementedException("This function was automatically generated by Mockery and has no real implementation yet.");
		}
		set {
			if(m_functionCallCounts == null) {
				m_functionCallCounts = new Dictionary<string, int>();
			}
			if(!m_functionCallCounts.ContainsKey( "set_filterMode" )){
				m_functionCallCounts.Add( "set_filterMode", 0 );
			}
			m_functionCallCounts["set_filterMode"]++;
			
		}
	}

	public System.Int32 anisoLevel {
		get {
			if(m_functionCallCounts == null) {
				m_functionCallCounts = new Dictionary<string, int>();
			}
			if(!m_functionCallCounts.ContainsKey( "get_anisoLevel" )){
				m_functionCallCounts.Add( "get_anisoLevel", 0 );
			}
			m_functionCallCounts["get_anisoLevel"]++;
			
			throw new NotImplementedException("This function was automatically generated by Mockery and has no real implementation yet.");
		}
		set {
			if(m_functionCallCounts == null) {
				m_functionCallCounts = new Dictionary<string, int>();
			}
			if(!m_functionCallCounts.ContainsKey( "set_anisoLevel" )){
				m_functionCallCounts.Add( "set_anisoLevel", 0 );
			}
			m_functionCallCounts["set_anisoLevel"]++;
			
		}
	}

	public static UnityEngine.AnisotropicFiltering anisotropicFiltering {
		get {
			throw new NotImplementedException("This function was automatically generated by Mockery and has no real implementation yet.");
		}
		set {
		}
	}

	public static System.Int32 masterTextureLimit {
		get {
			throw new NotImplementedException("This function was automatically generated by Mockery and has no real implementation yet.");
		}
		set {
		}
	}

	public virtual System.Int32 height {
		get {
			if(m_functionCallCounts == null) {
				m_functionCallCounts = new Dictionary<string, int>();
			}
			if(!m_functionCallCounts.ContainsKey( "get_height" )){
				m_functionCallCounts.Add( "get_height", 0 );
			}
			m_functionCallCounts["get_height"]++;
			
			throw new NotImplementedException("This function was automatically generated by Mockery and has no real implementation yet.");
		}
		set {
			if(m_functionCallCounts == null) {
				m_functionCallCounts = new Dictionary<string, int>();
			}
			if(!m_functionCallCounts.ContainsKey( "set_height" )){
				m_functionCallCounts.Add( "set_height", 0 );
			}
			m_functionCallCounts["set_height"]++;
			
		}
	}

	public System.Single mipMapBias {
		get {
			if(m_functionCallCounts == null) {
				m_functionCallCounts = new Dictionary<string, int>();
			}
			if(!m_functionCallCounts.ContainsKey( "get_mipMapBias" )){
				m_functionCallCounts.Add( "get_mipMapBias", 0 );
			}
			m_functionCallCounts["get_mipMapBias"]++;
			
			throw new NotImplementedException("This function was automatically generated by Mockery and has no real implementation yet.");
		}
		set {
			if(m_functionCallCounts == null) {
				m_functionCallCounts = new Dictionary<string, int>();
			}
			if(!m_functionCallCounts.ContainsKey( "set_mipMapBias" )){
				m_functionCallCounts.Add( "set_mipMapBias", 0 );
			}
			m_functionCallCounts["set_mipMapBias"]++;
			
		}
	}

	public virtual System.Int32 width {
		get {
			if(m_functionCallCounts == null) {
				m_functionCallCounts = new Dictionary<string, int>();
			}
			if(!m_functionCallCounts.ContainsKey( "get_width" )){
				m_functionCallCounts.Add( "get_width", 0 );
			}
			m_functionCallCounts["get_width"]++;
			
			throw new NotImplementedException("This function was automatically generated by Mockery and has no real implementation yet.");
		}
		set {
			if(m_functionCallCounts == null) {
				m_functionCallCounts = new Dictionary<string, int>();
			}
			if(!m_functionCallCounts.ContainsKey( "set_width" )){
				m_functionCallCounts.Add( "set_width", 0 );
			}
			m_functionCallCounts["set_width"]++;
			
		}
	}
}
}
