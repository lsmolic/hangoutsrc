using System;
using System.Collections;
using System.Collections.Generic;
using System.Runtime.Serialization;


namespace UnityEngine {
public class LineRenderer : UnityEngine.Renderer {
	// Mock data:
	private Dictionary<string, int> m_functionCallCounts;
	public Dictionary<string, int> FunctionCallCounts {
		get { 
			if(m_functionCallCounts == null) {
				m_functionCallCounts = new Dictionary<string, int>();
			}
			return m_functionCallCounts;
		}
	}

	public void SetWidth( System.Single start, System.Single end ){
		//Mock Data:
		if(m_functionCallCounts == null) {
			m_functionCallCounts = new Dictionary<string, int>();
		}
		if(!m_functionCallCounts.ContainsKey( "Void SetWidth(Single, Single)" )){
			m_functionCallCounts.Add( "Void SetWidth(Single, Single)", 0 );
		}
		m_functionCallCounts["Void SetWidth(Single, Single)"]++;
			
	}

	public void SetColors( UnityEngine.Color start, UnityEngine.Color end ){
		//Mock Data:
		if(m_functionCallCounts == null) {
			m_functionCallCounts = new Dictionary<string, int>();
		}
		if(!m_functionCallCounts.ContainsKey( "Void SetColors(Color, Color)" )){
			m_functionCallCounts.Add( "Void SetColors(Color, Color)", 0 );
		}
		m_functionCallCounts["Void SetColors(Color, Color)"]++;
			
	}

	public void SetVertexCount( System.Int32 count ){
		//Mock Data:
		if(m_functionCallCounts == null) {
			m_functionCallCounts = new Dictionary<string, int>();
		}
		if(!m_functionCallCounts.ContainsKey( "Void SetVertexCount(Int32)" )){
			m_functionCallCounts.Add( "Void SetVertexCount(Int32)", 0 );
		}
		m_functionCallCounts["Void SetVertexCount(Int32)"]++;
			
	}

	public void SetPosition( System.Int32 index, UnityEngine.Vector3 position ){
		//Mock Data:
		if(m_functionCallCounts == null) {
			m_functionCallCounts = new Dictionary<string, int>();
		}
		if(!m_functionCallCounts.ContainsKey( "Void SetPosition(Int32, Vector3)" )){
			m_functionCallCounts.Add( "Void SetPosition(Int32, Vector3)", 0 );
		}
		m_functionCallCounts["Void SetPosition(Int32, Vector3)"]++;
			
	}

	public LineRenderer( ){
		//Mock Data:
			m_functionCallCounts = new Dictionary<string, int>();
		if(!m_functionCallCounts.ContainsKey( "Void .ctor()" )){
			m_functionCallCounts.Add( "Void .ctor()", 0 );
		}
		m_functionCallCounts["Void .ctor()"]++;
			
	}

	public System.Boolean useWorldSpace {
		get {
			if(m_functionCallCounts == null) {
				m_functionCallCounts = new Dictionary<string, int>();
			}
			if(!m_functionCallCounts.ContainsKey( "get_useWorldSpace" )){
				m_functionCallCounts.Add( "get_useWorldSpace", 0 );
			}
			m_functionCallCounts["get_useWorldSpace"]++;
			
			throw new NotImplementedException("This function was automatically generated by Mockery and has no real implementation yet.");
		}
		set {
			if(m_functionCallCounts == null) {
				m_functionCallCounts = new Dictionary<string, int>();
			}
			if(!m_functionCallCounts.ContainsKey( "set_useWorldSpace" )){
				m_functionCallCounts.Add( "set_useWorldSpace", 0 );
			}
			m_functionCallCounts["set_useWorldSpace"]++;
			
		}
	}
}
}
