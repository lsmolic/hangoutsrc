using System;
using System.Collections;
using System.Collections.Generic;
using System.Runtime.Serialization;


namespace UnityEngine {
public class WheelCollider : UnityEngine.Collider {
	// Mock data:
	private Dictionary<string, int> m_functionCallCounts;
	public Dictionary<string, int> FunctionCallCounts {
		get { 
			if(m_functionCallCounts == null) {
				m_functionCallCounts = new Dictionary<string, int>();
			}
			return m_functionCallCounts;
		}
	}

	public System.Boolean GetGroundHit( out UnityEngine.WheelHit hit ){
		//Mock Data:
		if(m_functionCallCounts == null) {
			m_functionCallCounts = new Dictionary<string, int>();
		}
		if(!m_functionCallCounts.ContainsKey( "Boolean GetGroundHit(WheelHit ByRef)" )){
			m_functionCallCounts.Add( "Boolean GetGroundHit(WheelHit ByRef)", 0 );
		}
		m_functionCallCounts["Boolean GetGroundHit(WheelHit ByRef)"]++;
			
		hit = default(UnityEngine.WheelHit);
		throw new NotImplementedException("This function was automatically generated by Mockery and has no real implementation yet.");
	}

	public WheelCollider( ){
		//Mock Data:
			m_functionCallCounts = new Dictionary<string, int>();
		if(!m_functionCallCounts.ContainsKey( "Void .ctor()" )){
			m_functionCallCounts.Add( "Void .ctor()", 0 );
		}
		m_functionCallCounts["Void .ctor()"]++;
			
	}

	public System.Single radius {
		get {
			if(m_functionCallCounts == null) {
				m_functionCallCounts = new Dictionary<string, int>();
			}
			if(!m_functionCallCounts.ContainsKey( "get_radius" )){
				m_functionCallCounts.Add( "get_radius", 0 );
			}
			m_functionCallCounts["get_radius"]++;
			
			throw new NotImplementedException("This function was automatically generated by Mockery and has no real implementation yet.");
		}
		set {
			if(m_functionCallCounts == null) {
				m_functionCallCounts = new Dictionary<string, int>();
			}
			if(!m_functionCallCounts.ContainsKey( "set_radius" )){
				m_functionCallCounts.Add( "set_radius", 0 );
			}
			m_functionCallCounts["set_radius"]++;
			
		}
	}

	public System.Single brakeTorque {
		get {
			if(m_functionCallCounts == null) {
				m_functionCallCounts = new Dictionary<string, int>();
			}
			if(!m_functionCallCounts.ContainsKey( "get_brakeTorque" )){
				m_functionCallCounts.Add( "get_brakeTorque", 0 );
			}
			m_functionCallCounts["get_brakeTorque"]++;
			
			throw new NotImplementedException("This function was automatically generated by Mockery and has no real implementation yet.");
		}
		set {
			if(m_functionCallCounts == null) {
				m_functionCallCounts = new Dictionary<string, int>();
			}
			if(!m_functionCallCounts.ContainsKey( "set_brakeTorque" )){
				m_functionCallCounts.Add( "set_brakeTorque", 0 );
			}
			m_functionCallCounts["set_brakeTorque"]++;
			
		}
	}

	public System.Single steerAngle {
		get {
			if(m_functionCallCounts == null) {
				m_functionCallCounts = new Dictionary<string, int>();
			}
			if(!m_functionCallCounts.ContainsKey( "get_steerAngle" )){
				m_functionCallCounts.Add( "get_steerAngle", 0 );
			}
			m_functionCallCounts["get_steerAngle"]++;
			
			throw new NotImplementedException("This function was automatically generated by Mockery and has no real implementation yet.");
		}
		set {
			if(m_functionCallCounts == null) {
				m_functionCallCounts = new Dictionary<string, int>();
			}
			if(!m_functionCallCounts.ContainsKey( "set_steerAngle" )){
				m_functionCallCounts.Add( "set_steerAngle", 0 );
			}
			m_functionCallCounts["set_steerAngle"]++;
			
		}
	}

	public UnityEngine.JointSpring suspensionSpring {
		get {
			if(m_functionCallCounts == null) {
				m_functionCallCounts = new Dictionary<string, int>();
			}
			if(!m_functionCallCounts.ContainsKey( "get_suspensionSpring" )){
				m_functionCallCounts.Add( "get_suspensionSpring", 0 );
			}
			m_functionCallCounts["get_suspensionSpring"]++;
			
			throw new NotImplementedException("This function was automatically generated by Mockery and has no real implementation yet.");
		}
		set {
			if(m_functionCallCounts == null) {
				m_functionCallCounts = new Dictionary<string, int>();
			}
			if(!m_functionCallCounts.ContainsKey( "set_suspensionSpring" )){
				m_functionCallCounts.Add( "set_suspensionSpring", 0 );
			}
			m_functionCallCounts["set_suspensionSpring"]++;
			
		}
	}

	public System.Boolean isGrounded {
		get {
			if(m_functionCallCounts == null) {
				m_functionCallCounts = new Dictionary<string, int>();
			}
			if(!m_functionCallCounts.ContainsKey( "get_isGrounded" )){
				m_functionCallCounts.Add( "get_isGrounded", 0 );
			}
			m_functionCallCounts["get_isGrounded"]++;
			
			throw new NotImplementedException("This function was automatically generated by Mockery and has no real implementation yet.");
		}
	}

	public UnityEngine.Vector3 center {
		get {
			if(m_functionCallCounts == null) {
				m_functionCallCounts = new Dictionary<string, int>();
			}
			if(!m_functionCallCounts.ContainsKey( "get_center" )){
				m_functionCallCounts.Add( "get_center", 0 );
			}
			m_functionCallCounts["get_center"]++;
			
			throw new NotImplementedException("This function was automatically generated by Mockery and has no real implementation yet.");
		}
		set {
			if(m_functionCallCounts == null) {
				m_functionCallCounts = new Dictionary<string, int>();
			}
			if(!m_functionCallCounts.ContainsKey( "set_center" )){
				m_functionCallCounts.Add( "set_center", 0 );
			}
			m_functionCallCounts["set_center"]++;
			
		}
	}

	public UnityEngine.WheelFrictionCurve sidewaysFriction {
		get {
			if(m_functionCallCounts == null) {
				m_functionCallCounts = new Dictionary<string, int>();
			}
			if(!m_functionCallCounts.ContainsKey( "get_sidewaysFriction" )){
				m_functionCallCounts.Add( "get_sidewaysFriction", 0 );
			}
			m_functionCallCounts["get_sidewaysFriction"]++;
			
			throw new NotImplementedException("This function was automatically generated by Mockery and has no real implementation yet.");
		}
		set {
			if(m_functionCallCounts == null) {
				m_functionCallCounts = new Dictionary<string, int>();
			}
			if(!m_functionCallCounts.ContainsKey( "set_sidewaysFriction" )){
				m_functionCallCounts.Add( "set_sidewaysFriction", 0 );
			}
			m_functionCallCounts["set_sidewaysFriction"]++;
			
		}
	}

	public System.Single mass {
		get {
			if(m_functionCallCounts == null) {
				m_functionCallCounts = new Dictionary<string, int>();
			}
			if(!m_functionCallCounts.ContainsKey( "get_mass" )){
				m_functionCallCounts.Add( "get_mass", 0 );
			}
			m_functionCallCounts["get_mass"]++;
			
			throw new NotImplementedException("This function was automatically generated by Mockery and has no real implementation yet.");
		}
		set {
			if(m_functionCallCounts == null) {
				m_functionCallCounts = new Dictionary<string, int>();
			}
			if(!m_functionCallCounts.ContainsKey( "set_mass" )){
				m_functionCallCounts.Add( "set_mass", 0 );
			}
			m_functionCallCounts["set_mass"]++;
			
		}
	}

	public System.Single motorTorque {
		get {
			if(m_functionCallCounts == null) {
				m_functionCallCounts = new Dictionary<string, int>();
			}
			if(!m_functionCallCounts.ContainsKey( "get_motorTorque" )){
				m_functionCallCounts.Add( "get_motorTorque", 0 );
			}
			m_functionCallCounts["get_motorTorque"]++;
			
			throw new NotImplementedException("This function was automatically generated by Mockery and has no real implementation yet.");
		}
		set {
			if(m_functionCallCounts == null) {
				m_functionCallCounts = new Dictionary<string, int>();
			}
			if(!m_functionCallCounts.ContainsKey( "set_motorTorque" )){
				m_functionCallCounts.Add( "set_motorTorque", 0 );
			}
			m_functionCallCounts["set_motorTorque"]++;
			
		}
	}

	public System.Single suspensionDistance {
		get {
			if(m_functionCallCounts == null) {
				m_functionCallCounts = new Dictionary<string, int>();
			}
			if(!m_functionCallCounts.ContainsKey( "get_suspensionDistance" )){
				m_functionCallCounts.Add( "get_suspensionDistance", 0 );
			}
			m_functionCallCounts["get_suspensionDistance"]++;
			
			throw new NotImplementedException("This function was automatically generated by Mockery and has no real implementation yet.");
		}
		set {
			if(m_functionCallCounts == null) {
				m_functionCallCounts = new Dictionary<string, int>();
			}
			if(!m_functionCallCounts.ContainsKey( "set_suspensionDistance" )){
				m_functionCallCounts.Add( "set_suspensionDistance", 0 );
			}
			m_functionCallCounts["set_suspensionDistance"]++;
			
		}
	}

	public System.Single rpm {
		get {
			if(m_functionCallCounts == null) {
				m_functionCallCounts = new Dictionary<string, int>();
			}
			if(!m_functionCallCounts.ContainsKey( "get_rpm" )){
				m_functionCallCounts.Add( "get_rpm", 0 );
			}
			m_functionCallCounts["get_rpm"]++;
			
			throw new NotImplementedException("This function was automatically generated by Mockery and has no real implementation yet.");
		}
	}

	public UnityEngine.WheelFrictionCurve forwardFriction {
		get {
			if(m_functionCallCounts == null) {
				m_functionCallCounts = new Dictionary<string, int>();
			}
			if(!m_functionCallCounts.ContainsKey( "get_forwardFriction" )){
				m_functionCallCounts.Add( "get_forwardFriction", 0 );
			}
			m_functionCallCounts["get_forwardFriction"]++;
			
			throw new NotImplementedException("This function was automatically generated by Mockery and has no real implementation yet.");
		}
		set {
			if(m_functionCallCounts == null) {
				m_functionCallCounts = new Dictionary<string, int>();
			}
			if(!m_functionCallCounts.ContainsKey( "set_forwardFriction" )){
				m_functionCallCounts.Add( "set_forwardFriction", 0 );
			}
			m_functionCallCounts["set_forwardFriction"]++;
			
		}
	}
}
}
