using System;
using System.Collections;
using System.Collections.Generic;
using System.Runtime.Serialization;


namespace UnityEngine {
public class Material : UnityEngine.Object {
	// Mock data:
	private Dictionary<string, int> m_functionCallCounts;
	public Dictionary<string, int> FunctionCallCounts {
		get { 
			if(m_functionCallCounts == null) {
				m_functionCallCounts = new Dictionary<string, int>();
			}
			return m_functionCallCounts;
		}
	}

	public void SetColor( System.String propertyName, UnityEngine.Color color ){
		//Mock Data:
		if(m_functionCallCounts == null) {
			m_functionCallCounts = new Dictionary<string, int>();
		}
		if(!m_functionCallCounts.ContainsKey( "Void SetColor(System.String, Color)" )){
			m_functionCallCounts.Add( "Void SetColor(System.String, Color)", 0 );
		}
		m_functionCallCounts["Void SetColor(System.String, Color)"]++;
			
	}

	public UnityEngine.Color GetColor( System.String propertyName ){
		//Mock Data:
		if(m_functionCallCounts == null) {
			m_functionCallCounts = new Dictionary<string, int>();
		}
		if(!m_functionCallCounts.ContainsKey( "Color GetColor(System.String)" )){
			m_functionCallCounts.Add( "Color GetColor(System.String)", 0 );
		}
		m_functionCallCounts["Color GetColor(System.String)"]++;
			
		throw new NotImplementedException("This function was automatically generated by Mockery and has no real implementation yet.");
	}

	public void SetVector( System.String propertyName, UnityEngine.Vector4 vector ){
		//Mock Data:
		if(m_functionCallCounts == null) {
			m_functionCallCounts = new Dictionary<string, int>();
		}
		if(!m_functionCallCounts.ContainsKey( "Void SetVector(System.String, Vector4)" )){
			m_functionCallCounts.Add( "Void SetVector(System.String, Vector4)", 0 );
		}
		m_functionCallCounts["Void SetVector(System.String, Vector4)"]++;
			
	}

	public UnityEngine.Vector4 GetVector( System.String propertyName ){
		//Mock Data:
		if(m_functionCallCounts == null) {
			m_functionCallCounts = new Dictionary<string, int>();
		}
		if(!m_functionCallCounts.ContainsKey( "Vector4 GetVector(System.String)" )){
			m_functionCallCounts.Add( "Vector4 GetVector(System.String)", 0 );
		}
		m_functionCallCounts["Vector4 GetVector(System.String)"]++;
			
		throw new NotImplementedException("This function was automatically generated by Mockery and has no real implementation yet.");
	}

	public void SetTexture( System.String propertyName, UnityEngine.Texture texture ){
		//Mock Data:
		if(m_functionCallCounts == null) {
			m_functionCallCounts = new Dictionary<string, int>();
		}
		if(!m_functionCallCounts.ContainsKey( "Void SetTexture(System.String, UnityEngine.Texture)" )){
			m_functionCallCounts.Add( "Void SetTexture(System.String, UnityEngine.Texture)", 0 );
		}
		m_functionCallCounts["Void SetTexture(System.String, UnityEngine.Texture)"]++;
			
	}

	public UnityEngine.Texture GetTexture( System.String propertyName ){
		//Mock Data:
		if(m_functionCallCounts == null) {
			m_functionCallCounts = new Dictionary<string, int>();
		}
		if(!m_functionCallCounts.ContainsKey( "UnityEngine.Texture GetTexture(System.String)" )){
			m_functionCallCounts.Add( "UnityEngine.Texture GetTexture(System.String)", 0 );
		}
		m_functionCallCounts["UnityEngine.Texture GetTexture(System.String)"]++;
			
		throw new NotImplementedException("This function was automatically generated by Mockery and has no real implementation yet.");
	}

	public void SetTextureOffset( System.String propertyName, UnityEngine.Vector2 offset ){
		//Mock Data:
		if(m_functionCallCounts == null) {
			m_functionCallCounts = new Dictionary<string, int>();
		}
		if(!m_functionCallCounts.ContainsKey( "Void SetTextureOffset(System.String, Vector2)" )){
			m_functionCallCounts.Add( "Void SetTextureOffset(System.String, Vector2)", 0 );
		}
		m_functionCallCounts["Void SetTextureOffset(System.String, Vector2)"]++;
			
	}

	public UnityEngine.Vector2 GetTextureOffset( System.String propertyName ){
		//Mock Data:
		if(m_functionCallCounts == null) {
			m_functionCallCounts = new Dictionary<string, int>();
		}
		if(!m_functionCallCounts.ContainsKey( "Vector2 GetTextureOffset(System.String)" )){
			m_functionCallCounts.Add( "Vector2 GetTextureOffset(System.String)", 0 );
		}
		m_functionCallCounts["Vector2 GetTextureOffset(System.String)"]++;
			
		throw new NotImplementedException("This function was automatically generated by Mockery and has no real implementation yet.");
	}

	public void SetTextureScale( System.String propertyName, UnityEngine.Vector2 scale ){
		//Mock Data:
		if(m_functionCallCounts == null) {
			m_functionCallCounts = new Dictionary<string, int>();
		}
		if(!m_functionCallCounts.ContainsKey( "Void SetTextureScale(System.String, Vector2)" )){
			m_functionCallCounts.Add( "Void SetTextureScale(System.String, Vector2)", 0 );
		}
		m_functionCallCounts["Void SetTextureScale(System.String, Vector2)"]++;
			
	}

	public UnityEngine.Vector2 GetTextureScale( System.String propertyName ){
		//Mock Data:
		if(m_functionCallCounts == null) {
			m_functionCallCounts = new Dictionary<string, int>();
		}
		if(!m_functionCallCounts.ContainsKey( "Vector2 GetTextureScale(System.String)" )){
			m_functionCallCounts.Add( "Vector2 GetTextureScale(System.String)", 0 );
		}
		m_functionCallCounts["Vector2 GetTextureScale(System.String)"]++;
			
		throw new NotImplementedException("This function was automatically generated by Mockery and has no real implementation yet.");
	}

	public void SetMatrix( System.String propertyName, UnityEngine.Matrix4x4 matrix ){
		//Mock Data:
		if(m_functionCallCounts == null) {
			m_functionCallCounts = new Dictionary<string, int>();
		}
		if(!m_functionCallCounts.ContainsKey( "Void SetMatrix(System.String, Matrix4x4)" )){
			m_functionCallCounts.Add( "Void SetMatrix(System.String, Matrix4x4)", 0 );
		}
		m_functionCallCounts["Void SetMatrix(System.String, Matrix4x4)"]++;
			
	}

	public UnityEngine.Matrix4x4 GetMatrix( System.String propertyName ){
		//Mock Data:
		if(m_functionCallCounts == null) {
			m_functionCallCounts = new Dictionary<string, int>();
		}
		if(!m_functionCallCounts.ContainsKey( "Matrix4x4 GetMatrix(System.String)" )){
			m_functionCallCounts.Add( "Matrix4x4 GetMatrix(System.String)", 0 );
		}
		m_functionCallCounts["Matrix4x4 GetMatrix(System.String)"]++;
			
		throw new NotImplementedException("This function was automatically generated by Mockery and has no real implementation yet.");
	}

	public void SetFloat( System.String propertyName, System.Single value ){
		//Mock Data:
		if(m_functionCallCounts == null) {
			m_functionCallCounts = new Dictionary<string, int>();
		}
		if(!m_functionCallCounts.ContainsKey( "Void SetFloat(System.String, Single)" )){
			m_functionCallCounts.Add( "Void SetFloat(System.String, Single)", 0 );
		}
		m_functionCallCounts["Void SetFloat(System.String, Single)"]++;
			
	}

	public System.Single GetFloat( System.String propertyName ){
		//Mock Data:
		if(m_functionCallCounts == null) {
			m_functionCallCounts = new Dictionary<string, int>();
		}
		if(!m_functionCallCounts.ContainsKey( "Single GetFloat(System.String)" )){
			m_functionCallCounts.Add( "Single GetFloat(System.String)", 0 );
		}
		m_functionCallCounts["Single GetFloat(System.String)"]++;
			
		throw new NotImplementedException("This function was automatically generated by Mockery and has no real implementation yet.");
	}

	public System.Boolean HasProperty( System.String propertyName ){
		//Mock Data:
		if(m_functionCallCounts == null) {
			m_functionCallCounts = new Dictionary<string, int>();
		}
		if(!m_functionCallCounts.ContainsKey( "Boolean HasProperty(System.String)" )){
			m_functionCallCounts.Add( "Boolean HasProperty(System.String)", 0 );
		}
		m_functionCallCounts["Boolean HasProperty(System.String)"]++;
			
		throw new NotImplementedException("This function was automatically generated by Mockery and has no real implementation yet.");
	}

	public System.String GetTag( System.String tag, System.Boolean searchFallbacks, System.String defaultValue ){
		//Mock Data:
		if(m_functionCallCounts == null) {
			m_functionCallCounts = new Dictionary<string, int>();
		}
		if(!m_functionCallCounts.ContainsKey( "System.String GetTag(System.String, Boolean, System.String)" )){
			m_functionCallCounts.Add( "System.String GetTag(System.String, Boolean, System.String)", 0 );
		}
		m_functionCallCounts["System.String GetTag(System.String, Boolean, System.String)"]++;
			
		throw new NotImplementedException("This function was automatically generated by Mockery and has no real implementation yet.");
	}

	public System.String GetTag( System.String tag, System.Boolean searchFallbacks ){
		//Mock Data:
		if(m_functionCallCounts == null) {
			m_functionCallCounts = new Dictionary<string, int>();
		}
		if(!m_functionCallCounts.ContainsKey( "System.String GetTag(System.String, Boolean)" )){
			m_functionCallCounts.Add( "System.String GetTag(System.String, Boolean)", 0 );
		}
		m_functionCallCounts["System.String GetTag(System.String, Boolean)"]++;
			
		throw new NotImplementedException("This function was automatically generated by Mockery and has no real implementation yet.");
	}

	public void Lerp( UnityEngine.Material start, UnityEngine.Material end, System.Single t ){
		//Mock Data:
		if(m_functionCallCounts == null) {
			m_functionCallCounts = new Dictionary<string, int>();
		}
		if(!m_functionCallCounts.ContainsKey( "Void Lerp(UnityEngine.Material, UnityEngine.Material, Single)" )){
			m_functionCallCounts.Add( "Void Lerp(UnityEngine.Material, UnityEngine.Material, Single)", 0 );
		}
		m_functionCallCounts["Void Lerp(UnityEngine.Material, UnityEngine.Material, Single)"]++;
			
	}

	public System.Boolean SetPass( System.Int32 pass ){
		//Mock Data:
		if(m_functionCallCounts == null) {
			m_functionCallCounts = new Dictionary<string, int>();
		}
		if(!m_functionCallCounts.ContainsKey( "Boolean SetPass(Int32)" )){
			m_functionCallCounts.Add( "Boolean SetPass(Int32)", 0 );
		}
		m_functionCallCounts["Boolean SetPass(Int32)"]++;
			
		throw new NotImplementedException("This function was automatically generated by Mockery and has no real implementation yet.");
	}

	public static UnityEngine.Material Create( System.String scriptContents ){
		throw new NotImplementedException("This function was automatically generated by Mockery and has no real implementation yet.");
	}

	public void CopyPropertiesFromMaterial( UnityEngine.Material mat ){
		//Mock Data:
		if(m_functionCallCounts == null) {
			m_functionCallCounts = new Dictionary<string, int>();
		}
		if(!m_functionCallCounts.ContainsKey( "Void CopyPropertiesFromMaterial(UnityEngine.Material)" )){
			m_functionCallCounts.Add( "Void CopyPropertiesFromMaterial(UnityEngine.Material)", 0 );
		}
		m_functionCallCounts["Void CopyPropertiesFromMaterial(UnityEngine.Material)"]++;
			
	}

	public Material( System.String contents ){
		//Mock Data:
			m_functionCallCounts = new Dictionary<string, int>();
		if(!m_functionCallCounts.ContainsKey( "Void .ctor(String)" )){
			m_functionCallCounts.Add( "Void .ctor(String)", 0 );
		}
		m_functionCallCounts["Void .ctor(String)"]++;
			
	}

	public Material( UnityEngine.Shader shader ){
		//Mock Data:
			m_functionCallCounts = new Dictionary<string, int>();
		if(!m_functionCallCounts.ContainsKey( "Void .ctor(Shader)" )){
			m_functionCallCounts.Add( "Void .ctor(Shader)", 0 );
		}
		m_functionCallCounts["Void .ctor(Shader)"]++;
			
	}

	public Material( UnityEngine.Material source ){
		//Mock Data:
			m_functionCallCounts = new Dictionary<string, int>();
		if(!m_functionCallCounts.ContainsKey( "Void .ctor(Material)" )){
			m_functionCallCounts.Add( "Void .ctor(Material)", 0 );
		}
		m_functionCallCounts["Void .ctor(Material)"]++;
			
	}

	public System.String TexturePropertyNames {
		get {
			if(m_functionCallCounts == null) {
				m_functionCallCounts = new Dictionary<string, int>();
			}
			if(!m_functionCallCounts.ContainsKey( "get_TexturePropertyNames" )){
				m_functionCallCounts.Add( "get_TexturePropertyNames", 0 );
			}
			m_functionCallCounts["get_TexturePropertyNames"]++;
			
			throw new NotImplementedException("This function was automatically generated by Mockery and has no real implementation yet.");
		}
	}

	public System.String MatrixPropertyNames {
		get {
			if(m_functionCallCounts == null) {
				m_functionCallCounts = new Dictionary<string, int>();
			}
			if(!m_functionCallCounts.ContainsKey( "get_MatrixPropertyNames" )){
				m_functionCallCounts.Add( "get_MatrixPropertyNames", 0 );
			}
			m_functionCallCounts["get_MatrixPropertyNames"]++;
			
			throw new NotImplementedException("This function was automatically generated by Mockery and has no real implementation yet.");
		}
	}

	public UnityEngine.Shader shader {
		get {
			if(m_functionCallCounts == null) {
				m_functionCallCounts = new Dictionary<string, int>();
			}
			if(!m_functionCallCounts.ContainsKey( "get_shader" )){
				m_functionCallCounts.Add( "get_shader", 0 );
			}
			m_functionCallCounts["get_shader"]++;
			
			throw new NotImplementedException("This function was automatically generated by Mockery and has no real implementation yet.");
		}
		set {
			if(m_functionCallCounts == null) {
				m_functionCallCounts = new Dictionary<string, int>();
			}
			if(!m_functionCallCounts.ContainsKey( "set_shader" )){
				m_functionCallCounts.Add( "set_shader", 0 );
			}
			m_functionCallCounts["set_shader"]++;
			
		}
	}

	public UnityEngine.Vector2 mainTextureOffset {
		get {
			if(m_functionCallCounts == null) {
				m_functionCallCounts = new Dictionary<string, int>();
			}
			if(!m_functionCallCounts.ContainsKey( "get_mainTextureOffset" )){
				m_functionCallCounts.Add( "get_mainTextureOffset", 0 );
			}
			m_functionCallCounts["get_mainTextureOffset"]++;
			
			throw new NotImplementedException("This function was automatically generated by Mockery and has no real implementation yet.");
		}
		set {
			if(m_functionCallCounts == null) {
				m_functionCallCounts = new Dictionary<string, int>();
			}
			if(!m_functionCallCounts.ContainsKey( "set_mainTextureOffset" )){
				m_functionCallCounts.Add( "set_mainTextureOffset", 0 );
			}
			m_functionCallCounts["set_mainTextureOffset"]++;
			
		}
	}

	public UnityEngine.Texture mainTexture {
		get {
			if(m_functionCallCounts == null) {
				m_functionCallCounts = new Dictionary<string, int>();
			}
			if(!m_functionCallCounts.ContainsKey( "get_mainTexture" )){
				m_functionCallCounts.Add( "get_mainTexture", 0 );
			}
			m_functionCallCounts["get_mainTexture"]++;
			
			throw new NotImplementedException("This function was automatically generated by Mockery and has no real implementation yet.");
		}
		set {
			if(m_functionCallCounts == null) {
				m_functionCallCounts = new Dictionary<string, int>();
			}
			if(!m_functionCallCounts.ContainsKey( "set_mainTexture" )){
				m_functionCallCounts.Add( "set_mainTexture", 0 );
			}
			m_functionCallCounts["set_mainTexture"]++;
			
		}
	}

	public UnityEngine.Vector2 mainTextureScale {
		get {
			if(m_functionCallCounts == null) {
				m_functionCallCounts = new Dictionary<string, int>();
			}
			if(!m_functionCallCounts.ContainsKey( "get_mainTextureScale" )){
				m_functionCallCounts.Add( "get_mainTextureScale", 0 );
			}
			m_functionCallCounts["get_mainTextureScale"]++;
			
			throw new NotImplementedException("This function was automatically generated by Mockery and has no real implementation yet.");
		}
		set {
			if(m_functionCallCounts == null) {
				m_functionCallCounts = new Dictionary<string, int>();
			}
			if(!m_functionCallCounts.ContainsKey( "set_mainTextureScale" )){
				m_functionCallCounts.Add( "set_mainTextureScale", 0 );
			}
			m_functionCallCounts["set_mainTextureScale"]++;
			
		}
	}

	public System.Int32 passCount {
		get {
			if(m_functionCallCounts == null) {
				m_functionCallCounts = new Dictionary<string, int>();
			}
			if(!m_functionCallCounts.ContainsKey( "get_passCount" )){
				m_functionCallCounts.Add( "get_passCount", 0 );
			}
			m_functionCallCounts["get_passCount"]++;
			
			throw new NotImplementedException("This function was automatically generated by Mockery and has no real implementation yet.");
		}
	}

	public System.String ColorPropertyNames {
		get {
			if(m_functionCallCounts == null) {
				m_functionCallCounts = new Dictionary<string, int>();
			}
			if(!m_functionCallCounts.ContainsKey( "get_ColorPropertyNames" )){
				m_functionCallCounts.Add( "get_ColorPropertyNames", 0 );
			}
			m_functionCallCounts["get_ColorPropertyNames"]++;
			
			throw new NotImplementedException("This function was automatically generated by Mockery and has no real implementation yet.");
		}
	}

	public UnityEngine.Color color {
		get {
			if(m_functionCallCounts == null) {
				m_functionCallCounts = new Dictionary<string, int>();
			}
			if(!m_functionCallCounts.ContainsKey( "get_color" )){
				m_functionCallCounts.Add( "get_color", 0 );
			}
			m_functionCallCounts["get_color"]++;
			
			throw new NotImplementedException("This function was automatically generated by Mockery and has no real implementation yet.");
		}
		set {
			if(m_functionCallCounts == null) {
				m_functionCallCounts = new Dictionary<string, int>();
			}
			if(!m_functionCallCounts.ContainsKey( "set_color" )){
				m_functionCallCounts.Add( "set_color", 0 );
			}
			m_functionCallCounts["set_color"]++;
			
		}
	}

	public System.String FloatPropertyNames {
		get {
			if(m_functionCallCounts == null) {
				m_functionCallCounts = new Dictionary<string, int>();
			}
			if(!m_functionCallCounts.ContainsKey( "get_FloatPropertyNames" )){
				m_functionCallCounts.Add( "get_FloatPropertyNames", 0 );
			}
			m_functionCallCounts["get_FloatPropertyNames"]++;
			
			throw new NotImplementedException("This function was automatically generated by Mockery and has no real implementation yet.");
		}
	}

	public System.Int32 renderQueue {
		get {
			if(m_functionCallCounts == null) {
				m_functionCallCounts = new Dictionary<string, int>();
			}
			if(!m_functionCallCounts.ContainsKey( "get_renderQueue" )){
				m_functionCallCounts.Add( "get_renderQueue", 0 );
			}
			m_functionCallCounts["get_renderQueue"]++;
			
			throw new NotImplementedException("This function was automatically generated by Mockery and has no real implementation yet.");
		}
		set {
			if(m_functionCallCounts == null) {
				m_functionCallCounts = new Dictionary<string, int>();
			}
			if(!m_functionCallCounts.ContainsKey( "set_renderQueue" )){
				m_functionCallCounts.Add( "set_renderQueue", 0 );
			}
			m_functionCallCounts["set_renderQueue"]++;
			
		}
	}
}
}
