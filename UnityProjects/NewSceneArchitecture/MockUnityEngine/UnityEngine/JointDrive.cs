using System;
using System.Collections;
using System.Collections.Generic;
using System.Runtime.Serialization;


namespace UnityEngine {
public struct JointDrive {
	// Mock data:
	private Dictionary<string, int> m_functionCallCounts;
	public Dictionary<string, int> FunctionCallCounts {
		get { 
			if(m_functionCallCounts == null) {
				m_functionCallCounts = new Dictionary<string, int>();
			}
			return m_functionCallCounts;
		}
	}

	public System.Single positionDamper {
		get {
			if(m_functionCallCounts == null) {
				m_functionCallCounts = new Dictionary<string, int>();
			}
			if(!m_functionCallCounts.ContainsKey( "get_positionDamper" )){
				m_functionCallCounts.Add( "get_positionDamper", 0 );
			}
			m_functionCallCounts["get_positionDamper"]++;
			
			throw new NotImplementedException("This function was automatically generated by Mockery and has no real implementation yet.");
		}
		set {
			if(m_functionCallCounts == null) {
				m_functionCallCounts = new Dictionary<string, int>();
			}
			if(!m_functionCallCounts.ContainsKey( "set_positionDamper" )){
				m_functionCallCounts.Add( "set_positionDamper", 0 );
			}
			m_functionCallCounts["set_positionDamper"]++;
			
		}
	}

	public System.Single maximumForce {
		get {
			if(m_functionCallCounts == null) {
				m_functionCallCounts = new Dictionary<string, int>();
			}
			if(!m_functionCallCounts.ContainsKey( "get_maximumForce" )){
				m_functionCallCounts.Add( "get_maximumForce", 0 );
			}
			m_functionCallCounts["get_maximumForce"]++;
			
			throw new NotImplementedException("This function was automatically generated by Mockery and has no real implementation yet.");
		}
		set {
			if(m_functionCallCounts == null) {
				m_functionCallCounts = new Dictionary<string, int>();
			}
			if(!m_functionCallCounts.ContainsKey( "set_maximumForce" )){
				m_functionCallCounts.Add( "set_maximumForce", 0 );
			}
			m_functionCallCounts["set_maximumForce"]++;
			
		}
	}

	public UnityEngine.JointDriveMode mode {
		get {
			if(m_functionCallCounts == null) {
				m_functionCallCounts = new Dictionary<string, int>();
			}
			if(!m_functionCallCounts.ContainsKey( "get_mode" )){
				m_functionCallCounts.Add( "get_mode", 0 );
			}
			m_functionCallCounts["get_mode"]++;
			
			throw new NotImplementedException("This function was automatically generated by Mockery and has no real implementation yet.");
		}
		set {
			if(m_functionCallCounts == null) {
				m_functionCallCounts = new Dictionary<string, int>();
			}
			if(!m_functionCallCounts.ContainsKey( "set_mode" )){
				m_functionCallCounts.Add( "set_mode", 0 );
			}
			m_functionCallCounts["set_mode"]++;
			
		}
	}

	public System.Single positionSpring {
		get {
			if(m_functionCallCounts == null) {
				m_functionCallCounts = new Dictionary<string, int>();
			}
			if(!m_functionCallCounts.ContainsKey( "get_positionSpring" )){
				m_functionCallCounts.Add( "get_positionSpring", 0 );
			}
			m_functionCallCounts["get_positionSpring"]++;
			
			throw new NotImplementedException("This function was automatically generated by Mockery and has no real implementation yet.");
		}
		set {
			if(m_functionCallCounts == null) {
				m_functionCallCounts = new Dictionary<string, int>();
			}
			if(!m_functionCallCounts.ContainsKey( "set_positionSpring" )){
				m_functionCallCounts.Add( "set_positionSpring", 0 );
			}
			m_functionCallCounts["set_positionSpring"]++;
			
		}
	}
}
}
