using System;
using System.Collections;
using System.Collections.Generic;
using System.Runtime.Serialization;


namespace UnityEngine {
public class ConfigurableJoint : UnityEngine.Joint {
	// Mock data:
	private Dictionary<string, int> m_functionCallCounts;
	public Dictionary<string, int> FunctionCallCounts {
		get { 
			if(m_functionCallCounts == null) {
				m_functionCallCounts = new Dictionary<string, int>();
			}
			return m_functionCallCounts;
		}
	}

	public ConfigurableJoint( ){
		//Mock Data:
			m_functionCallCounts = new Dictionary<string, int>();
		if(!m_functionCallCounts.ContainsKey( "Void .ctor()" )){
			m_functionCallCounts.Add( "Void .ctor()", 0 );
		}
		m_functionCallCounts["Void .ctor()"]++;
			
	}

	public System.Single projectionDistance {
		get {
			if(m_functionCallCounts == null) {
				m_functionCallCounts = new Dictionary<string, int>();
			}
			if(!m_functionCallCounts.ContainsKey( "get_projectionDistance" )){
				m_functionCallCounts.Add( "get_projectionDistance", 0 );
			}
			m_functionCallCounts["get_projectionDistance"]++;
			
			throw new NotImplementedException("This function was automatically generated by Mockery and has no real implementation yet.");
		}
		set {
			if(m_functionCallCounts == null) {
				m_functionCallCounts = new Dictionary<string, int>();
			}
			if(!m_functionCallCounts.ContainsKey( "set_projectionDistance" )){
				m_functionCallCounts.Add( "set_projectionDistance", 0 );
			}
			m_functionCallCounts["set_projectionDistance"]++;
			
		}
	}

	public UnityEngine.Quaternion targetRotation {
		get {
			if(m_functionCallCounts == null) {
				m_functionCallCounts = new Dictionary<string, int>();
			}
			if(!m_functionCallCounts.ContainsKey( "get_targetRotation" )){
				m_functionCallCounts.Add( "get_targetRotation", 0 );
			}
			m_functionCallCounts["get_targetRotation"]++;
			
			throw new NotImplementedException("This function was automatically generated by Mockery and has no real implementation yet.");
		}
		set {
			if(m_functionCallCounts == null) {
				m_functionCallCounts = new Dictionary<string, int>();
			}
			if(!m_functionCallCounts.ContainsKey( "set_targetRotation" )){
				m_functionCallCounts.Add( "set_targetRotation", 0 );
			}
			m_functionCallCounts["set_targetRotation"]++;
			
		}
	}

	public UnityEngine.JointDrive xDrive {
		get {
			if(m_functionCallCounts == null) {
				m_functionCallCounts = new Dictionary<string, int>();
			}
			if(!m_functionCallCounts.ContainsKey( "get_xDrive" )){
				m_functionCallCounts.Add( "get_xDrive", 0 );
			}
			m_functionCallCounts["get_xDrive"]++;
			
			throw new NotImplementedException("This function was automatically generated by Mockery and has no real implementation yet.");
		}
		set {
			if(m_functionCallCounts == null) {
				m_functionCallCounts = new Dictionary<string, int>();
			}
			if(!m_functionCallCounts.ContainsKey( "set_xDrive" )){
				m_functionCallCounts.Add( "set_xDrive", 0 );
			}
			m_functionCallCounts["set_xDrive"]++;
			
		}
	}

	public UnityEngine.SoftJointLimit angularZLimit {
		get {
			if(m_functionCallCounts == null) {
				m_functionCallCounts = new Dictionary<string, int>();
			}
			if(!m_functionCallCounts.ContainsKey( "get_angularZLimit" )){
				m_functionCallCounts.Add( "get_angularZLimit", 0 );
			}
			m_functionCallCounts["get_angularZLimit"]++;
			
			throw new NotImplementedException("This function was automatically generated by Mockery and has no real implementation yet.");
		}
		set {
			if(m_functionCallCounts == null) {
				m_functionCallCounts = new Dictionary<string, int>();
			}
			if(!m_functionCallCounts.ContainsKey( "set_angularZLimit" )){
				m_functionCallCounts.Add( "set_angularZLimit", 0 );
			}
			m_functionCallCounts["set_angularZLimit"]++;
			
		}
	}

	public UnityEngine.SoftJointLimit lowAngularXLimit {
		get {
			if(m_functionCallCounts == null) {
				m_functionCallCounts = new Dictionary<string, int>();
			}
			if(!m_functionCallCounts.ContainsKey( "get_lowAngularXLimit" )){
				m_functionCallCounts.Add( "get_lowAngularXLimit", 0 );
			}
			m_functionCallCounts["get_lowAngularXLimit"]++;
			
			throw new NotImplementedException("This function was automatically generated by Mockery and has no real implementation yet.");
		}
		set {
			if(m_functionCallCounts == null) {
				m_functionCallCounts = new Dictionary<string, int>();
			}
			if(!m_functionCallCounts.ContainsKey( "set_lowAngularXLimit" )){
				m_functionCallCounts.Add( "set_lowAngularXLimit", 0 );
			}
			m_functionCallCounts["set_lowAngularXLimit"]++;
			
		}
	}

	public UnityEngine.JointDrive angularXDrive {
		get {
			if(m_functionCallCounts == null) {
				m_functionCallCounts = new Dictionary<string, int>();
			}
			if(!m_functionCallCounts.ContainsKey( "get_angularXDrive" )){
				m_functionCallCounts.Add( "get_angularXDrive", 0 );
			}
			m_functionCallCounts["get_angularXDrive"]++;
			
			throw new NotImplementedException("This function was automatically generated by Mockery and has no real implementation yet.");
		}
		set {
			if(m_functionCallCounts == null) {
				m_functionCallCounts = new Dictionary<string, int>();
			}
			if(!m_functionCallCounts.ContainsKey( "set_angularXDrive" )){
				m_functionCallCounts.Add( "set_angularXDrive", 0 );
			}
			m_functionCallCounts["set_angularXDrive"]++;
			
		}
	}

	public UnityEngine.SoftJointLimit linearLimit {
		get {
			if(m_functionCallCounts == null) {
				m_functionCallCounts = new Dictionary<string, int>();
			}
			if(!m_functionCallCounts.ContainsKey( "get_linearLimit" )){
				m_functionCallCounts.Add( "get_linearLimit", 0 );
			}
			m_functionCallCounts["get_linearLimit"]++;
			
			throw new NotImplementedException("This function was automatically generated by Mockery and has no real implementation yet.");
		}
		set {
			if(m_functionCallCounts == null) {
				m_functionCallCounts = new Dictionary<string, int>();
			}
			if(!m_functionCallCounts.ContainsKey( "set_linearLimit" )){
				m_functionCallCounts.Add( "set_linearLimit", 0 );
			}
			m_functionCallCounts["set_linearLimit"]++;
			
		}
	}

	public UnityEngine.SoftJointLimit angularYLimit {
		get {
			if(m_functionCallCounts == null) {
				m_functionCallCounts = new Dictionary<string, int>();
			}
			if(!m_functionCallCounts.ContainsKey( "get_angularYLimit" )){
				m_functionCallCounts.Add( "get_angularYLimit", 0 );
			}
			m_functionCallCounts["get_angularYLimit"]++;
			
			throw new NotImplementedException("This function was automatically generated by Mockery and has no real implementation yet.");
		}
		set {
			if(m_functionCallCounts == null) {
				m_functionCallCounts = new Dictionary<string, int>();
			}
			if(!m_functionCallCounts.ContainsKey( "set_angularYLimit" )){
				m_functionCallCounts.Add( "set_angularYLimit", 0 );
			}
			m_functionCallCounts["set_angularYLimit"]++;
			
		}
	}

	public UnityEngine.SoftJointLimit highAngularXLimit {
		get {
			if(m_functionCallCounts == null) {
				m_functionCallCounts = new Dictionary<string, int>();
			}
			if(!m_functionCallCounts.ContainsKey( "get_highAngularXLimit" )){
				m_functionCallCounts.Add( "get_highAngularXLimit", 0 );
			}
			m_functionCallCounts["get_highAngularXLimit"]++;
			
			throw new NotImplementedException("This function was automatically generated by Mockery and has no real implementation yet.");
		}
		set {
			if(m_functionCallCounts == null) {
				m_functionCallCounts = new Dictionary<string, int>();
			}
			if(!m_functionCallCounts.ContainsKey( "set_highAngularXLimit" )){
				m_functionCallCounts.Add( "set_highAngularXLimit", 0 );
			}
			m_functionCallCounts["set_highAngularXLimit"]++;
			
		}
	}

	public UnityEngine.ConfigurableJointMotion angularZMotion {
		get {
			if(m_functionCallCounts == null) {
				m_functionCallCounts = new Dictionary<string, int>();
			}
			if(!m_functionCallCounts.ContainsKey( "get_angularZMotion" )){
				m_functionCallCounts.Add( "get_angularZMotion", 0 );
			}
			m_functionCallCounts["get_angularZMotion"]++;
			
			throw new NotImplementedException("This function was automatically generated by Mockery and has no real implementation yet.");
		}
		set {
			if(m_functionCallCounts == null) {
				m_functionCallCounts = new Dictionary<string, int>();
			}
			if(!m_functionCallCounts.ContainsKey( "set_angularZMotion" )){
				m_functionCallCounts.Add( "set_angularZMotion", 0 );
			}
			m_functionCallCounts["set_angularZMotion"]++;
			
		}
	}

	public UnityEngine.JointProjectionMode projectionMode {
		get {
			if(m_functionCallCounts == null) {
				m_functionCallCounts = new Dictionary<string, int>();
			}
			if(!m_functionCallCounts.ContainsKey( "get_projectionMode" )){
				m_functionCallCounts.Add( "get_projectionMode", 0 );
			}
			m_functionCallCounts["get_projectionMode"]++;
			
			throw new NotImplementedException("This function was automatically generated by Mockery and has no real implementation yet.");
		}
		set {
			if(m_functionCallCounts == null) {
				m_functionCallCounts = new Dictionary<string, int>();
			}
			if(!m_functionCallCounts.ContainsKey( "set_projectionMode" )){
				m_functionCallCounts.Add( "set_projectionMode", 0 );
			}
			m_functionCallCounts["set_projectionMode"]++;
			
		}
	}

	public UnityEngine.ConfigurableJointMotion angularYMotion {
		get {
			if(m_functionCallCounts == null) {
				m_functionCallCounts = new Dictionary<string, int>();
			}
			if(!m_functionCallCounts.ContainsKey( "get_angularYMotion" )){
				m_functionCallCounts.Add( "get_angularYMotion", 0 );
			}
			m_functionCallCounts["get_angularYMotion"]++;
			
			throw new NotImplementedException("This function was automatically generated by Mockery and has no real implementation yet.");
		}
		set {
			if(m_functionCallCounts == null) {
				m_functionCallCounts = new Dictionary<string, int>();
			}
			if(!m_functionCallCounts.ContainsKey( "set_angularYMotion" )){
				m_functionCallCounts.Add( "set_angularYMotion", 0 );
			}
			m_functionCallCounts["set_angularYMotion"]++;
			
		}
	}

	public UnityEngine.JointDrive angularYZDrive {
		get {
			if(m_functionCallCounts == null) {
				m_functionCallCounts = new Dictionary<string, int>();
			}
			if(!m_functionCallCounts.ContainsKey( "get_angularYZDrive" )){
				m_functionCallCounts.Add( "get_angularYZDrive", 0 );
			}
			m_functionCallCounts["get_angularYZDrive"]++;
			
			throw new NotImplementedException("This function was automatically generated by Mockery and has no real implementation yet.");
		}
		set {
			if(m_functionCallCounts == null) {
				m_functionCallCounts = new Dictionary<string, int>();
			}
			if(!m_functionCallCounts.ContainsKey( "set_angularYZDrive" )){
				m_functionCallCounts.Add( "set_angularYZDrive", 0 );
			}
			m_functionCallCounts["set_angularYZDrive"]++;
			
		}
	}

	public System.Boolean configuredInWorldSpace {
		get {
			if(m_functionCallCounts == null) {
				m_functionCallCounts = new Dictionary<string, int>();
			}
			if(!m_functionCallCounts.ContainsKey( "get_configuredInWorldSpace" )){
				m_functionCallCounts.Add( "get_configuredInWorldSpace", 0 );
			}
			m_functionCallCounts["get_configuredInWorldSpace"]++;
			
			throw new NotImplementedException("This function was automatically generated by Mockery and has no real implementation yet.");
		}
		set {
			if(m_functionCallCounts == null) {
				m_functionCallCounts = new Dictionary<string, int>();
			}
			if(!m_functionCallCounts.ContainsKey( "set_configuredInWorldSpace" )){
				m_functionCallCounts.Add( "set_configuredInWorldSpace", 0 );
			}
			m_functionCallCounts["set_configuredInWorldSpace"]++;
			
		}
	}

	public UnityEngine.Vector3 targetVelocity {
		get {
			if(m_functionCallCounts == null) {
				m_functionCallCounts = new Dictionary<string, int>();
			}
			if(!m_functionCallCounts.ContainsKey( "get_targetVelocity" )){
				m_functionCallCounts.Add( "get_targetVelocity", 0 );
			}
			m_functionCallCounts["get_targetVelocity"]++;
			
			throw new NotImplementedException("This function was automatically generated by Mockery and has no real implementation yet.");
		}
		set {
			if(m_functionCallCounts == null) {
				m_functionCallCounts = new Dictionary<string, int>();
			}
			if(!m_functionCallCounts.ContainsKey( "set_targetVelocity" )){
				m_functionCallCounts.Add( "set_targetVelocity", 0 );
			}
			m_functionCallCounts["set_targetVelocity"]++;
			
		}
	}

	public UnityEngine.ConfigurableJointMotion xMotion {
		get {
			if(m_functionCallCounts == null) {
				m_functionCallCounts = new Dictionary<string, int>();
			}
			if(!m_functionCallCounts.ContainsKey( "get_xMotion" )){
				m_functionCallCounts.Add( "get_xMotion", 0 );
			}
			m_functionCallCounts["get_xMotion"]++;
			
			throw new NotImplementedException("This function was automatically generated by Mockery and has no real implementation yet.");
		}
		set {
			if(m_functionCallCounts == null) {
				m_functionCallCounts = new Dictionary<string, int>();
			}
			if(!m_functionCallCounts.ContainsKey( "set_xMotion" )){
				m_functionCallCounts.Add( "set_xMotion", 0 );
			}
			m_functionCallCounts["set_xMotion"]++;
			
		}
	}

	public UnityEngine.Vector3 targetPosition {
		get {
			if(m_functionCallCounts == null) {
				m_functionCallCounts = new Dictionary<string, int>();
			}
			if(!m_functionCallCounts.ContainsKey( "get_targetPosition" )){
				m_functionCallCounts.Add( "get_targetPosition", 0 );
			}
			m_functionCallCounts["get_targetPosition"]++;
			
			throw new NotImplementedException("This function was automatically generated by Mockery and has no real implementation yet.");
		}
		set {
			if(m_functionCallCounts == null) {
				m_functionCallCounts = new Dictionary<string, int>();
			}
			if(!m_functionCallCounts.ContainsKey( "set_targetPosition" )){
				m_functionCallCounts.Add( "set_targetPosition", 0 );
			}
			m_functionCallCounts["set_targetPosition"]++;
			
		}
	}

	public System.Single projectionAngle {
		get {
			if(m_functionCallCounts == null) {
				m_functionCallCounts = new Dictionary<string, int>();
			}
			if(!m_functionCallCounts.ContainsKey( "get_projectionAngle" )){
				m_functionCallCounts.Add( "get_projectionAngle", 0 );
			}
			m_functionCallCounts["get_projectionAngle"]++;
			
			throw new NotImplementedException("This function was automatically generated by Mockery and has no real implementation yet.");
		}
		set {
			if(m_functionCallCounts == null) {
				m_functionCallCounts = new Dictionary<string, int>();
			}
			if(!m_functionCallCounts.ContainsKey( "set_projectionAngle" )){
				m_functionCallCounts.Add( "set_projectionAngle", 0 );
			}
			m_functionCallCounts["set_projectionAngle"]++;
			
		}
	}

	public UnityEngine.JointDrive zDrive {
		get {
			if(m_functionCallCounts == null) {
				m_functionCallCounts = new Dictionary<string, int>();
			}
			if(!m_functionCallCounts.ContainsKey( "get_zDrive" )){
				m_functionCallCounts.Add( "get_zDrive", 0 );
			}
			m_functionCallCounts["get_zDrive"]++;
			
			throw new NotImplementedException("This function was automatically generated by Mockery and has no real implementation yet.");
		}
		set {
			if(m_functionCallCounts == null) {
				m_functionCallCounts = new Dictionary<string, int>();
			}
			if(!m_functionCallCounts.ContainsKey( "set_zDrive" )){
				m_functionCallCounts.Add( "set_zDrive", 0 );
			}
			m_functionCallCounts["set_zDrive"]++;
			
		}
	}

	public UnityEngine.RotationDriveMode rotationDriveMode {
		get {
			if(m_functionCallCounts == null) {
				m_functionCallCounts = new Dictionary<string, int>();
			}
			if(!m_functionCallCounts.ContainsKey( "get_rotationDriveMode" )){
				m_functionCallCounts.Add( "get_rotationDriveMode", 0 );
			}
			m_functionCallCounts["get_rotationDriveMode"]++;
			
			throw new NotImplementedException("This function was automatically generated by Mockery and has no real implementation yet.");
		}
		set {
			if(m_functionCallCounts == null) {
				m_functionCallCounts = new Dictionary<string, int>();
			}
			if(!m_functionCallCounts.ContainsKey( "set_rotationDriveMode" )){
				m_functionCallCounts.Add( "set_rotationDriveMode", 0 );
			}
			m_functionCallCounts["set_rotationDriveMode"]++;
			
		}
	}

	public UnityEngine.ConfigurableJointMotion zMotion {
		get {
			if(m_functionCallCounts == null) {
				m_functionCallCounts = new Dictionary<string, int>();
			}
			if(!m_functionCallCounts.ContainsKey( "get_zMotion" )){
				m_functionCallCounts.Add( "get_zMotion", 0 );
			}
			m_functionCallCounts["get_zMotion"]++;
			
			throw new NotImplementedException("This function was automatically generated by Mockery and has no real implementation yet.");
		}
		set {
			if(m_functionCallCounts == null) {
				m_functionCallCounts = new Dictionary<string, int>();
			}
			if(!m_functionCallCounts.ContainsKey( "set_zMotion" )){
				m_functionCallCounts.Add( "set_zMotion", 0 );
			}
			m_functionCallCounts["set_zMotion"]++;
			
		}
	}

	public UnityEngine.JointDrive yDrive {
		get {
			if(m_functionCallCounts == null) {
				m_functionCallCounts = new Dictionary<string, int>();
			}
			if(!m_functionCallCounts.ContainsKey( "get_yDrive" )){
				m_functionCallCounts.Add( "get_yDrive", 0 );
			}
			m_functionCallCounts["get_yDrive"]++;
			
			throw new NotImplementedException("This function was automatically generated by Mockery and has no real implementation yet.");
		}
		set {
			if(m_functionCallCounts == null) {
				m_functionCallCounts = new Dictionary<string, int>();
			}
			if(!m_functionCallCounts.ContainsKey( "set_yDrive" )){
				m_functionCallCounts.Add( "set_yDrive", 0 );
			}
			m_functionCallCounts["set_yDrive"]++;
			
		}
	}

	public UnityEngine.ConfigurableJointMotion yMotion {
		get {
			if(m_functionCallCounts == null) {
				m_functionCallCounts = new Dictionary<string, int>();
			}
			if(!m_functionCallCounts.ContainsKey( "get_yMotion" )){
				m_functionCallCounts.Add( "get_yMotion", 0 );
			}
			m_functionCallCounts["get_yMotion"]++;
			
			throw new NotImplementedException("This function was automatically generated by Mockery and has no real implementation yet.");
		}
		set {
			if(m_functionCallCounts == null) {
				m_functionCallCounts = new Dictionary<string, int>();
			}
			if(!m_functionCallCounts.ContainsKey( "set_yMotion" )){
				m_functionCallCounts.Add( "set_yMotion", 0 );
			}
			m_functionCallCounts["set_yMotion"]++;
			
		}
	}

	public UnityEngine.JointDrive slerpDrive {
		get {
			if(m_functionCallCounts == null) {
				m_functionCallCounts = new Dictionary<string, int>();
			}
			if(!m_functionCallCounts.ContainsKey( "get_slerpDrive" )){
				m_functionCallCounts.Add( "get_slerpDrive", 0 );
			}
			m_functionCallCounts["get_slerpDrive"]++;
			
			throw new NotImplementedException("This function was automatically generated by Mockery and has no real implementation yet.");
		}
		set {
			if(m_functionCallCounts == null) {
				m_functionCallCounts = new Dictionary<string, int>();
			}
			if(!m_functionCallCounts.ContainsKey( "set_slerpDrive" )){
				m_functionCallCounts.Add( "set_slerpDrive", 0 );
			}
			m_functionCallCounts["set_slerpDrive"]++;
			
		}
	}

	public UnityEngine.Vector3 targetAngularVelocity {
		get {
			if(m_functionCallCounts == null) {
				m_functionCallCounts = new Dictionary<string, int>();
			}
			if(!m_functionCallCounts.ContainsKey( "get_targetAngularVelocity" )){
				m_functionCallCounts.Add( "get_targetAngularVelocity", 0 );
			}
			m_functionCallCounts["get_targetAngularVelocity"]++;
			
			throw new NotImplementedException("This function was automatically generated by Mockery and has no real implementation yet.");
		}
		set {
			if(m_functionCallCounts == null) {
				m_functionCallCounts = new Dictionary<string, int>();
			}
			if(!m_functionCallCounts.ContainsKey( "set_targetAngularVelocity" )){
				m_functionCallCounts.Add( "set_targetAngularVelocity", 0 );
			}
			m_functionCallCounts["set_targetAngularVelocity"]++;
			
		}
	}

	public UnityEngine.ConfigurableJointMotion angularXMotion {
		get {
			if(m_functionCallCounts == null) {
				m_functionCallCounts = new Dictionary<string, int>();
			}
			if(!m_functionCallCounts.ContainsKey( "get_angularXMotion" )){
				m_functionCallCounts.Add( "get_angularXMotion", 0 );
			}
			m_functionCallCounts["get_angularXMotion"]++;
			
			throw new NotImplementedException("This function was automatically generated by Mockery and has no real implementation yet.");
		}
		set {
			if(m_functionCallCounts == null) {
				m_functionCallCounts = new Dictionary<string, int>();
			}
			if(!m_functionCallCounts.ContainsKey( "set_angularXMotion" )){
				m_functionCallCounts.Add( "set_angularXMotion", 0 );
			}
			m_functionCallCounts["set_angularXMotion"]++;
			
		}
	}
}
}
