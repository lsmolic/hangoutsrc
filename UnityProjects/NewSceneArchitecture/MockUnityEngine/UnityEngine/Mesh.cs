using System;
using System.Collections;
using System.Collections.Generic;
using System.Runtime.Serialization;


namespace UnityEngine
{
	public class Mesh : UnityEngine.Object
	{
		// Mock data:
		private Dictionary<string, int> m_functionCallCounts;
		public Dictionary<string, int> FunctionCallCounts
		{
			get
			{
				if (m_functionCallCounts == null)
				{
					m_functionCallCounts = new Dictionary<string, int>();
				}
				return m_functionCallCounts;
			}
		}

		public void Clear()
		{
			//Mock Data:
			if (m_functionCallCounts == null)
			{
				m_functionCallCounts = new Dictionary<string, int>();
			}
			if (!m_functionCallCounts.ContainsKey("Void Clear()"))
			{
				m_functionCallCounts.Add("Void Clear()", 0);
			}
			m_functionCallCounts["Void Clear()"]++;

		}

		public void RecalculateBounds()
		{
			//Mock Data:
			if (m_functionCallCounts == null)
			{
				m_functionCallCounts = new Dictionary<string, int>();
			}
			if (!m_functionCallCounts.ContainsKey("Void RecalculateBounds()"))
			{
				m_functionCallCounts.Add("Void RecalculateBounds()", 0);
			}
			m_functionCallCounts["Void RecalculateBounds()"]++;

		}

		public void RecalculateNormals()
		{
			//Mock Data:
			if (m_functionCallCounts == null)
			{
				m_functionCallCounts = new Dictionary<string, int>();
			}
			if (!m_functionCallCounts.ContainsKey("Void RecalculateNormals()"))
			{
				m_functionCallCounts.Add("Void RecalculateNormals()", 0);
			}
			m_functionCallCounts["Void RecalculateNormals()"]++;

		}

		public void Optimize()
		{
			//Mock Data:
			if (m_functionCallCounts == null)
			{
				m_functionCallCounts = new Dictionary<string, int>();
			}
			if (!m_functionCallCounts.ContainsKey("Void Optimize()"))
			{
				m_functionCallCounts.Add("Void Optimize()", 0);
			}
			m_functionCallCounts["Void Optimize()"]++;

		}

		public System.Int32[] GetTriangles(System.Int32 submesh)
		{
			//Mock Data:
			if (m_functionCallCounts == null)
			{
				m_functionCallCounts = new Dictionary<string, int>();
			}
			if (!m_functionCallCounts.ContainsKey("System.Int32[] GetTriangles(Int32)"))
			{
				m_functionCallCounts.Add("System.Int32[] GetTriangles(Int32)", 0);
			}
			m_functionCallCounts["System.Int32[] GetTriangles(Int32)"]++;

			throw new NotImplementedException("This function was automatically generated by Mockery and has no real implementation yet.");
		}

		public void SetTriangles(System.Int32[] triangles, System.Int32 submesh)
		{
			//Mock Data:
			if (m_functionCallCounts == null)
			{
				m_functionCallCounts = new Dictionary<string, int>();
			}
			if (!m_functionCallCounts.ContainsKey("Void SetTriangles(System.Int32[], Int32)"))
			{
				m_functionCallCounts.Add("Void SetTriangles(System.Int32[], Int32)", 0);
			}
			m_functionCallCounts["Void SetTriangles(System.Int32[], Int32)"]++;

		}

		public void SetTriangleStrip(System.Int32[] triangles, System.Int32 submesh)
		{
			//Mock Data:
			if (m_functionCallCounts == null)
			{
				m_functionCallCounts = new Dictionary<string, int>();
			}
			if (!m_functionCallCounts.ContainsKey("Void SetTriangleStrip(System.Int32[], Int32)"))
			{
				m_functionCallCounts.Add("Void SetTriangleStrip(System.Int32[], Int32)", 0);
			}
			m_functionCallCounts["Void SetTriangleStrip(System.Int32[], Int32)"]++;

		}

		public System.Int32[] GetTriangleStrip(System.Int32 submesh)
		{
			//Mock Data:
			if (m_functionCallCounts == null)
			{
				m_functionCallCounts = new Dictionary<string, int>();
			}
			if (!m_functionCallCounts.ContainsKey("System.Int32[] GetTriangleStrip(Int32)"))
			{
				m_functionCallCounts.Add("System.Int32[] GetTriangleStrip(Int32)", 0);
			}
			m_functionCallCounts["System.Int32[] GetTriangleStrip(Int32)"]++;

			throw new NotImplementedException("This function was automatically generated by Mockery and has no real implementation yet.");
		}

		public Mesh()
		{
			//Mock Data:
			m_functionCallCounts = new Dictionary<string, int>();
			if (!m_functionCallCounts.ContainsKey("Void .ctor()"))
			{
				m_functionCallCounts.Add("Void .ctor()", 0);
			}
			m_functionCallCounts["Void .ctor()"]++;

		}

		public UnityEngine.Vector2[] uv1
		{
			get
			{
				if (m_functionCallCounts == null)
				{
					m_functionCallCounts = new Dictionary<string, int>();
				}
				if (!m_functionCallCounts.ContainsKey("get_uv1"))
				{
					m_functionCallCounts.Add("get_uv1", 0);
				}
				m_functionCallCounts["get_uv1"]++;

				throw new NotImplementedException("This function was automatically generated by Mockery and has no real implementation yet.");
			}
			set
			{
				if (m_functionCallCounts == null)
				{
					m_functionCallCounts = new Dictionary<string, int>();
				}
				if (!m_functionCallCounts.ContainsKey("set_uv1"))
				{
					m_functionCallCounts.Add("set_uv1", 0);
				}
				m_functionCallCounts["set_uv1"]++;

			}
		}

		public UnityEngine.Vector2[] uv2
		{
			get
			{
				if (m_functionCallCounts == null)
				{
					m_functionCallCounts = new Dictionary<string, int>();
				}
				if (!m_functionCallCounts.ContainsKey("get_uv2"))
				{
					m_functionCallCounts.Add("get_uv2", 0);
				}
				m_functionCallCounts["get_uv2"]++;

				throw new NotImplementedException("This function was automatically generated by Mockery and has no real implementation yet.");
			}
			set
			{
				if (m_functionCallCounts == null)
				{
					m_functionCallCounts = new Dictionary<string, int>();
				}
				if (!m_functionCallCounts.ContainsKey("set_uv2"))
				{
					m_functionCallCounts.Add("set_uv2", 0);
				}
				m_functionCallCounts["set_uv2"]++;

			}
		}

		public UnityEngine.BoneWeight[] boneWeights
		{
			get
			{
				if (m_functionCallCounts == null)
				{
					m_functionCallCounts = new Dictionary<string, int>();
				}
				if (!m_functionCallCounts.ContainsKey("get_boneWeights"))
				{
					m_functionCallCounts.Add("get_boneWeights", 0);
				}
				m_functionCallCounts["get_boneWeights"]++;

				throw new NotImplementedException("This function was automatically generated by Mockery and has no real implementation yet.");
			}
			set
			{
				if (m_functionCallCounts == null)
				{
					m_functionCallCounts = new Dictionary<string, int>();
				}
				if (!m_functionCallCounts.ContainsKey("set_boneWeights"))
				{
					m_functionCallCounts.Add("set_boneWeights", 0);
				}
				m_functionCallCounts["set_boneWeights"]++;

			}
		}

		public UnityEngine.Vector2[] uv
		{
			get
			{
				if (m_functionCallCounts == null)
				{
					m_functionCallCounts = new Dictionary<string, int>();
				}
				if (!m_functionCallCounts.ContainsKey("get_uv"))
				{
					m_functionCallCounts.Add("get_uv", 0);
				}
				m_functionCallCounts["get_uv"]++;

				throw new NotImplementedException("This function was automatically generated by Mockery and has no real implementation yet.");
			}
			set
			{
				if (m_functionCallCounts == null)
				{
					m_functionCallCounts = new Dictionary<string, int>();
				}
				if (!m_functionCallCounts.ContainsKey("set_uv"))
				{
					m_functionCallCounts.Add("set_uv", 0);
				}
				m_functionCallCounts["set_uv"]++;

			}
		}

		public UnityEngine.Matrix4x4[] bindposes
		{
			get
			{
				if (m_functionCallCounts == null)
				{
					m_functionCallCounts = new Dictionary<string, int>();
				}
				if (!m_functionCallCounts.ContainsKey("get_bindposes"))
				{
					m_functionCallCounts.Add("get_bindposes", 0);
				}
				m_functionCallCounts["get_bindposes"]++;

				throw new NotImplementedException("This function was automatically generated by Mockery and has no real implementation yet.");
			}
			set
			{
				if (m_functionCallCounts == null)
				{
					m_functionCallCounts = new Dictionary<string, int>();
				}
				if (!m_functionCallCounts.ContainsKey("set_bindposes"))
				{
					m_functionCallCounts.Add("set_bindposes", 0);
				}
				m_functionCallCounts["set_bindposes"]++;

			}
		}

		public System.Int32 vertexCount
		{
			get
			{
				if (m_functionCallCounts == null)
				{
					m_functionCallCounts = new Dictionary<string, int>();
				}
				if (!m_functionCallCounts.ContainsKey("get_vertexCount"))
				{
					m_functionCallCounts.Add("get_vertexCount", 0);
				}
				m_functionCallCounts["get_vertexCount"]++;

				throw new NotImplementedException("This function was automatically generated by Mockery and has no real implementation yet.");
			}
		}

		public UnityEngine.Bounds bounds
		{
			get
			{
				if (m_functionCallCounts == null)
				{
					m_functionCallCounts = new Dictionary<string, int>();
				}
				if (!m_functionCallCounts.ContainsKey("get_bounds"))
				{
					m_functionCallCounts.Add("get_bounds", 0);
				}
				m_functionCallCounts["get_bounds"]++;

				throw new NotImplementedException("This function was automatically generated by Mockery and has no real implementation yet.");
			}
			set
			{
				if (m_functionCallCounts == null)
				{
					m_functionCallCounts = new Dictionary<string, int>();
				}
				if (!m_functionCallCounts.ContainsKey("set_bounds"))
				{
					m_functionCallCounts.Add("set_bounds", 0);
				}
				m_functionCallCounts["set_bounds"]++;

			}
		}

		public UnityEngine.Vector3[] normals
		{
			get
			{
				if (m_functionCallCounts == null)
				{
					m_functionCallCounts = new Dictionary<string, int>();
				}
				if (!m_functionCallCounts.ContainsKey("get_normals"))
				{
					m_functionCallCounts.Add("get_normals", 0);
				}
				m_functionCallCounts["get_normals"]++;

				throw new NotImplementedException("This function was automatically generated by Mockery and has no real implementation yet.");
			}
			set
			{
				if (m_functionCallCounts == null)
				{
					m_functionCallCounts = new Dictionary<string, int>();
				}
				if (!m_functionCallCounts.ContainsKey("set_normals"))
				{
					m_functionCallCounts.Add("set_normals", 0);
				}
				m_functionCallCounts["set_normals"]++;

			}
		}

		public System.Int32 subMeshCount
		{
			get
			{
				if (m_functionCallCounts == null)
				{
					m_functionCallCounts = new Dictionary<string, int>();
				}
				if (!m_functionCallCounts.ContainsKey("get_subMeshCount"))
				{
					m_functionCallCounts.Add("get_subMeshCount", 0);
				}
				m_functionCallCounts["get_subMeshCount"]++;

				throw new NotImplementedException("This function was automatically generated by Mockery and has no real implementation yet.");
			}
			set
			{
				if (m_functionCallCounts == null)
				{
					m_functionCallCounts = new Dictionary<string, int>();
				}
				if (!m_functionCallCounts.ContainsKey("set_subMeshCount"))
				{
					m_functionCallCounts.Add("set_subMeshCount", 0);
				}
				m_functionCallCounts["set_subMeshCount"]++;

			}
		}

		public UnityEngine.Color[] colors
		{
			get
			{
				if (m_functionCallCounts == null)
				{
					m_functionCallCounts = new Dictionary<string, int>();
				}
				if (!m_functionCallCounts.ContainsKey("get_colors"))
				{
					m_functionCallCounts.Add("get_colors", 0);
				}
				m_functionCallCounts["get_colors"]++;

				throw new NotImplementedException("This function was automatically generated by Mockery and has no real implementation yet.");
			}
			set
			{
				if (m_functionCallCounts == null)
				{
					m_functionCallCounts = new Dictionary<string, int>();
				}
				if (!m_functionCallCounts.ContainsKey("set_colors"))
				{
					m_functionCallCounts.Add("set_colors", 0);
				}
				m_functionCallCounts["set_colors"]++;

			}
		}

		public UnityEngine.Vector3[] vertices
		{
			get
			{
				if (m_functionCallCounts == null)
				{
					m_functionCallCounts = new Dictionary<string, int>();
				}
				if (!m_functionCallCounts.ContainsKey("get_vertices"))
				{
					m_functionCallCounts.Add("get_vertices", 0);
				}
				m_functionCallCounts["get_vertices"]++;

				throw new NotImplementedException("This function was automatically generated by Mockery and has no real implementation yet.");
			}
			set
			{
				if (m_functionCallCounts == null)
				{
					m_functionCallCounts = new Dictionary<string, int>();
				}
				if (!m_functionCallCounts.ContainsKey("set_vertices"))
				{
					m_functionCallCounts.Add("set_vertices", 0);
				}
				m_functionCallCounts["set_vertices"]++;

			}
		}

		public System.Int32[] triangles
		{
			get
			{
				if (m_functionCallCounts == null)
				{
					m_functionCallCounts = new Dictionary<string, int>();
				}
				if (!m_functionCallCounts.ContainsKey("get_triangles"))
				{
					m_functionCallCounts.Add("get_triangles", 0);
				}
				m_functionCallCounts["get_triangles"]++;

				throw new NotImplementedException("This function was automatically generated by Mockery and has no real implementation yet.");
			}
			set
			{
				if (m_functionCallCounts == null)
				{
					m_functionCallCounts = new Dictionary<string, int>();
				}
				if (!m_functionCallCounts.ContainsKey("set_triangles"))
				{
					m_functionCallCounts.Add("set_triangles", 0);
				}
				m_functionCallCounts["set_triangles"]++;

			}
		}

		public UnityEngine.Vector4[] tangents
		{
			get
			{
				if (m_functionCallCounts == null)
				{
					m_functionCallCounts = new Dictionary<string, int>();
				}
				if (!m_functionCallCounts.ContainsKey("get_tangents"))
				{
					m_functionCallCounts.Add("get_tangents", 0);
				}
				m_functionCallCounts["get_tangents"]++;

				throw new NotImplementedException("This function was automatically generated by Mockery and has no real implementation yet.");
			}
			set
			{
				if (m_functionCallCounts == null)
				{
					m_functionCallCounts = new Dictionary<string, int>();
				}
				if (!m_functionCallCounts.ContainsKey("set_tangents"))
				{
					m_functionCallCounts.Add("set_tangents", 0);
				}
				m_functionCallCounts["set_tangents"]++;

			}
		}
	}
}
