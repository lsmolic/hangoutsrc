using System;
using System.Collections;
using System.Collections.Generic;
using System.Runtime.Serialization;


namespace UnityEngine {
public struct TreeInstance {
	// Mock data:
	private Dictionary<string, int> m_functionCallCounts;
	public Dictionary<string, int> FunctionCallCounts {
		get { 
			if(m_functionCallCounts == null) {
				m_functionCallCounts = new Dictionary<string, int>();
			}
			return m_functionCallCounts;
		}
	}

	public System.Int32 CompareTo( System.Object obj ){
		//Mock Data:
		if(m_functionCallCounts == null) {
			m_functionCallCounts = new Dictionary<string, int>();
		}
		if(!m_functionCallCounts.ContainsKey( "Int32 CompareTo(System.Object)" )){
			m_functionCallCounts.Add( "Int32 CompareTo(System.Object)", 0 );
		}
		m_functionCallCounts["Int32 CompareTo(System.Object)"]++;
			
		throw new NotImplementedException("This function was automatically generated by Mockery and has no real implementation yet.");
	}

	public UnityEngine.TreeInstance Clone( ){
		//Mock Data:
		if(m_functionCallCounts == null) {
			m_functionCallCounts = new Dictionary<string, int>();
		}
		if(!m_functionCallCounts.ContainsKey( "TreeInstance Clone()" )){
			m_functionCallCounts.Add( "TreeInstance Clone()", 0 );
		}
		m_functionCallCounts["TreeInstance Clone()"]++;
			
		throw new NotImplementedException("This function was automatically generated by Mockery and has no real implementation yet.");
	}

	public System.Single temporaryDistance {
		get {
			if(m_functionCallCounts == null) {
				m_functionCallCounts = new Dictionary<string, int>();
			}
			if(!m_functionCallCounts.ContainsKey( "get_temporaryDistance" )){
				m_functionCallCounts.Add( "get_temporaryDistance", 0 );
			}
			m_functionCallCounts["get_temporaryDistance"]++;
			
			throw new NotImplementedException("This function was automatically generated by Mockery and has no real implementation yet.");
		}
		set {
			if(m_functionCallCounts == null) {
				m_functionCallCounts = new Dictionary<string, int>();
			}
			if(!m_functionCallCounts.ContainsKey( "set_temporaryDistance" )){
				m_functionCallCounts.Add( "set_temporaryDistance", 0 );
			}
			m_functionCallCounts["set_temporaryDistance"]++;
			
		}
	}

	public UnityEngine.Color color {
		get {
			if(m_functionCallCounts == null) {
				m_functionCallCounts = new Dictionary<string, int>();
			}
			if(!m_functionCallCounts.ContainsKey( "get_color" )){
				m_functionCallCounts.Add( "get_color", 0 );
			}
			m_functionCallCounts["get_color"]++;
			
			throw new NotImplementedException("This function was automatically generated by Mockery and has no real implementation yet.");
		}
		set {
			if(m_functionCallCounts == null) {
				m_functionCallCounts = new Dictionary<string, int>();
			}
			if(!m_functionCallCounts.ContainsKey( "set_color" )){
				m_functionCallCounts.Add( "set_color", 0 );
			}
			m_functionCallCounts["set_color"]++;
			
		}
	}

	public System.Int32 prototypeIndex {
		get {
			if(m_functionCallCounts == null) {
				m_functionCallCounts = new Dictionary<string, int>();
			}
			if(!m_functionCallCounts.ContainsKey( "get_prototypeIndex" )){
				m_functionCallCounts.Add( "get_prototypeIndex", 0 );
			}
			m_functionCallCounts["get_prototypeIndex"]++;
			
			throw new NotImplementedException("This function was automatically generated by Mockery and has no real implementation yet.");
		}
		set {
			if(m_functionCallCounts == null) {
				m_functionCallCounts = new Dictionary<string, int>();
			}
			if(!m_functionCallCounts.ContainsKey( "set_prototypeIndex" )){
				m_functionCallCounts.Add( "set_prototypeIndex", 0 );
			}
			m_functionCallCounts["set_prototypeIndex"]++;
			
		}
	}

	public System.Single widthScale {
		get {
			if(m_functionCallCounts == null) {
				m_functionCallCounts = new Dictionary<string, int>();
			}
			if(!m_functionCallCounts.ContainsKey( "get_widthScale" )){
				m_functionCallCounts.Add( "get_widthScale", 0 );
			}
			m_functionCallCounts["get_widthScale"]++;
			
			throw new NotImplementedException("This function was automatically generated by Mockery and has no real implementation yet.");
		}
		set {
			if(m_functionCallCounts == null) {
				m_functionCallCounts = new Dictionary<string, int>();
			}
			if(!m_functionCallCounts.ContainsKey( "set_widthScale" )){
				m_functionCallCounts.Add( "set_widthScale", 0 );
			}
			m_functionCallCounts["set_widthScale"]++;
			
		}
	}

	public UnityEngine.Color lightmapColor {
		get {
			if(m_functionCallCounts == null) {
				m_functionCallCounts = new Dictionary<string, int>();
			}
			if(!m_functionCallCounts.ContainsKey( "get_lightmapColor" )){
				m_functionCallCounts.Add( "get_lightmapColor", 0 );
			}
			m_functionCallCounts["get_lightmapColor"]++;
			
			throw new NotImplementedException("This function was automatically generated by Mockery and has no real implementation yet.");
		}
		set {
			if(m_functionCallCounts == null) {
				m_functionCallCounts = new Dictionary<string, int>();
			}
			if(!m_functionCallCounts.ContainsKey( "set_lightmapColor" )){
				m_functionCallCounts.Add( "set_lightmapColor", 0 );
			}
			m_functionCallCounts["set_lightmapColor"]++;
			
		}
	}

	public System.Single heightScale {
		get {
			if(m_functionCallCounts == null) {
				m_functionCallCounts = new Dictionary<string, int>();
			}
			if(!m_functionCallCounts.ContainsKey( "get_heightScale" )){
				m_functionCallCounts.Add( "get_heightScale", 0 );
			}
			m_functionCallCounts["get_heightScale"]++;
			
			throw new NotImplementedException("This function was automatically generated by Mockery and has no real implementation yet.");
		}
		set {
			if(m_functionCallCounts == null) {
				m_functionCallCounts = new Dictionary<string, int>();
			}
			if(!m_functionCallCounts.ContainsKey( "set_heightScale" )){
				m_functionCallCounts.Add( "set_heightScale", 0 );
			}
			m_functionCallCounts["set_heightScale"]++;
			
		}
	}

	public UnityEngine.Vector3 position {
		get {
			if(m_functionCallCounts == null) {
				m_functionCallCounts = new Dictionary<string, int>();
			}
			if(!m_functionCallCounts.ContainsKey( "get_position" )){
				m_functionCallCounts.Add( "get_position", 0 );
			}
			m_functionCallCounts["get_position"]++;
			
			throw new NotImplementedException("This function was automatically generated by Mockery and has no real implementation yet.");
		}
		set {
			if(m_functionCallCounts == null) {
				m_functionCallCounts = new Dictionary<string, int>();
			}
			if(!m_functionCallCounts.ContainsKey( "set_position" )){
				m_functionCallCounts.Add( "set_position", 0 );
			}
			m_functionCallCounts["set_position"]++;
			
		}
	}
}
}
