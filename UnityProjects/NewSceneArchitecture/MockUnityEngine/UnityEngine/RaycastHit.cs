using System;
using System.Collections;
using System.Collections.Generic;
using System.Runtime.Serialization;


namespace UnityEngine {
public struct RaycastHit {
	// Mock data:
	private Dictionary<string, int> m_functionCallCounts;
	public Dictionary<string, int> FunctionCallCounts {
		get { 
			if(m_functionCallCounts == null) {
				m_functionCallCounts = new Dictionary<string, int>();
			}
			return m_functionCallCounts;
		}
	}

	public UnityEngine.Vector2 textureCoord {
		get {
			if(m_functionCallCounts == null) {
				m_functionCallCounts = new Dictionary<string, int>();
			}
			if(!m_functionCallCounts.ContainsKey( "get_textureCoord" )){
				m_functionCallCounts.Add( "get_textureCoord", 0 );
			}
			m_functionCallCounts["get_textureCoord"]++;
			
			throw new NotImplementedException("This function was automatically generated by Mockery and has no real implementation yet.");
		}
	}

	public UnityEngine.Rigidbody rigidbody {
		get {
			if(m_functionCallCounts == null) {
				m_functionCallCounts = new Dictionary<string, int>();
			}
			if(!m_functionCallCounts.ContainsKey( "get_rigidbody" )){
				m_functionCallCounts.Add( "get_rigidbody", 0 );
			}
			m_functionCallCounts["get_rigidbody"]++;
			
			throw new NotImplementedException("This function was automatically generated by Mockery and has no real implementation yet.");
		}
	}

	public UnityEngine.Transform transform {
		get {
			if(m_functionCallCounts == null) {
				m_functionCallCounts = new Dictionary<string, int>();
			}
			if(!m_functionCallCounts.ContainsKey( "get_transform" )){
				m_functionCallCounts.Add( "get_transform", 0 );
			}
			m_functionCallCounts["get_transform"]++;
			
			throw new NotImplementedException("This function was automatically generated by Mockery and has no real implementation yet.");
		}
	}

	public UnityEngine.Vector3 normal {
		get {
			if(m_functionCallCounts == null) {
				m_functionCallCounts = new Dictionary<string, int>();
			}
			if(!m_functionCallCounts.ContainsKey( "get_normal" )){
				m_functionCallCounts.Add( "get_normal", 0 );
			}
			m_functionCallCounts["get_normal"]++;
			
			throw new NotImplementedException("This function was automatically generated by Mockery and has no real implementation yet.");
		}
		set {
			if(m_functionCallCounts == null) {
				m_functionCallCounts = new Dictionary<string, int>();
			}
			if(!m_functionCallCounts.ContainsKey( "set_normal" )){
				m_functionCallCounts.Add( "set_normal", 0 );
			}
			m_functionCallCounts["set_normal"]++;
			
		}
	}

	public UnityEngine.Vector2 textureCoord1 {
		get {
			if(m_functionCallCounts == null) {
				m_functionCallCounts = new Dictionary<string, int>();
			}
			if(!m_functionCallCounts.ContainsKey( "get_textureCoord1" )){
				m_functionCallCounts.Add( "get_textureCoord1", 0 );
			}
			m_functionCallCounts["get_textureCoord1"]++;
			
			throw new NotImplementedException("This function was automatically generated by Mockery and has no real implementation yet.");
		}
	}

	public UnityEngine.Vector2 textureCoord2 {
		get {
			if(m_functionCallCounts == null) {
				m_functionCallCounts = new Dictionary<string, int>();
			}
			if(!m_functionCallCounts.ContainsKey( "get_textureCoord2" )){
				m_functionCallCounts.Add( "get_textureCoord2", 0 );
			}
			m_functionCallCounts["get_textureCoord2"]++;
			
			throw new NotImplementedException("This function was automatically generated by Mockery and has no real implementation yet.");
		}
	}

	public UnityEngine.Vector3 point {
		get {
			if(m_functionCallCounts == null) {
				m_functionCallCounts = new Dictionary<string, int>();
			}
			if(!m_functionCallCounts.ContainsKey( "get_point" )){
				m_functionCallCounts.Add( "get_point", 0 );
			}
			m_functionCallCounts["get_point"]++;
			
			throw new NotImplementedException("This function was automatically generated by Mockery and has no real implementation yet.");
		}
		set {
			if(m_functionCallCounts == null) {
				m_functionCallCounts = new Dictionary<string, int>();
			}
			if(!m_functionCallCounts.ContainsKey( "set_point" )){
				m_functionCallCounts.Add( "set_point", 0 );
			}
			m_functionCallCounts["set_point"]++;
			
		}
	}

	public System.Int32 triangleIndex {
		get {
			if(m_functionCallCounts == null) {
				m_functionCallCounts = new Dictionary<string, int>();
			}
			if(!m_functionCallCounts.ContainsKey( "get_triangleIndex" )){
				m_functionCallCounts.Add( "get_triangleIndex", 0 );
			}
			m_functionCallCounts["get_triangleIndex"]++;
			
			throw new NotImplementedException("This function was automatically generated by Mockery and has no real implementation yet.");
		}
	}

	public UnityEngine.Collider collider {
		get {
			if(m_functionCallCounts == null) {
				m_functionCallCounts = new Dictionary<string, int>();
			}
			if(!m_functionCallCounts.ContainsKey( "get_collider" )){
				m_functionCallCounts.Add( "get_collider", 0 );
			}
			m_functionCallCounts["get_collider"]++;
			
			throw new NotImplementedException("This function was automatically generated by Mockery and has no real implementation yet.");
		}
	}

	public UnityEngine.Vector3 barycentricCoordinate {
		get {
			if(m_functionCallCounts == null) {
				m_functionCallCounts = new Dictionary<string, int>();
			}
			if(!m_functionCallCounts.ContainsKey( "get_barycentricCoordinate" )){
				m_functionCallCounts.Add( "get_barycentricCoordinate", 0 );
			}
			m_functionCallCounts["get_barycentricCoordinate"]++;
			
			throw new NotImplementedException("This function was automatically generated by Mockery and has no real implementation yet.");
		}
		set {
			if(m_functionCallCounts == null) {
				m_functionCallCounts = new Dictionary<string, int>();
			}
			if(!m_functionCallCounts.ContainsKey( "set_barycentricCoordinate" )){
				m_functionCallCounts.Add( "set_barycentricCoordinate", 0 );
			}
			m_functionCallCounts["set_barycentricCoordinate"]++;
			
		}
	}

	public System.Single distance {
		get {
			if(m_functionCallCounts == null) {
				m_functionCallCounts = new Dictionary<string, int>();
			}
			if(!m_functionCallCounts.ContainsKey( "get_distance" )){
				m_functionCallCounts.Add( "get_distance", 0 );
			}
			m_functionCallCounts["get_distance"]++;
			
			throw new NotImplementedException("This function was automatically generated by Mockery and has no real implementation yet.");
		}
		set {
			if(m_functionCallCounts == null) {
				m_functionCallCounts = new Dictionary<string, int>();
			}
			if(!m_functionCallCounts.ContainsKey( "set_distance" )){
				m_functionCallCounts.Add( "set_distance", 0 );
			}
			m_functionCallCounts["set_distance"]++;
			
		}
	}
}
}
