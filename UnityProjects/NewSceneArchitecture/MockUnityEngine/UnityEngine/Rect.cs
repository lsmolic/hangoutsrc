using System;
using System.Collections;
using System.Collections.Generic;
using System.Runtime.Serialization;


namespace UnityEngine
{
	public struct Rect
	{
		// Mock data:
		private Dictionary<string, int> m_functionCallCounts;
		public Dictionary<string, int> FunctionCallCounts
		{
			get
			{
				if (m_functionCallCounts == null)
				{
					m_functionCallCounts = new Dictionary<string, int>();
				}
				return m_functionCallCounts;
			}
		}

		public static UnityEngine.Rect MinMaxRect(System.Single left, System.Single top, System.Single right, System.Single bottom)
		{
			return new Rect(left, top, right - left, bottom - top);
		}

		public override System.String ToString()
		{
			//Mock Data:
			if (m_functionCallCounts == null)
			{
				m_functionCallCounts = new Dictionary<string, int>();
			}
			if (!m_functionCallCounts.ContainsKey("System.String ToString()"))
			{
				m_functionCallCounts.Add("System.String ToString()", 0);
			}
			m_functionCallCounts["System.String ToString()"]++;

			return "Rect (" + mTopLeft + ", " + mSize + ")";
		}

		public System.Boolean Contains(UnityEngine.Vector2 point)
		{
			//Mock Data:
			if (m_functionCallCounts == null)
			{
				m_functionCallCounts = new Dictionary<string, int>();
			}
			if (!m_functionCallCounts.ContainsKey("Boolean Contains(Vector2)"))
			{
				m_functionCallCounts.Add("Boolean Contains(Vector2)", 0);
			}
			m_functionCallCounts["Boolean Contains(Vector2)"]++;

			return point.x >= this.xMin && point.x <= this.xMax && point.y >= this.yMin && point.y <= this.yMax;
		}

		public System.Boolean Contains(UnityEngine.Vector3 point)
		{
			//Mock Data:
			if (m_functionCallCounts == null)
			{
				m_functionCallCounts = new Dictionary<string, int>();
			}
			if (!m_functionCallCounts.ContainsKey("Boolean Contains(Vector3)"))
			{
				m_functionCallCounts.Add("Boolean Contains(Vector3)", 0);
			}
			m_functionCallCounts["Boolean Contains(Vector3)"]++;

			throw new NotImplementedException("This function was automatically generated by Mockery and has no real implementation yet.");
		}

		public override System.Int32 GetHashCode()
		{
			//Mock Data:
			if (m_functionCallCounts == null)
			{
				m_functionCallCounts = new Dictionary<string, int>();
			}
			if (!m_functionCallCounts.ContainsKey("Int32 GetHashCode()"))
			{
				m_functionCallCounts.Add("Int32 GetHashCode()", 0);
			}
			m_functionCallCounts["Int32 GetHashCode()"]++;

			throw new NotImplementedException("This function was automatically generated by Mockery and has no real implementation yet.");
		}

		public override System.Boolean Equals(System.Object other)
		{
			//Mock Data:
			if (m_functionCallCounts == null)
			{
				m_functionCallCounts = new Dictionary<string, int>();
			}
			if (!m_functionCallCounts.ContainsKey("Boolean Equals(System.Object)"))
			{
				m_functionCallCounts.Add("Boolean Equals(System.Object)", 0);
			}
			m_functionCallCounts["Boolean Equals(System.Object)"]++;

			
			if( other is Rect )
			{
				Rect otherR = (Rect)other;
				return otherR.mTopLeft == mTopLeft && otherR.mSize == mSize;
			}
			return false;
		}

		public static System.Boolean operator !=(UnityEngine.Rect lhs, UnityEngine.Rect rhs)
		{
			throw new NotImplementedException("This function was automatically generated by Mockery and has no real implementation yet.");
		}

		public static System.Boolean operator ==(UnityEngine.Rect lhs, UnityEngine.Rect rhs)
		{
			throw new NotImplementedException("This function was automatically generated by Mockery and has no real implementation yet.");
		}

		private Vector2 mTopLeft;
		private Vector2 mSize;
		public Rect(System.Single left, System.Single top, System.Single width, System.Single height)
		{
			//Mock Data:
			m_functionCallCounts = new Dictionary<string, int>();
			if (!m_functionCallCounts.ContainsKey("Void .ctor(Single, Single, Single, Single)"))
			{
				m_functionCallCounts.Add("Void .ctor(Single, Single, Single, Single)", 0);
			}
			m_functionCallCounts["Void .ctor(Single, Single, Single, Single)"]++;

			mTopLeft = new Vector2(left, top);
			mSize = new Vector2(width, height);
		}

		public Rect(UnityEngine.Rect source)
		{
			//Mock Data:
			m_functionCallCounts = new Dictionary<string, int>();
			if (!m_functionCallCounts.ContainsKey("Void .ctor(Rect)"))
			{
				m_functionCallCounts.Add("Void .ctor(Rect)", 0);
			}
			m_functionCallCounts["Void .ctor(Rect)"]++;

			mTopLeft = new Vector2(source.left, source.top);
			mSize = new Vector2(source.width, source.height);
		}

		public System.Single yMax
		{
			get
			{
				if (m_functionCallCounts == null)
				{
					m_functionCallCounts = new Dictionary<string, int>();
				}
				if (!m_functionCallCounts.ContainsKey("get_yMax"))
				{
					m_functionCallCounts.Add("get_yMax", 0);
				}
				m_functionCallCounts["get_yMax"]++;

				return mTopLeft.y + mSize.y;
			}
			set
			{
				if (m_functionCallCounts == null)
				{
					m_functionCallCounts = new Dictionary<string, int>();
				}
				if (!m_functionCallCounts.ContainsKey("set_yMax"))
				{
					m_functionCallCounts.Add("set_yMax", 0);
				}
				m_functionCallCounts["set_yMax"]++;


				mTopLeft.y = value - mSize.y;
			}
		}

		public System.Single bottom
		{
			get
			{
				if (m_functionCallCounts == null)
				{
					m_functionCallCounts = new Dictionary<string, int>();
				}
				if (!m_functionCallCounts.ContainsKey("get_bottom"))
				{
					m_functionCallCounts.Add("get_bottom", 0);
				}
				m_functionCallCounts["get_bottom"]++;

				throw new NotImplementedException("This function was automatically generated by Mockery and has no real implementation yet.");
			}
		}

		public System.Single x
		{
			get
			{
				if (m_functionCallCounts == null)
				{
					m_functionCallCounts = new Dictionary<string, int>();
				}
				if (!m_functionCallCounts.ContainsKey("get_x"))
				{
					m_functionCallCounts.Add("get_x", 0);
				}
				m_functionCallCounts["get_x"]++;

				return mTopLeft.x;
			}
			set
			{
				if (m_functionCallCounts == null)
				{
					m_functionCallCounts = new Dictionary<string, int>();
				}
				if (!m_functionCallCounts.ContainsKey("set_x"))
				{
					m_functionCallCounts.Add("set_x", 0);
				}
				m_functionCallCounts["set_x"]++;

				mTopLeft.x = value;
			}
		}

		public System.Single y
		{
			get
			{
				if (m_functionCallCounts == null)
				{
					m_functionCallCounts = new Dictionary<string, int>();
				}
				if (!m_functionCallCounts.ContainsKey("get_y"))
				{
					m_functionCallCounts.Add("get_y", 0);
				}
				m_functionCallCounts["get_y"]++;

				return mTopLeft.y;
			}
			set
			{
				if (m_functionCallCounts == null)
				{
					m_functionCallCounts = new Dictionary<string, int>();
				}
				if (!m_functionCallCounts.ContainsKey("set_y"))
				{
					m_functionCallCounts.Add("set_y", 0);
				}
				m_functionCallCounts["set_y"]++;

				mTopLeft.y = value;
			}
		}

		public System.Single xMin
		{
			get
			{
				if (m_functionCallCounts == null)
				{
					m_functionCallCounts = new Dictionary<string, int>();
				}
				if (!m_functionCallCounts.ContainsKey("get_xMin"))
				{
					m_functionCallCounts.Add("get_xMin", 0);
				}
				m_functionCallCounts["get_xMin"]++;

				return mTopLeft.x;
			}
			set
			{
				if (m_functionCallCounts == null)
				{
					m_functionCallCounts = new Dictionary<string, int>();
				}
				if (!m_functionCallCounts.ContainsKey("set_xMin"))
				{
					m_functionCallCounts.Add("set_xMin", 0);
				}

				mTopLeft.x = value;
			}
		}

		public System.Single left
		{
			get
			{
				if (m_functionCallCounts == null)
				{
					m_functionCallCounts = new Dictionary<string, int>();
				}
				if (!m_functionCallCounts.ContainsKey("get_left"))
				{
					m_functionCallCounts.Add("get_left", 0);
				}
				m_functionCallCounts["get_left"]++;

				throw new NotImplementedException("This function was automatically generated by Mockery and has no real implementation yet.");
			}
		}

		public System.Single yMin
		{
			get
			{
				if (m_functionCallCounts == null)
				{
					m_functionCallCounts = new Dictionary<string, int>();
				}
				if (!m_functionCallCounts.ContainsKey("get_yMin"))
				{
					m_functionCallCounts.Add("get_yMin", 0);
				}
				m_functionCallCounts["get_yMin"]++;

				return mTopLeft.y;
			}
			set
			{
				if (m_functionCallCounts == null)
				{
					m_functionCallCounts = new Dictionary<string, int>();
				}
				if (!m_functionCallCounts.ContainsKey("set_yMin"))
				{
					m_functionCallCounts.Add("set_yMin", 0);
				}
				m_functionCallCounts["set_yMin"]++;


				mTopLeft.y = value;
			}
		}

		public System.Single width
		{
			get
			{
				if (m_functionCallCounts == null)
				{
					m_functionCallCounts = new Dictionary<string, int>();
				}
				if (!m_functionCallCounts.ContainsKey("get_width"))
				{
					m_functionCallCounts.Add("get_width", 0);
				}
				m_functionCallCounts["get_width"]++;

				return mSize.x;
			}
			set
			{
				if (m_functionCallCounts == null)
				{
					m_functionCallCounts = new Dictionary<string, int>();
				}
				if (!m_functionCallCounts.ContainsKey("set_width"))
				{
					m_functionCallCounts.Add("set_width", 0);
				}
				m_functionCallCounts["set_width"]++;

				mSize.x = value;
			}
		}

		public System.Single right
		{
			get
			{
				if (m_functionCallCounts == null)
				{
					m_functionCallCounts = new Dictionary<string, int>();
				}
				if (!m_functionCallCounts.ContainsKey("get_right"))
				{
					m_functionCallCounts.Add("get_right", 0);
				}
				m_functionCallCounts["get_right"]++;

				throw new NotImplementedException("This function was automatically generated by Mockery and has no real implementation yet.");
			}
		}

		public System.Single height
		{
			get
			{
				if (m_functionCallCounts == null)
				{
					m_functionCallCounts = new Dictionary<string, int>();
				}
				if (!m_functionCallCounts.ContainsKey("get_height"))
				{
					m_functionCallCounts.Add("get_height", 0);
				}
				m_functionCallCounts["get_height"]++;

				return mSize.y;
			}
			set
			{
				if (m_functionCallCounts == null)
				{
					m_functionCallCounts = new Dictionary<string, int>();
				}
				if (!m_functionCallCounts.ContainsKey("set_height"))
				{
					m_functionCallCounts.Add("set_height", 0);
				}
				m_functionCallCounts["set_height"]++;

				mSize.y = value;
			}
		}

		public System.Single xMax
		{
			get
			{
				if (m_functionCallCounts == null)
				{
					m_functionCallCounts = new Dictionary<string, int>();
				}
				if (!m_functionCallCounts.ContainsKey("get_xMax"))
				{
					m_functionCallCounts.Add("get_xMax", 0);
				}
				m_functionCallCounts["get_xMax"]++;

				return mTopLeft.x + mSize.x;
			}
			set
			{
				if (m_functionCallCounts == null)
				{
					m_functionCallCounts = new Dictionary<string, int>();
				}
				if (!m_functionCallCounts.ContainsKey("set_xMax"))
				{
					m_functionCallCounts.Add("set_xMax", 0);
				}

				mTopLeft.x = value - mSize.x;
			}
		}

		public System.Single top
		{
			get
			{
				if (m_functionCallCounts == null)
				{
					m_functionCallCounts = new Dictionary<string, int>();
				}
				if (!m_functionCallCounts.ContainsKey("get_top"))
				{
					m_functionCallCounts.Add("get_top", 0);
				}
				m_functionCallCounts["get_top"]++;

				throw new NotImplementedException("This function was automatically generated by Mockery and has no real implementation yet.");
			}
		}
	}
}
