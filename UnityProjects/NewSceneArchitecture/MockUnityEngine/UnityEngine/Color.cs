using System;
using System.Collections;
using System.Collections.Generic;
using System.Runtime.Serialization;


namespace UnityEngine
{
	[System.Reflection.DefaultMemberAttribute("")]
	public struct Color
	{
		private float mR;
		private float mG;
		private float mB;
		private float mA;

		public float r
		{
			get { return mR; }
			set { mR = value; }
		}
		public float g
		{
			get { return mG; }
			set { mG = value; }
		}
		public float b
		{
			get { return mB; }
			set { mB = value; }
		}
		public float a
		{
			get { return mA; }
			set { mA = value; }
		}

		public Color(float r, float g, float b, float a)
		{
			m_functionCallCounts = new Dictionary<string, int>();

			mR = r;
			mG = g;
			mB = b;
			mA = a;
		}

		public Color(float r, float g, float b)
			: this(r, g, b, 1.0f) { }



		// Mock data:
		private Dictionary<string, int> m_functionCallCounts;
		public Dictionary<string, int> FunctionCallCounts
		{
			get
			{
				if (m_functionCallCounts == null)
				{
					m_functionCallCounts = new Dictionary<string, int>();
				}
				return m_functionCallCounts;
			}
		}

		public override System.String ToString()
		{
			//Mock Data:
			if (m_functionCallCounts == null)
			{
				m_functionCallCounts = new Dictionary<string, int>();
			}
			if (!m_functionCallCounts.ContainsKey("System.String ToString()"))
			{
				m_functionCallCounts.Add("System.String ToString()", 0);
			}
			m_functionCallCounts["System.String ToString()"]++;

			throw new NotImplementedException("This function was automatically generated by Mockery and has no real implementation yet.");
		}

		public override System.Int32 GetHashCode()
		{
			//Mock Data:
			if (m_functionCallCounts == null)
			{
				m_functionCallCounts = new Dictionary<string, int>();
			}
			if (!m_functionCallCounts.ContainsKey("Int32 GetHashCode()"))
			{
				m_functionCallCounts.Add("Int32 GetHashCode()", 0);
			}
			m_functionCallCounts["Int32 GetHashCode()"]++;

			throw new NotImplementedException("This function was automatically generated by Mockery and has no real implementation yet.");
		}

		public override System.Boolean Equals(System.Object other)
		{
			//Mock Data:
			if (m_functionCallCounts == null)
			{
				m_functionCallCounts = new Dictionary<string, int>();
			}
			if (!m_functionCallCounts.ContainsKey("Boolean Equals(System.Object)"))
			{
				m_functionCallCounts.Add("Boolean Equals(System.Object)", 0);
			}
			m_functionCallCounts["Boolean Equals(System.Object)"]++;

			throw new NotImplementedException("This function was automatically generated by Mockery and has no real implementation yet.");
		}

		public static UnityEngine.Color Lerp(UnityEngine.Color a, UnityEngine.Color b, System.Single t)
		{
			throw new NotImplementedException("This function was automatically generated by Mockery and has no real implementation yet.");
		}

		public static UnityEngine.Color operator +(UnityEngine.Color a, UnityEngine.Color b)
		{
			throw new NotImplementedException("This function was automatically generated by Mockery and has no real implementation yet.");
		}

		public static UnityEngine.Color operator -(UnityEngine.Color a, UnityEngine.Color b)
		{
			throw new NotImplementedException("This function was automatically generated by Mockery and has no real implementation yet.");
		}

		public static UnityEngine.Color operator *(UnityEngine.Color a, UnityEngine.Color b)
		{
			throw new NotImplementedException("This function was automatically generated by Mockery and has no real implementation yet.");
		}

		public static UnityEngine.Color operator *(UnityEngine.Color a, System.Single b)
		{
			throw new NotImplementedException("This function was automatically generated by Mockery and has no real implementation yet.");
		}

		public static UnityEngine.Color operator *(System.Single b, UnityEngine.Color a)
		{
			throw new NotImplementedException("This function was automatically generated by Mockery and has no real implementation yet.");
		}

		public static UnityEngine.Color operator /(UnityEngine.Color a, System.Single b)
		{
			throw new NotImplementedException("This function was automatically generated by Mockery and has no real implementation yet.");
		}

		public static System.Boolean operator ==(UnityEngine.Color lhs, UnityEngine.Color rhs)
		{
			return lhs.r == rhs.r &&
					lhs.g == rhs.g &&
					lhs.b == rhs.b &&
					lhs.a == rhs.a;
		}

		public static System.Boolean operator !=(UnityEngine.Color lhs, UnityEngine.Color rhs)
		{
			throw new NotImplementedException("This function was automatically generated by Mockery and has no real implementation yet.");
		}

		public static implicit operator UnityEngine.Vector4(UnityEngine.Color c)
		{
			throw new NotImplementedException("This function was automatically generated by Mockery and has no real implementation yet.");
		}

		public static implicit operator UnityEngine.Color(UnityEngine.Vector4 v)
		{
			throw new NotImplementedException("This function was automatically generated by Mockery and has no real implementation yet.");
		}

		public static UnityEngine.Color cyan
		{
			get
			{
				return new Color(0.0f, 1.0f, 1.0f);
			}
		}

		public static UnityEngine.Color green
		{
			get
			{
				return new Color(0.0f, 1.0f, 0.0f);
			}
		}

		public static UnityEngine.Color white
		{
			get
			{
				return new Color(1.0f, 1.0f, 1.0f);
			}
		}

		public static UnityEngine.Color gray
		{
			get
			{
				throw new NotImplementedException("This function was automatically generated by Mockery and has no real implementation yet.");
			}
		}

		public static UnityEngine.Color red
		{
			get
			{
				return new Color(1.0f, 0.0f, 0.0f);
			}
		}

		public System.Single Item
		{
			get
			{
				if (m_functionCallCounts == null)
				{
					m_functionCallCounts = new Dictionary<string, int>();
				}
				if (!m_functionCallCounts.ContainsKey("get_Item"))
				{
					m_functionCallCounts.Add("get_Item", 0);
				}
				m_functionCallCounts["get_Item"]++;

				throw new NotImplementedException("This function was automatically generated by Mockery and has no real implementation yet.");
			}
			set
			{
				if (m_functionCallCounts == null)
				{
					m_functionCallCounts = new Dictionary<string, int>();
				}
				if (!m_functionCallCounts.ContainsKey("set_Item"))
				{
					m_functionCallCounts.Add("set_Item", 0);
				}
				m_functionCallCounts["set_Item"]++;

			}
		}

		public static UnityEngine.Color yellow
		{
			get
			{
				throw new NotImplementedException("This function was automatically generated by Mockery and has no real implementation yet.");
			}
		}

		public static UnityEngine.Color black
		{
			get
			{
				return new Color(0.0f, 0.0f, 0.0f);
			}
		}

		public static UnityEngine.Color grey
		{
			get
			{
				throw new NotImplementedException("This function was automatically generated by Mockery and has no real implementation yet.");
			}
		}

		public System.Single grayscale
		{
			get
			{
				if (m_functionCallCounts == null)
				{
					m_functionCallCounts = new Dictionary<string, int>();
				}
				if (!m_functionCallCounts.ContainsKey("get_grayscale"))
				{
					m_functionCallCounts.Add("get_grayscale", 0);
				}
				m_functionCallCounts["get_grayscale"]++;

				throw new NotImplementedException("This function was automatically generated by Mockery and has no real implementation yet.");
			}
		}

		public static UnityEngine.Color blue
		{
			get
			{
				throw new NotImplementedException("This function was automatically generated by Mockery and has no real implementation yet.");
			}
		}

		public static UnityEngine.Color clear
		{
			get
			{
				throw new NotImplementedException("This function was automatically generated by Mockery and has no real implementation yet.");
			}
		}

		public static UnityEngine.Color magenta
		{
			get
			{
				throw new NotImplementedException("This function was automatically generated by Mockery and has no real implementation yet.");
			}
		}
	}
}
