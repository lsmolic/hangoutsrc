using System;
using System.Collections;
using System.Collections.Generic;
using System.Runtime.Serialization;


namespace UnityEngine {
public class MonoBehaviour : UnityEngine.Behaviour {
	// Mock data:
	private Dictionary<string, int> m_functionCallCounts;
	public Dictionary<string, int> FunctionCallCounts {
		get { 
			if(m_functionCallCounts == null) {
				m_functionCallCounts = new Dictionary<string, int>();
			}
			return m_functionCallCounts;
		}
	}

	public void Invoke( System.String methodName, System.Single time ){
		//Mock Data:
		if(m_functionCallCounts == null) {
			m_functionCallCounts = new Dictionary<string, int>();
		}
		if(!m_functionCallCounts.ContainsKey( "Void Invoke(System.String, Single)" )){
			m_functionCallCounts.Add( "Void Invoke(System.String, Single)", 0 );
		}
		m_functionCallCounts["Void Invoke(System.String, Single)"]++;
			
	}

	public void InvokeRepeating( System.String methodName, System.Single time, System.Single repeatRate ){
		//Mock Data:
		if(m_functionCallCounts == null) {
			m_functionCallCounts = new Dictionary<string, int>();
		}
		if(!m_functionCallCounts.ContainsKey( "Void InvokeRepeating(System.String, Single, Single)" )){
			m_functionCallCounts.Add( "Void InvokeRepeating(System.String, Single, Single)", 0 );
		}
		m_functionCallCounts["Void InvokeRepeating(System.String, Single, Single)"]++;
			
	}

	public void CancelInvoke( ){
		//Mock Data:
		if(m_functionCallCounts == null) {
			m_functionCallCounts = new Dictionary<string, int>();
		}
		if(!m_functionCallCounts.ContainsKey( "Void CancelInvoke()" )){
			m_functionCallCounts.Add( "Void CancelInvoke()", 0 );
		}
		m_functionCallCounts["Void CancelInvoke()"]++;
			
	}

	public void CancelInvoke( System.String methodName ){
		//Mock Data:
		if(m_functionCallCounts == null) {
			m_functionCallCounts = new Dictionary<string, int>();
		}
		if(!m_functionCallCounts.ContainsKey( "Void CancelInvoke(System.String)" )){
			m_functionCallCounts.Add( "Void CancelInvoke(System.String)", 0 );
		}
		m_functionCallCounts["Void CancelInvoke(System.String)"]++;
			
	}

	public System.Boolean IsInvoking( System.String methodName ){
		//Mock Data:
		if(m_functionCallCounts == null) {
			m_functionCallCounts = new Dictionary<string, int>();
		}
		if(!m_functionCallCounts.ContainsKey( "Boolean IsInvoking(System.String)" )){
			m_functionCallCounts.Add( "Boolean IsInvoking(System.String)", 0 );
		}
		m_functionCallCounts["Boolean IsInvoking(System.String)"]++;
			
		throw new NotImplementedException("This function was automatically generated by Mockery and has no real implementation yet.");
	}

	public System.Boolean IsInvoking( ){
		//Mock Data:
		if(m_functionCallCounts == null) {
			m_functionCallCounts = new Dictionary<string, int>();
		}
		if(!m_functionCallCounts.ContainsKey( "Boolean IsInvoking()" )){
			m_functionCallCounts.Add( "Boolean IsInvoking()", 0 );
		}
		m_functionCallCounts["Boolean IsInvoking()"]++;
			
		throw new NotImplementedException("This function was automatically generated by Mockery and has no real implementation yet.");
	}

	public UnityEngine.Coroutine StartCoroutine( System.Collections.IEnumerator routine ){
		//Mock Data:
		if(m_functionCallCounts == null) {
			m_functionCallCounts = new Dictionary<string, int>();
		}
		if(!m_functionCallCounts.ContainsKey( "UnityEngine.Coroutine StartCoroutine(IEnumerator)" )){
			m_functionCallCounts.Add( "UnityEngine.Coroutine StartCoroutine(IEnumerator)", 0 );
		}
		m_functionCallCounts["UnityEngine.Coroutine StartCoroutine(IEnumerator)"]++;
			
		throw new NotImplementedException("This function was automatically generated by Mockery and has no real implementation yet.");
	}

	public UnityEngine.Coroutine StartCoroutine_Auto( System.Collections.IEnumerator routine ){
		//Mock Data:
		if(m_functionCallCounts == null) {
			m_functionCallCounts = new Dictionary<string, int>();
		}
		if(!m_functionCallCounts.ContainsKey( "UnityEngine.Coroutine StartCoroutine_Auto(IEnumerator)" )){
			m_functionCallCounts.Add( "UnityEngine.Coroutine StartCoroutine_Auto(IEnumerator)", 0 );
		}
		m_functionCallCounts["UnityEngine.Coroutine StartCoroutine_Auto(IEnumerator)"]++;
			
		throw new NotImplementedException("This function was automatically generated by Mockery and has no real implementation yet.");
	}

	public UnityEngine.Coroutine StartCoroutine( System.String methodName, System.Object value ){
		//Mock Data:
		if(m_functionCallCounts == null) {
			m_functionCallCounts = new Dictionary<string, int>();
		}
		if(!m_functionCallCounts.ContainsKey( "UnityEngine.Coroutine StartCoroutine(System.String, System.Object)" )){
			m_functionCallCounts.Add( "UnityEngine.Coroutine StartCoroutine(System.String, System.Object)", 0 );
		}
		m_functionCallCounts["UnityEngine.Coroutine StartCoroutine(System.String, System.Object)"]++;
			
		throw new NotImplementedException("This function was automatically generated by Mockery and has no real implementation yet.");
	}

	public UnityEngine.Coroutine StartCoroutine( System.String methodName ){
		//Mock Data:
		if(m_functionCallCounts == null) {
			m_functionCallCounts = new Dictionary<string, int>();
		}
		if(!m_functionCallCounts.ContainsKey( "UnityEngine.Coroutine StartCoroutine(System.String)" )){
			m_functionCallCounts.Add( "UnityEngine.Coroutine StartCoroutine(System.String)", 0 );
		}
		m_functionCallCounts["UnityEngine.Coroutine StartCoroutine(System.String)"]++;
			
		throw new NotImplementedException("This function was automatically generated by Mockery and has no real implementation yet.");
	}

	public void StopCoroutine( System.String methodName ){
		//Mock Data:
		if(m_functionCallCounts == null) {
			m_functionCallCounts = new Dictionary<string, int>();
		}
		if(!m_functionCallCounts.ContainsKey( "Void StopCoroutine(System.String)" )){
			m_functionCallCounts.Add( "Void StopCoroutine(System.String)", 0 );
		}
		m_functionCallCounts["Void StopCoroutine(System.String)"]++;
			
	}

	public void StopAllCoroutines( ){
		//Mock Data:
		if(m_functionCallCounts == null) {
			m_functionCallCounts = new Dictionary<string, int>();
		}
		if(!m_functionCallCounts.ContainsKey( "Void StopAllCoroutines()" )){
			m_functionCallCounts.Add( "Void StopAllCoroutines()", 0 );
		}
		m_functionCallCounts["Void StopAllCoroutines()"]++;
			
	}

	public static void print( System.Object o ){
	}

	public MonoBehaviour( ){
		//Mock Data:
			m_functionCallCounts = new Dictionary<string, int>();
		if(!m_functionCallCounts.ContainsKey( "Void .ctor()" )){
			m_functionCallCounts.Add( "Void .ctor()", 0 );
		}
		m_functionCallCounts["Void .ctor()"]++;
			
	}
}
}
