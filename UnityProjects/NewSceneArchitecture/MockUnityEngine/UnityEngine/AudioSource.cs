using System;
using System.Collections;
using System.Collections.Generic;
using System.Runtime.Serialization;


namespace UnityEngine {
public class AudioSource : UnityEngine.Behaviour {
	// Mock data:
	private Dictionary<string, int> m_functionCallCounts;
	public Dictionary<string, int> FunctionCallCounts {
		get { 
			if(m_functionCallCounts == null) {
				m_functionCallCounts = new Dictionary<string, int>();
			}
			return m_functionCallCounts;
		}
	}

	public void Play( ){
		//Mock Data:
		if(m_functionCallCounts == null) {
			m_functionCallCounts = new Dictionary<string, int>();
		}
		if(!m_functionCallCounts.ContainsKey( "Void Play()" )){
			m_functionCallCounts.Add( "Void Play()", 0 );
		}
		m_functionCallCounts["Void Play()"]++;
			
	}

	public void Stop( ){
		//Mock Data:
		if(m_functionCallCounts == null) {
			m_functionCallCounts = new Dictionary<string, int>();
		}
		if(!m_functionCallCounts.ContainsKey( "Void Stop()" )){
			m_functionCallCounts.Add( "Void Stop()", 0 );
		}
		m_functionCallCounts["Void Stop()"]++;
			
	}

	public void Pause( ){
		//Mock Data:
		if(m_functionCallCounts == null) {
			m_functionCallCounts = new Dictionary<string, int>();
		}
		if(!m_functionCallCounts.ContainsKey( "Void Pause()" )){
			m_functionCallCounts.Add( "Void Pause()", 0 );
		}
		m_functionCallCounts["Void Pause()"]++;
			
	}

	public void PlayOneShot( UnityEngine.AudioClip clip, System.Single volumeScale ){
		//Mock Data:
		if(m_functionCallCounts == null) {
			m_functionCallCounts = new Dictionary<string, int>();
		}
		if(!m_functionCallCounts.ContainsKey( "Void PlayOneShot(UnityEngine.AudioClip, Single)" )){
			m_functionCallCounts.Add( "Void PlayOneShot(UnityEngine.AudioClip, Single)", 0 );
		}
		m_functionCallCounts["Void PlayOneShot(UnityEngine.AudioClip, Single)"]++;
			
	}

	public void PlayOneShot( UnityEngine.AudioClip clip ){
		//Mock Data:
		if(m_functionCallCounts == null) {
			m_functionCallCounts = new Dictionary<string, int>();
		}
		if(!m_functionCallCounts.ContainsKey( "Void PlayOneShot(UnityEngine.AudioClip)" )){
			m_functionCallCounts.Add( "Void PlayOneShot(UnityEngine.AudioClip)", 0 );
		}
		m_functionCallCounts["Void PlayOneShot(UnityEngine.AudioClip)"]++;
			
	}

	public void SetExternalClip( UnityEngine.AudioFormat format, System.Int32 freq ){
		//Mock Data:
		if(m_functionCallCounts == null) {
			m_functionCallCounts = new Dictionary<string, int>();
		}
		if(!m_functionCallCounts.ContainsKey( "Void SetExternalClip(AudioFormat, Int32)" )){
			m_functionCallCounts.Add( "Void SetExternalClip(AudioFormat, Int32)", 0 );
		}
		m_functionCallCounts["Void SetExternalClip(AudioFormat, Int32)"]++;
			
	}

	public System.Boolean StreamBufferDataStrict( System.IntPtr data, System.Int32 size ){
		//Mock Data:
		if(m_functionCallCounts == null) {
			m_functionCallCounts = new Dictionary<string, int>();
		}
		if(!m_functionCallCounts.ContainsKey( "Boolean StreamBufferDataStrict(IntPtr, Int32)" )){
			m_functionCallCounts.Add( "Boolean StreamBufferDataStrict(IntPtr, Int32)", 0 );
		}
		m_functionCallCounts["Boolean StreamBufferDataStrict(IntPtr, Int32)"]++;
			
		throw new NotImplementedException("This function was automatically generated by Mockery and has no real implementation yet.");
	}

	public static void PlayClipAtPoint( UnityEngine.AudioClip clip, UnityEngine.Vector3 position ){
	}

	public static void PlayClipAtPoint( UnityEngine.AudioClip clip, UnityEngine.Vector3 position, System.Single volume ){
	}

	public AudioSource( ){
		//Mock Data:
			m_functionCallCounts = new Dictionary<string, int>();
		if(!m_functionCallCounts.ContainsKey( "Void .ctor()" )){
			m_functionCallCounts.Add( "Void .ctor()", 0 );
		}
		m_functionCallCounts["Void .ctor()"]++;
			
	}

	public System.Single time {
		get {
			if(m_functionCallCounts == null) {
				m_functionCallCounts = new Dictionary<string, int>();
			}
			if(!m_functionCallCounts.ContainsKey( "get_time" )){
				m_functionCallCounts.Add( "get_time", 0 );
			}
			m_functionCallCounts["get_time"]++;
			
			throw new NotImplementedException("This function was automatically generated by Mockery and has no real implementation yet.");
		}
		set {
			if(m_functionCallCounts == null) {
				m_functionCallCounts = new Dictionary<string, int>();
			}
			if(!m_functionCallCounts.ContainsKey( "set_time" )){
				m_functionCallCounts.Add( "set_time", 0 );
			}
			m_functionCallCounts["set_time"]++;
			
		}
	}

	public System.Single maxVolume {
		get {
			if(m_functionCallCounts == null) {
				m_functionCallCounts = new Dictionary<string, int>();
			}
			if(!m_functionCallCounts.ContainsKey( "get_maxVolume" )){
				m_functionCallCounts.Add( "get_maxVolume", 0 );
			}
			m_functionCallCounts["get_maxVolume"]++;
			
			throw new NotImplementedException("This function was automatically generated by Mockery and has no real implementation yet.");
		}
		set {
			if(m_functionCallCounts == null) {
				m_functionCallCounts = new Dictionary<string, int>();
			}
			if(!m_functionCallCounts.ContainsKey( "set_maxVolume" )){
				m_functionCallCounts.Add( "set_maxVolume", 0 );
			}
			m_functionCallCounts["set_maxVolume"]++;
			
		}
	}

	public UnityEngine.AudioClip clip {
		get {
			if(m_functionCallCounts == null) {
				m_functionCallCounts = new Dictionary<string, int>();
			}
			if(!m_functionCallCounts.ContainsKey( "get_clip" )){
				m_functionCallCounts.Add( "get_clip", 0 );
			}
			m_functionCallCounts["get_clip"]++;
			
			throw new NotImplementedException("This function was automatically generated by Mockery and has no real implementation yet.");
		}
		set {
			if(m_functionCallCounts == null) {
				m_functionCallCounts = new Dictionary<string, int>();
			}
			if(!m_functionCallCounts.ContainsKey( "set_clip" )){
				m_functionCallCounts.Add( "set_clip", 0 );
			}
			m_functionCallCounts["set_clip"]++;
			
		}
	}

	public System.Single rolloffFactor {
		get {
			if(m_functionCallCounts == null) {
				m_functionCallCounts = new Dictionary<string, int>();
			}
			if(!m_functionCallCounts.ContainsKey( "get_rolloffFactor" )){
				m_functionCallCounts.Add( "get_rolloffFactor", 0 );
			}
			m_functionCallCounts["get_rolloffFactor"]++;
			
			throw new NotImplementedException("This function was automatically generated by Mockery and has no real implementation yet.");
		}
		set {
			if(m_functionCallCounts == null) {
				m_functionCallCounts = new Dictionary<string, int>();
			}
			if(!m_functionCallCounts.ContainsKey( "set_rolloffFactor" )){
				m_functionCallCounts.Add( "set_rolloffFactor", 0 );
			}
			m_functionCallCounts["set_rolloffFactor"]++;
			
		}
	}

	public System.Boolean isPlaying {
		get {
			if(m_functionCallCounts == null) {
				m_functionCallCounts = new Dictionary<string, int>();
			}
			if(!m_functionCallCounts.ContainsKey( "get_isPlaying" )){
				m_functionCallCounts.Add( "get_isPlaying", 0 );
			}
			m_functionCallCounts["get_isPlaying"]++;
			
			throw new NotImplementedException("This function was automatically generated by Mockery and has no real implementation yet.");
		}
	}

	public System.Boolean loop {
		get {
			if(m_functionCallCounts == null) {
				m_functionCallCounts = new Dictionary<string, int>();
			}
			if(!m_functionCallCounts.ContainsKey( "get_loop" )){
				m_functionCallCounts.Add( "get_loop", 0 );
			}
			m_functionCallCounts["get_loop"]++;
			
			throw new NotImplementedException("This function was automatically generated by Mockery and has no real implementation yet.");
		}
		set {
			if(m_functionCallCounts == null) {
				m_functionCallCounts = new Dictionary<string, int>();
			}
			if(!m_functionCallCounts.ContainsKey( "set_loop" )){
				m_functionCallCounts.Add( "set_loop", 0 );
			}
			m_functionCallCounts["set_loop"]++;
			
		}
	}

	public System.Boolean ignoreListenerVolume {
		get {
			if(m_functionCallCounts == null) {
				m_functionCallCounts = new Dictionary<string, int>();
			}
			if(!m_functionCallCounts.ContainsKey( "get_ignoreListenerVolume" )){
				m_functionCallCounts.Add( "get_ignoreListenerVolume", 0 );
			}
			m_functionCallCounts["get_ignoreListenerVolume"]++;
			
			throw new NotImplementedException("This function was automatically generated by Mockery and has no real implementation yet.");
		}
		set {
			if(m_functionCallCounts == null) {
				m_functionCallCounts = new Dictionary<string, int>();
			}
			if(!m_functionCallCounts.ContainsKey( "set_ignoreListenerVolume" )){
				m_functionCallCounts.Add( "set_ignoreListenerVolume", 0 );
			}
			m_functionCallCounts["set_ignoreListenerVolume"]++;
			
		}
	}

	public System.Single pitch {
		get {
			if(m_functionCallCounts == null) {
				m_functionCallCounts = new Dictionary<string, int>();
			}
			if(!m_functionCallCounts.ContainsKey( "get_pitch" )){
				m_functionCallCounts.Add( "get_pitch", 0 );
			}
			m_functionCallCounts["get_pitch"]++;
			
			throw new NotImplementedException("This function was automatically generated by Mockery and has no real implementation yet.");
		}
		set {
			if(m_functionCallCounts == null) {
				m_functionCallCounts = new Dictionary<string, int>();
			}
			if(!m_functionCallCounts.ContainsKey( "set_pitch" )){
				m_functionCallCounts.Add( "set_pitch", 0 );
			}
			m_functionCallCounts["set_pitch"]++;
			
		}
	}

	public System.Single volume {
		get {
			if(m_functionCallCounts == null) {
				m_functionCallCounts = new Dictionary<string, int>();
			}
			if(!m_functionCallCounts.ContainsKey( "get_volume" )){
				m_functionCallCounts.Add( "get_volume", 0 );
			}
			m_functionCallCounts["get_volume"]++;
			
			throw new NotImplementedException("This function was automatically generated by Mockery and has no real implementation yet.");
		}
		set {
			if(m_functionCallCounts == null) {
				m_functionCallCounts = new Dictionary<string, int>();
			}
			if(!m_functionCallCounts.ContainsKey( "set_volume" )){
				m_functionCallCounts.Add( "set_volume", 0 );
			}
			m_functionCallCounts["set_volume"]++;
			
		}
	}

	public System.Single minVolume {
		get {
			if(m_functionCallCounts == null) {
				m_functionCallCounts = new Dictionary<string, int>();
			}
			if(!m_functionCallCounts.ContainsKey( "get_minVolume" )){
				m_functionCallCounts.Add( "get_minVolume", 0 );
			}
			m_functionCallCounts["get_minVolume"]++;
			
			throw new NotImplementedException("This function was automatically generated by Mockery and has no real implementation yet.");
		}
		set {
			if(m_functionCallCounts == null) {
				m_functionCallCounts = new Dictionary<string, int>();
			}
			if(!m_functionCallCounts.ContainsKey( "set_minVolume" )){
				m_functionCallCounts.Add( "set_minVolume", 0 );
			}
			m_functionCallCounts["set_minVolume"]++;
			
		}
	}

	public System.Boolean playOnAwake {
		get {
			if(m_functionCallCounts == null) {
				m_functionCallCounts = new Dictionary<string, int>();
			}
			if(!m_functionCallCounts.ContainsKey( "get_playOnAwake" )){
				m_functionCallCounts.Add( "get_playOnAwake", 0 );
			}
			m_functionCallCounts["get_playOnAwake"]++;
			
			throw new NotImplementedException("This function was automatically generated by Mockery and has no real implementation yet.");
		}
		set {
			if(m_functionCallCounts == null) {
				m_functionCallCounts = new Dictionary<string, int>();
			}
			if(!m_functionCallCounts.ContainsKey( "set_playOnAwake" )){
				m_functionCallCounts.Add( "set_playOnAwake", 0 );
			}
			m_functionCallCounts["set_playOnAwake"]++;
			
		}
	}

	public UnityEngine.AudioVelocityUpdateMode velocityUpdateMode {
		get {
			if(m_functionCallCounts == null) {
				m_functionCallCounts = new Dictionary<string, int>();
			}
			if(!m_functionCallCounts.ContainsKey( "get_velocityUpdateMode" )){
				m_functionCallCounts.Add( "get_velocityUpdateMode", 0 );
			}
			m_functionCallCounts["get_velocityUpdateMode"]++;
			
			throw new NotImplementedException("This function was automatically generated by Mockery and has no real implementation yet.");
		}
		set {
			if(m_functionCallCounts == null) {
				m_functionCallCounts = new Dictionary<string, int>();
			}
			if(!m_functionCallCounts.ContainsKey( "set_velocityUpdateMode" )){
				m_functionCallCounts.Add( "set_velocityUpdateMode", 0 );
			}
			m_functionCallCounts["set_velocityUpdateMode"]++;
			
		}
	}
}
}
