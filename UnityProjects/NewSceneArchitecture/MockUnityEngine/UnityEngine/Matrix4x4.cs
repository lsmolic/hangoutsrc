using System;
using System.Collections;
using System.Collections.Generic;
using System.Runtime.Serialization;


namespace UnityEngine {
[System.Reflection.DefaultMemberAttribute("")]
public struct Matrix4x4 {
	// Mock data:
	private Dictionary<string, int> m_functionCallCounts;
	public Dictionary<string, int> FunctionCallCounts {
		get { 
			if(m_functionCallCounts == null) {
				m_functionCallCounts = new Dictionary<string, int>();
			}
			return m_functionCallCounts;
		}
	}

	public override System.Int32 GetHashCode( ){
		//Mock Data:
		if(m_functionCallCounts == null) {
			m_functionCallCounts = new Dictionary<string, int>();
		}
		if(!m_functionCallCounts.ContainsKey( "Int32 GetHashCode()" )){
			m_functionCallCounts.Add( "Int32 GetHashCode()", 0 );
		}
		m_functionCallCounts["Int32 GetHashCode()"]++;
			
		throw new NotImplementedException("This function was automatically generated by Mockery and has no real implementation yet.");
	}

	public override System.Boolean Equals( System.Object other ){
		//Mock Data:
		if(m_functionCallCounts == null) {
			m_functionCallCounts = new Dictionary<string, int>();
		}
		if(!m_functionCallCounts.ContainsKey( "Boolean Equals(System.Object)" )){
			m_functionCallCounts.Add( "Boolean Equals(System.Object)", 0 );
		}
		m_functionCallCounts["Boolean Equals(System.Object)"]++;
			
		throw new NotImplementedException("This function was automatically generated by Mockery and has no real implementation yet.");
	}

	public static UnityEngine.Matrix4x4 Inverse( UnityEngine.Matrix4x4 m ){
		throw new NotImplementedException("This function was automatically generated by Mockery and has no real implementation yet.");
	}

	public static UnityEngine.Matrix4x4 Transpose( UnityEngine.Matrix4x4 m ){
		throw new NotImplementedException("This function was automatically generated by Mockery and has no real implementation yet.");
	}

	public UnityEngine.Vector4 GetColumn( System.Int32 i ){
		//Mock Data:
		if(m_functionCallCounts == null) {
			m_functionCallCounts = new Dictionary<string, int>();
		}
		if(!m_functionCallCounts.ContainsKey( "Vector4 GetColumn(Int32)" )){
			m_functionCallCounts.Add( "Vector4 GetColumn(Int32)", 0 );
		}
		m_functionCallCounts["Vector4 GetColumn(Int32)"]++;
			
		throw new NotImplementedException("This function was automatically generated by Mockery and has no real implementation yet.");
	}

	public UnityEngine.Vector4 GetRow( System.Int32 i ){
		//Mock Data:
		if(m_functionCallCounts == null) {
			m_functionCallCounts = new Dictionary<string, int>();
		}
		if(!m_functionCallCounts.ContainsKey( "Vector4 GetRow(Int32)" )){
			m_functionCallCounts.Add( "Vector4 GetRow(Int32)", 0 );
		}
		m_functionCallCounts["Vector4 GetRow(Int32)"]++;
			
		throw new NotImplementedException("This function was automatically generated by Mockery and has no real implementation yet.");
	}

	public void SetColumn( System.Int32 i, UnityEngine.Vector4 v ){
		//Mock Data:
		if(m_functionCallCounts == null) {
			m_functionCallCounts = new Dictionary<string, int>();
		}
		if(!m_functionCallCounts.ContainsKey( "Void SetColumn(Int32, Vector4)" )){
			m_functionCallCounts.Add( "Void SetColumn(Int32, Vector4)", 0 );
		}
		m_functionCallCounts["Void SetColumn(Int32, Vector4)"]++;
			
	}

	public void SetRow( System.Int32 i, UnityEngine.Vector4 v ){
		//Mock Data:
		if(m_functionCallCounts == null) {
			m_functionCallCounts = new Dictionary<string, int>();
		}
		if(!m_functionCallCounts.ContainsKey( "Void SetRow(Int32, Vector4)" )){
			m_functionCallCounts.Add( "Void SetRow(Int32, Vector4)", 0 );
		}
		m_functionCallCounts["Void SetRow(Int32, Vector4)"]++;
			
	}

	public UnityEngine.Vector3 MultiplyPoint( UnityEngine.Vector3 v ){
		//Mock Data:
		if(m_functionCallCounts == null) {
			m_functionCallCounts = new Dictionary<string, int>();
		}
		if(!m_functionCallCounts.ContainsKey( "Vector3 MultiplyPoint(Vector3)" )){
			m_functionCallCounts.Add( "Vector3 MultiplyPoint(Vector3)", 0 );
		}
		m_functionCallCounts["Vector3 MultiplyPoint(Vector3)"]++;
			
		throw new NotImplementedException("This function was automatically generated by Mockery and has no real implementation yet.");
	}

	public UnityEngine.Vector3 MultiplyPoint3x4( UnityEngine.Vector3 v ){
		//Mock Data:
		if(m_functionCallCounts == null) {
			m_functionCallCounts = new Dictionary<string, int>();
		}
		if(!m_functionCallCounts.ContainsKey( "Vector3 MultiplyPoint3x4(Vector3)" )){
			m_functionCallCounts.Add( "Vector3 MultiplyPoint3x4(Vector3)", 0 );
		}
		m_functionCallCounts["Vector3 MultiplyPoint3x4(Vector3)"]++;
			
		throw new NotImplementedException("This function was automatically generated by Mockery and has no real implementation yet.");
	}

	public UnityEngine.Vector3 MultiplyVector( UnityEngine.Vector3 v ){
		//Mock Data:
		if(m_functionCallCounts == null) {
			m_functionCallCounts = new Dictionary<string, int>();
		}
		if(!m_functionCallCounts.ContainsKey( "Vector3 MultiplyVector(Vector3)" )){
			m_functionCallCounts.Add( "Vector3 MultiplyVector(Vector3)", 0 );
		}
		m_functionCallCounts["Vector3 MultiplyVector(Vector3)"]++;
			
		throw new NotImplementedException("This function was automatically generated by Mockery and has no real implementation yet.");
	}

	public static UnityEngine.Matrix4x4 Scale( UnityEngine.Vector3 v ){
		throw new NotImplementedException("This function was automatically generated by Mockery and has no real implementation yet.");
	}

	public void SetTRS( UnityEngine.Vector3 pos, UnityEngine.Quaternion q, UnityEngine.Vector3 s ){
		//Mock Data:
		if(m_functionCallCounts == null) {
			m_functionCallCounts = new Dictionary<string, int>();
		}
		if(!m_functionCallCounts.ContainsKey( "Void SetTRS(Vector3, Quaternion, Vector3)" )){
			m_functionCallCounts.Add( "Void SetTRS(Vector3, Quaternion, Vector3)", 0 );
		}
		m_functionCallCounts["Void SetTRS(Vector3, Quaternion, Vector3)"]++;
			
	}

	public static UnityEngine.Matrix4x4 TRS( UnityEngine.Vector3 pos, UnityEngine.Quaternion q, UnityEngine.Vector3 s ){
		throw new NotImplementedException("This function was automatically generated by Mockery and has no real implementation yet.");
	}

	public override System.String ToString( ){
		//Mock Data:
		if(m_functionCallCounts == null) {
			m_functionCallCounts = new Dictionary<string, int>();
		}
		if(!m_functionCallCounts.ContainsKey( "System.String ToString()" )){
			m_functionCallCounts.Add( "System.String ToString()", 0 );
		}
		m_functionCallCounts["System.String ToString()"]++;
			
		throw new NotImplementedException("This function was automatically generated by Mockery and has no real implementation yet.");
	}

	public static UnityEngine.Matrix4x4 Ortho( System.Single left, System.Single right, System.Single bottom, System.Single top, System.Single zNear, System.Single zFar ){
		throw new NotImplementedException("This function was automatically generated by Mockery and has no real implementation yet.");
	}

	public static UnityEngine.Matrix4x4 Perspective( System.Single fov, System.Single aspect, System.Single zNear, System.Single zFar ){
		throw new NotImplementedException("This function was automatically generated by Mockery and has no real implementation yet.");
	}

	public static UnityEngine.Matrix4x4 operator *( UnityEngine.Matrix4x4 lhs, UnityEngine.Matrix4x4 rhs ){
		throw new NotImplementedException("This function was automatically generated by Mockery and has no real implementation yet.");
	}

	public static UnityEngine.Vector4 operator *( UnityEngine.Matrix4x4 lhs, UnityEngine.Vector4 v ){
		throw new NotImplementedException("This function was automatically generated by Mockery and has no real implementation yet.");
	}

	public static System.Boolean operator ==( UnityEngine.Matrix4x4 lhs, UnityEngine.Matrix4x4 rhs ){
		throw new NotImplementedException("This function was automatically generated by Mockery and has no real implementation yet.");
	}

	public static System.Boolean operator !=( UnityEngine.Matrix4x4 lhs, UnityEngine.Matrix4x4 rhs ){
		throw new NotImplementedException("This function was automatically generated by Mockery and has no real implementation yet.");
	}

	public System.Boolean isIdentity {
		get {
			if(m_functionCallCounts == null) {
				m_functionCallCounts = new Dictionary<string, int>();
			}
			if(!m_functionCallCounts.ContainsKey( "get_isIdentity" )){
				m_functionCallCounts.Add( "get_isIdentity", 0 );
			}
			m_functionCallCounts["get_isIdentity"]++;
			
			throw new NotImplementedException("This function was automatically generated by Mockery and has no real implementation yet.");
		}
	}

	public static UnityEngine.Matrix4x4 identity {
		get {
			throw new NotImplementedException("This function was automatically generated by Mockery and has no real implementation yet.");
		}
	}

	public System.Single Item {
		get {
			if(m_functionCallCounts == null) {
				m_functionCallCounts = new Dictionary<string, int>();
			}
			if(!m_functionCallCounts.ContainsKey( "get_Item" )){
				m_functionCallCounts.Add( "get_Item", 0 );
			}
			m_functionCallCounts["get_Item"]++;
			
			throw new NotImplementedException("This function was automatically generated by Mockery and has no real implementation yet.");
		}
		set {
			if(m_functionCallCounts == null) {
				m_functionCallCounts = new Dictionary<string, int>();
			}
			if(!m_functionCallCounts.ContainsKey( "set_Item" )){
				m_functionCallCounts.Add( "set_Item", 0 );
			}
			m_functionCallCounts["set_Item"]++;
			
		}
	}

	public static UnityEngine.Matrix4x4 zero {
		get {
			throw new NotImplementedException("This function was automatically generated by Mockery and has no real implementation yet.");
		}
	}

	public UnityEngine.Matrix4x4 inverse {
		get {
			if(m_functionCallCounts == null) {
				m_functionCallCounts = new Dictionary<string, int>();
			}
			if(!m_functionCallCounts.ContainsKey( "get_inverse" )){
				m_functionCallCounts.Add( "get_inverse", 0 );
			}
			m_functionCallCounts["get_inverse"]++;
			
			throw new NotImplementedException("This function was automatically generated by Mockery and has no real implementation yet.");
		}
	}

	public UnityEngine.Matrix4x4 transpose {
		get {
			if(m_functionCallCounts == null) {
				m_functionCallCounts = new Dictionary<string, int>();
			}
			if(!m_functionCallCounts.ContainsKey( "get_transpose" )){
				m_functionCallCounts.Add( "get_transpose", 0 );
			}
			m_functionCallCounts["get_transpose"]++;
			
			throw new NotImplementedException("This function was automatically generated by Mockery and has no real implementation yet.");
		}
	}
}
}
