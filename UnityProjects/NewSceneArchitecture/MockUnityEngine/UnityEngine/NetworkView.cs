using System;
using System.Collections;
using System.Collections.Generic;
using System.Runtime.Serialization;


namespace UnityEngine {
public class NetworkView : UnityEngine.Behaviour {
	// Mock data:
	private Dictionary<string, int> m_functionCallCounts;
	public Dictionary<string, int> FunctionCallCounts {
		get { 
			if(m_functionCallCounts == null) {
				m_functionCallCounts = new Dictionary<string, int>();
			}
			return m_functionCallCounts;
		}
	}

	public void RPC( System.String name, UnityEngine.RPCMode mode, System.Object[] args ){
		//Mock Data:
		if(m_functionCallCounts == null) {
			m_functionCallCounts = new Dictionary<string, int>();
		}
		if(!m_functionCallCounts.ContainsKey( "Void RPC(System.String, RPCMode, System.Object[])" )){
			m_functionCallCounts.Add( "Void RPC(System.String, RPCMode, System.Object[])", 0 );
		}
		m_functionCallCounts["Void RPC(System.String, RPCMode, System.Object[])"]++;
			
	}

	public void RPC( System.String name, UnityEngine.NetworkPlayer target, System.Object[] args ){
		//Mock Data:
		if(m_functionCallCounts == null) {
			m_functionCallCounts = new Dictionary<string, int>();
		}
		if(!m_functionCallCounts.ContainsKey( "Void RPC(System.String, NetworkPlayer, System.Object[])" )){
			m_functionCallCounts.Add( "Void RPC(System.String, NetworkPlayer, System.Object[])", 0 );
		}
		m_functionCallCounts["Void RPC(System.String, NetworkPlayer, System.Object[])"]++;
			
	}

	public System.Boolean SetScope( UnityEngine.NetworkPlayer player, System.Boolean relevancy ){
		//Mock Data:
		if(m_functionCallCounts == null) {
			m_functionCallCounts = new Dictionary<string, int>();
		}
		if(!m_functionCallCounts.ContainsKey( "Boolean SetScope(NetworkPlayer, Boolean)" )){
			m_functionCallCounts.Add( "Boolean SetScope(NetworkPlayer, Boolean)", 0 );
		}
		m_functionCallCounts["Boolean SetScope(NetworkPlayer, Boolean)"]++;
			
		throw new NotImplementedException("This function was automatically generated by Mockery and has no real implementation yet.");
	}

	public static UnityEngine.NetworkView Find( UnityEngine.NetworkViewID viewID ){
		throw new NotImplementedException("This function was automatically generated by Mockery and has no real implementation yet.");
	}

	public NetworkView( ){
		//Mock Data:
			m_functionCallCounts = new Dictionary<string, int>();
		if(!m_functionCallCounts.ContainsKey( "Void .ctor()" )){
			m_functionCallCounts.Add( "Void .ctor()", 0 );
		}
		m_functionCallCounts["Void .ctor()"]++;
			
	}

	public UnityEngine.NetworkViewID viewID {
		get {
			if(m_functionCallCounts == null) {
				m_functionCallCounts = new Dictionary<string, int>();
			}
			if(!m_functionCallCounts.ContainsKey( "get_viewID" )){
				m_functionCallCounts.Add( "get_viewID", 0 );
			}
			m_functionCallCounts["get_viewID"]++;
			
			throw new NotImplementedException("This function was automatically generated by Mockery and has no real implementation yet.");
		}
		set {
			if(m_functionCallCounts == null) {
				m_functionCallCounts = new Dictionary<string, int>();
			}
			if(!m_functionCallCounts.ContainsKey( "set_viewID" )){
				m_functionCallCounts.Add( "set_viewID", 0 );
			}
			m_functionCallCounts["set_viewID"]++;
			
		}
	}

	public UnityEngine.Component observed {
		get {
			if(m_functionCallCounts == null) {
				m_functionCallCounts = new Dictionary<string, int>();
			}
			if(!m_functionCallCounts.ContainsKey( "get_observed" )){
				m_functionCallCounts.Add( "get_observed", 0 );
			}
			m_functionCallCounts["get_observed"]++;
			
			throw new NotImplementedException("This function was automatically generated by Mockery and has no real implementation yet.");
		}
		set {
			if(m_functionCallCounts == null) {
				m_functionCallCounts = new Dictionary<string, int>();
			}
			if(!m_functionCallCounts.ContainsKey( "set_observed" )){
				m_functionCallCounts.Add( "set_observed", 0 );
			}
			m_functionCallCounts["set_observed"]++;
			
		}
	}

	public UnityEngine.NetworkPlayer owner {
		get {
			if(m_functionCallCounts == null) {
				m_functionCallCounts = new Dictionary<string, int>();
			}
			if(!m_functionCallCounts.ContainsKey( "get_owner" )){
				m_functionCallCounts.Add( "get_owner", 0 );
			}
			m_functionCallCounts["get_owner"]++;
			
			throw new NotImplementedException("This function was automatically generated by Mockery and has no real implementation yet.");
		}
	}

	public System.Boolean isMine {
		get {
			if(m_functionCallCounts == null) {
				m_functionCallCounts = new Dictionary<string, int>();
			}
			if(!m_functionCallCounts.ContainsKey( "get_isMine" )){
				m_functionCallCounts.Add( "get_isMine", 0 );
			}
			m_functionCallCounts["get_isMine"]++;
			
			throw new NotImplementedException("This function was automatically generated by Mockery and has no real implementation yet.");
		}
	}

	public System.Int32 group {
		get {
			if(m_functionCallCounts == null) {
				m_functionCallCounts = new Dictionary<string, int>();
			}
			if(!m_functionCallCounts.ContainsKey( "get_group" )){
				m_functionCallCounts.Add( "get_group", 0 );
			}
			m_functionCallCounts["get_group"]++;
			
			throw new NotImplementedException("This function was automatically generated by Mockery and has no real implementation yet.");
		}
		set {
			if(m_functionCallCounts == null) {
				m_functionCallCounts = new Dictionary<string, int>();
			}
			if(!m_functionCallCounts.ContainsKey( "set_group" )){
				m_functionCallCounts.Add( "set_group", 0 );
			}
			m_functionCallCounts["set_group"]++;
			
		}
	}

	public UnityEngine.NetworkStateSynchronization stateSynchronization {
		get {
			if(m_functionCallCounts == null) {
				m_functionCallCounts = new Dictionary<string, int>();
			}
			if(!m_functionCallCounts.ContainsKey( "get_stateSynchronization" )){
				m_functionCallCounts.Add( "get_stateSynchronization", 0 );
			}
			m_functionCallCounts["get_stateSynchronization"]++;
			
			throw new NotImplementedException("This function was automatically generated by Mockery and has no real implementation yet.");
		}
		set {
			if(m_functionCallCounts == null) {
				m_functionCallCounts = new Dictionary<string, int>();
			}
			if(!m_functionCallCounts.ContainsKey( "set_stateSynchronization" )){
				m_functionCallCounts.Add( "set_stateSynchronization", 0 );
			}
			m_functionCallCounts["set_stateSynchronization"]++;
			
		}
	}
}
}
