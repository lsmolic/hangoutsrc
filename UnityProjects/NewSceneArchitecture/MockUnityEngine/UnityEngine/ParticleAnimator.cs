using System;
using System.Collections;
using System.Collections.Generic;
using System.Runtime.Serialization;


namespace UnityEngine {
public class ParticleAnimator : UnityEngine.Component {
	// Mock data:
	private Dictionary<string, int> m_functionCallCounts;
	public Dictionary<string, int> FunctionCallCounts {
		get { 
			if(m_functionCallCounts == null) {
				m_functionCallCounts = new Dictionary<string, int>();
			}
			return m_functionCallCounts;
		}
	}

	public ParticleAnimator( ){
		//Mock Data:
			m_functionCallCounts = new Dictionary<string, int>();
		if(!m_functionCallCounts.ContainsKey( "Void .ctor()" )){
			m_functionCallCounts.Add( "Void .ctor()", 0 );
		}
		m_functionCallCounts["Void .ctor()"]++;
			
	}

	public System.Single sizeGrow {
		get {
			if(m_functionCallCounts == null) {
				m_functionCallCounts = new Dictionary<string, int>();
			}
			if(!m_functionCallCounts.ContainsKey( "get_sizeGrow" )){
				m_functionCallCounts.Add( "get_sizeGrow", 0 );
			}
			m_functionCallCounts["get_sizeGrow"]++;
			
			throw new NotImplementedException("This function was automatically generated by Mockery and has no real implementation yet.");
		}
		set {
			if(m_functionCallCounts == null) {
				m_functionCallCounts = new Dictionary<string, int>();
			}
			if(!m_functionCallCounts.ContainsKey( "set_sizeGrow" )){
				m_functionCallCounts.Add( "set_sizeGrow", 0 );
			}
			m_functionCallCounts["set_sizeGrow"]++;
			
		}
	}

	public System.Boolean autodestruct {
		get {
			if(m_functionCallCounts == null) {
				m_functionCallCounts = new Dictionary<string, int>();
			}
			if(!m_functionCallCounts.ContainsKey( "get_autodestruct" )){
				m_functionCallCounts.Add( "get_autodestruct", 0 );
			}
			m_functionCallCounts["get_autodestruct"]++;
			
			throw new NotImplementedException("This function was automatically generated by Mockery and has no real implementation yet.");
		}
		set {
			if(m_functionCallCounts == null) {
				m_functionCallCounts = new Dictionary<string, int>();
			}
			if(!m_functionCallCounts.ContainsKey( "set_autodestruct" )){
				m_functionCallCounts.Add( "set_autodestruct", 0 );
			}
			m_functionCallCounts["set_autodestruct"]++;
			
		}
	}

	public UnityEngine.Vector3 worldRotationAxis {
		get {
			if(m_functionCallCounts == null) {
				m_functionCallCounts = new Dictionary<string, int>();
			}
			if(!m_functionCallCounts.ContainsKey( "get_worldRotationAxis" )){
				m_functionCallCounts.Add( "get_worldRotationAxis", 0 );
			}
			m_functionCallCounts["get_worldRotationAxis"]++;
			
			throw new NotImplementedException("This function was automatically generated by Mockery and has no real implementation yet.");
		}
		set {
			if(m_functionCallCounts == null) {
				m_functionCallCounts = new Dictionary<string, int>();
			}
			if(!m_functionCallCounts.ContainsKey( "set_worldRotationAxis" )){
				m_functionCallCounts.Add( "set_worldRotationAxis", 0 );
			}
			m_functionCallCounts["set_worldRotationAxis"]++;
			
		}
	}

	public System.Boolean doesAnimateColor {
		get {
			if(m_functionCallCounts == null) {
				m_functionCallCounts = new Dictionary<string, int>();
			}
			if(!m_functionCallCounts.ContainsKey( "get_doesAnimateColor" )){
				m_functionCallCounts.Add( "get_doesAnimateColor", 0 );
			}
			m_functionCallCounts["get_doesAnimateColor"]++;
			
			throw new NotImplementedException("This function was automatically generated by Mockery and has no real implementation yet.");
		}
		set {
			if(m_functionCallCounts == null) {
				m_functionCallCounts = new Dictionary<string, int>();
			}
			if(!m_functionCallCounts.ContainsKey( "set_doesAnimateColor" )){
				m_functionCallCounts.Add( "set_doesAnimateColor", 0 );
			}
			m_functionCallCounts["set_doesAnimateColor"]++;
			
		}
	}

	public UnityEngine.Vector3 localRotationAxis {
		get {
			if(m_functionCallCounts == null) {
				m_functionCallCounts = new Dictionary<string, int>();
			}
			if(!m_functionCallCounts.ContainsKey( "get_localRotationAxis" )){
				m_functionCallCounts.Add( "get_localRotationAxis", 0 );
			}
			m_functionCallCounts["get_localRotationAxis"]++;
			
			throw new NotImplementedException("This function was automatically generated by Mockery and has no real implementation yet.");
		}
		set {
			if(m_functionCallCounts == null) {
				m_functionCallCounts = new Dictionary<string, int>();
			}
			if(!m_functionCallCounts.ContainsKey( "set_localRotationAxis" )){
				m_functionCallCounts.Add( "set_localRotationAxis", 0 );
			}
			m_functionCallCounts["set_localRotationAxis"]++;
			
		}
	}

	public UnityEngine.Vector3 rndForce {
		get {
			if(m_functionCallCounts == null) {
				m_functionCallCounts = new Dictionary<string, int>();
			}
			if(!m_functionCallCounts.ContainsKey( "get_rndForce" )){
				m_functionCallCounts.Add( "get_rndForce", 0 );
			}
			m_functionCallCounts["get_rndForce"]++;
			
			throw new NotImplementedException("This function was automatically generated by Mockery and has no real implementation yet.");
		}
		set {
			if(m_functionCallCounts == null) {
				m_functionCallCounts = new Dictionary<string, int>();
			}
			if(!m_functionCallCounts.ContainsKey( "set_rndForce" )){
				m_functionCallCounts.Add( "set_rndForce", 0 );
			}
			m_functionCallCounts["set_rndForce"]++;
			
		}
	}

	public UnityEngine.Color[] colorAnimation {
		get {
			if(m_functionCallCounts == null) {
				m_functionCallCounts = new Dictionary<string, int>();
			}
			if(!m_functionCallCounts.ContainsKey( "get_colorAnimation" )){
				m_functionCallCounts.Add( "get_colorAnimation", 0 );
			}
			m_functionCallCounts["get_colorAnimation"]++;
			
			throw new NotImplementedException("This function was automatically generated by Mockery and has no real implementation yet.");
		}
		set {
			if(m_functionCallCounts == null) {
				m_functionCallCounts = new Dictionary<string, int>();
			}
			if(!m_functionCallCounts.ContainsKey( "set_colorAnimation" )){
				m_functionCallCounts.Add( "set_colorAnimation", 0 );
			}
			m_functionCallCounts["set_colorAnimation"]++;
			
		}
	}

	public System.Single damping {
		get {
			if(m_functionCallCounts == null) {
				m_functionCallCounts = new Dictionary<string, int>();
			}
			if(!m_functionCallCounts.ContainsKey( "get_damping" )){
				m_functionCallCounts.Add( "get_damping", 0 );
			}
			m_functionCallCounts["get_damping"]++;
			
			throw new NotImplementedException("This function was automatically generated by Mockery and has no real implementation yet.");
		}
		set {
			if(m_functionCallCounts == null) {
				m_functionCallCounts = new Dictionary<string, int>();
			}
			if(!m_functionCallCounts.ContainsKey( "set_damping" )){
				m_functionCallCounts.Add( "set_damping", 0 );
			}
			m_functionCallCounts["set_damping"]++;
			
		}
	}

	public UnityEngine.Vector3 force {
		get {
			if(m_functionCallCounts == null) {
				m_functionCallCounts = new Dictionary<string, int>();
			}
			if(!m_functionCallCounts.ContainsKey( "get_force" )){
				m_functionCallCounts.Add( "get_force", 0 );
			}
			m_functionCallCounts["get_force"]++;
			
			throw new NotImplementedException("This function was automatically generated by Mockery and has no real implementation yet.");
		}
		set {
			if(m_functionCallCounts == null) {
				m_functionCallCounts = new Dictionary<string, int>();
			}
			if(!m_functionCallCounts.ContainsKey( "set_force" )){
				m_functionCallCounts.Add( "set_force", 0 );
			}
			m_functionCallCounts["set_force"]++;
			
		}
	}
}
}
