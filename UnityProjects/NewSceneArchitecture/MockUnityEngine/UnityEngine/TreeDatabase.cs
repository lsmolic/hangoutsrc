using System;
using System.Collections;
using System.Collections.Generic;
using System.Runtime.Serialization;


namespace UnityEngineInternal {
public class TreeDatabase {
	// Mock data:
	private Dictionary<string, int> m_functionCallCounts;
	public Dictionary<string, int> FunctionCallCounts {
		get { 
			if(m_functionCallCounts == null) {
				m_functionCallCounts = new Dictionary<string, int>();
			}
			return m_functionCallCounts;
		}
	}

	public void Cleanup( ){
		//Mock Data:
		if(m_functionCallCounts == null) {
			m_functionCallCounts = new Dictionary<string, int>();
		}
		if(!m_functionCallCounts.ContainsKey( "Void Cleanup()" )){
			m_functionCallCounts.Add( "Void Cleanup()", 0 );
		}
		m_functionCallCounts["Void Cleanup()"]++;
			
	}

	public void RefreshInstances( ){
		//Mock Data:
		if(m_functionCallCounts == null) {
			m_functionCallCounts = new Dictionary<string, int>();
		}
		if(!m_functionCallCounts.ContainsKey( "Void RefreshInstances()" )){
			m_functionCallCounts.Add( "Void RefreshInstances()", 0 );
		}
		m_functionCallCounts["Void RefreshInstances()"]++;
			
	}

	public void AddTree( UnityEngine.TreeInstance tree ){
		//Mock Data:
		if(m_functionCallCounts == null) {
			m_functionCallCounts = new Dictionary<string, int>();
		}
		if(!m_functionCallCounts.ContainsKey( "Void AddTree(TreeInstance)" )){
			m_functionCallCounts.Add( "Void AddTree(TreeInstance)", 0 );
		}
		m_functionCallCounts["Void AddTree(TreeInstance)"]++;
			
	}

	public System.Int32 RemoveTrees( UnityEngine.Vector2 position, System.Single radius, System.Int32 prototypeIndex ){
		//Mock Data:
		if(m_functionCallCounts == null) {
			m_functionCallCounts = new Dictionary<string, int>();
		}
		if(!m_functionCallCounts.ContainsKey( "Int32 RemoveTrees(Vector2, Single, Int32)" )){
			m_functionCallCounts.Add( "Int32 RemoveTrees(Vector2, Single, Int32)", 0 );
		}
		m_functionCallCounts["Int32 RemoveTrees(Vector2, Single, Int32)"]++;
			
		throw new NotImplementedException("This function was automatically generated by Mockery and has no real implementation yet.");
	}

	public System.Single GetPrototypeWidth( System.Int32 index ){
		//Mock Data:
		if(m_functionCallCounts == null) {
			m_functionCallCounts = new Dictionary<string, int>();
		}
		if(!m_functionCallCounts.ContainsKey( "Single GetPrototypeWidth(Int32)" )){
			m_functionCallCounts.Add( "Single GetPrototypeWidth(Int32)", 0 );
		}
		m_functionCallCounts["Single GetPrototypeWidth(Int32)"]++;
			
		throw new NotImplementedException("This function was automatically generated by Mockery and has no real implementation yet.");
	}

	public void RefreshPrototypes( ){
		//Mock Data:
		if(m_functionCallCounts == null) {
			m_functionCallCounts = new Dictionary<string, int>();
		}
		if(!m_functionCallCounts.ContainsKey( "Void RefreshPrototypes()" )){
			m_functionCallCounts.Add( "Void RefreshPrototypes()", 0 );
		}
		m_functionCallCounts["Void RefreshPrototypes()"]++;
			
	}

	public UnityEngine.Vector3 GetPosition( UnityEngine.TreeInstance instance ){
		//Mock Data:
		if(m_functionCallCounts == null) {
			m_functionCallCounts = new Dictionary<string, int>();
		}
		if(!m_functionCallCounts.ContainsKey( "Vector3 GetPosition(TreeInstance)" )){
			m_functionCallCounts.Add( "Vector3 GetPosition(TreeInstance)", 0 );
		}
		m_functionCallCounts["Vector3 GetPosition(TreeInstance)"]++;
			
		throw new NotImplementedException("This function was automatically generated by Mockery and has no real implementation yet.");
	}

	public TreeDatabase( UnityEngine.TerrainData source ){
		//Mock Data:
			m_functionCallCounts = new Dictionary<string, int>();
		if(!m_functionCallCounts.ContainsKey( "Void .ctor(TerrainData)" )){
			m_functionCallCounts.Add( "Void .ctor(TerrainData)", 0 );
		}
		m_functionCallCounts["Void .ctor(TerrainData)"]++;
			
	}

	public Prototype[] prototypes {
		get {
			if(m_functionCallCounts == null) {
				m_functionCallCounts = new Dictionary<string, int>();
			}
			if(!m_functionCallCounts.ContainsKey( "get_prototypes" )){
				m_functionCallCounts.Add( "get_prototypes", 0 );
			}
			m_functionCallCounts["get_prototypes"]++;
			
			throw new NotImplementedException("This function was automatically generated by Mockery and has no real implementation yet.");
		}
	}

	public UnityEngine.TerrainData terrainData {
		get {
			if(m_functionCallCounts == null) {
				m_functionCallCounts = new Dictionary<string, int>();
			}
			if(!m_functionCallCounts.ContainsKey( "get_terrainData" )){
				m_functionCallCounts.Add( "get_terrainData", 0 );
			}
			m_functionCallCounts["get_terrainData"]++;
			
			throw new NotImplementedException("This function was automatically generated by Mockery and has no real implementation yet.");
		}
	}
}
}
