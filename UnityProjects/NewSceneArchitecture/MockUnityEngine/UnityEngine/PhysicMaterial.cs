using System;
using System.Collections;
using System.Collections.Generic;
using System.Runtime.Serialization;


namespace UnityEngine {
public class PhysicMaterial : UnityEngine.Object {
	// Mock data:
	private Dictionary<string, int> m_functionCallCounts;
	public Dictionary<string, int> FunctionCallCounts {
		get { 
			if(m_functionCallCounts == null) {
				m_functionCallCounts = new Dictionary<string, int>();
			}
			return m_functionCallCounts;
		}
	}

	public PhysicMaterial( ){
		//Mock Data:
			m_functionCallCounts = new Dictionary<string, int>();
		if(!m_functionCallCounts.ContainsKey( "Void .ctor()" )){
			m_functionCallCounts.Add( "Void .ctor()", 0 );
		}
		m_functionCallCounts["Void .ctor()"]++;
			
	}

	public PhysicMaterial( System.String name ){
		//Mock Data:
			m_functionCallCounts = new Dictionary<string, int>();
		if(!m_functionCallCounts.ContainsKey( "Void .ctor(String)" )){
			m_functionCallCounts.Add( "Void .ctor(String)", 0 );
		}
		m_functionCallCounts["Void .ctor(String)"]++;
			
	}

	public System.Single staticFriction {
		get {
			if(m_functionCallCounts == null) {
				m_functionCallCounts = new Dictionary<string, int>();
			}
			if(!m_functionCallCounts.ContainsKey( "get_staticFriction" )){
				m_functionCallCounts.Add( "get_staticFriction", 0 );
			}
			m_functionCallCounts["get_staticFriction"]++;
			
			throw new NotImplementedException("This function was automatically generated by Mockery and has no real implementation yet.");
		}
		set {
			if(m_functionCallCounts == null) {
				m_functionCallCounts = new Dictionary<string, int>();
			}
			if(!m_functionCallCounts.ContainsKey( "set_staticFriction" )){
				m_functionCallCounts.Add( "set_staticFriction", 0 );
			}
			m_functionCallCounts["set_staticFriction"]++;
			
		}
	}

	public UnityEngine.PhysicMaterialCombine frictionCombine {
		get {
			if(m_functionCallCounts == null) {
				m_functionCallCounts = new Dictionary<string, int>();
			}
			if(!m_functionCallCounts.ContainsKey( "get_frictionCombine" )){
				m_functionCallCounts.Add( "get_frictionCombine", 0 );
			}
			m_functionCallCounts["get_frictionCombine"]++;
			
			throw new NotImplementedException("This function was automatically generated by Mockery and has no real implementation yet.");
		}
		set {
			if(m_functionCallCounts == null) {
				m_functionCallCounts = new Dictionary<string, int>();
			}
			if(!m_functionCallCounts.ContainsKey( "set_frictionCombine" )){
				m_functionCallCounts.Add( "set_frictionCombine", 0 );
			}
			m_functionCallCounts["set_frictionCombine"]++;
			
		}
	}

	public System.Single dynamicFriction2 {
		get {
			if(m_functionCallCounts == null) {
				m_functionCallCounts = new Dictionary<string, int>();
			}
			if(!m_functionCallCounts.ContainsKey( "get_dynamicFriction2" )){
				m_functionCallCounts.Add( "get_dynamicFriction2", 0 );
			}
			m_functionCallCounts["get_dynamicFriction2"]++;
			
			throw new NotImplementedException("This function was automatically generated by Mockery and has no real implementation yet.");
		}
		set {
			if(m_functionCallCounts == null) {
				m_functionCallCounts = new Dictionary<string, int>();
			}
			if(!m_functionCallCounts.ContainsKey( "set_dynamicFriction2" )){
				m_functionCallCounts.Add( "set_dynamicFriction2", 0 );
			}
			m_functionCallCounts["set_dynamicFriction2"]++;
			
		}
	}

	public UnityEngine.Vector3 frictionDirection2 {
		get {
			if(m_functionCallCounts == null) {
				m_functionCallCounts = new Dictionary<string, int>();
			}
			if(!m_functionCallCounts.ContainsKey( "get_frictionDirection2" )){
				m_functionCallCounts.Add( "get_frictionDirection2", 0 );
			}
			m_functionCallCounts["get_frictionDirection2"]++;
			
			throw new NotImplementedException("This function was automatically generated by Mockery and has no real implementation yet.");
		}
		set {
			if(m_functionCallCounts == null) {
				m_functionCallCounts = new Dictionary<string, int>();
			}
			if(!m_functionCallCounts.ContainsKey( "set_frictionDirection2" )){
				m_functionCallCounts.Add( "set_frictionDirection2", 0 );
			}
			m_functionCallCounts["set_frictionDirection2"]++;
			
		}
	}

	public UnityEngine.PhysicMaterialCombine bounceCombine {
		get {
			if(m_functionCallCounts == null) {
				m_functionCallCounts = new Dictionary<string, int>();
			}
			if(!m_functionCallCounts.ContainsKey( "get_bounceCombine" )){
				m_functionCallCounts.Add( "get_bounceCombine", 0 );
			}
			m_functionCallCounts["get_bounceCombine"]++;
			
			throw new NotImplementedException("This function was automatically generated by Mockery and has no real implementation yet.");
		}
		set {
			if(m_functionCallCounts == null) {
				m_functionCallCounts = new Dictionary<string, int>();
			}
			if(!m_functionCallCounts.ContainsKey( "set_bounceCombine" )){
				m_functionCallCounts.Add( "set_bounceCombine", 0 );
			}
			m_functionCallCounts["set_bounceCombine"]++;
			
		}
	}

	public UnityEngine.Vector3 frictionDirection {
		get {
			if(m_functionCallCounts == null) {
				m_functionCallCounts = new Dictionary<string, int>();
			}
			if(!m_functionCallCounts.ContainsKey( "get_frictionDirection" )){
				m_functionCallCounts.Add( "get_frictionDirection", 0 );
			}
			m_functionCallCounts["get_frictionDirection"]++;
			
			throw new NotImplementedException("This function was automatically generated by Mockery and has no real implementation yet.");
		}
		set {
			if(m_functionCallCounts == null) {
				m_functionCallCounts = new Dictionary<string, int>();
			}
			if(!m_functionCallCounts.ContainsKey( "set_frictionDirection" )){
				m_functionCallCounts.Add( "set_frictionDirection", 0 );
			}
			m_functionCallCounts["set_frictionDirection"]++;
			
		}
	}

	public System.Single dynamicFriction {
		get {
			if(m_functionCallCounts == null) {
				m_functionCallCounts = new Dictionary<string, int>();
			}
			if(!m_functionCallCounts.ContainsKey( "get_dynamicFriction" )){
				m_functionCallCounts.Add( "get_dynamicFriction", 0 );
			}
			m_functionCallCounts["get_dynamicFriction"]++;
			
			throw new NotImplementedException("This function was automatically generated by Mockery and has no real implementation yet.");
		}
		set {
			if(m_functionCallCounts == null) {
				m_functionCallCounts = new Dictionary<string, int>();
			}
			if(!m_functionCallCounts.ContainsKey( "set_dynamicFriction" )){
				m_functionCallCounts.Add( "set_dynamicFriction", 0 );
			}
			m_functionCallCounts["set_dynamicFriction"]++;
			
		}
	}

	public System.Single staticFriction2 {
		get {
			if(m_functionCallCounts == null) {
				m_functionCallCounts = new Dictionary<string, int>();
			}
			if(!m_functionCallCounts.ContainsKey( "get_staticFriction2" )){
				m_functionCallCounts.Add( "get_staticFriction2", 0 );
			}
			m_functionCallCounts["get_staticFriction2"]++;
			
			throw new NotImplementedException("This function was automatically generated by Mockery and has no real implementation yet.");
		}
		set {
			if(m_functionCallCounts == null) {
				m_functionCallCounts = new Dictionary<string, int>();
			}
			if(!m_functionCallCounts.ContainsKey( "set_staticFriction2" )){
				m_functionCallCounts.Add( "set_staticFriction2", 0 );
			}
			m_functionCallCounts["set_staticFriction2"]++;
			
		}
	}

	public System.Single bouncyness {
		get {
			if(m_functionCallCounts == null) {
				m_functionCallCounts = new Dictionary<string, int>();
			}
			if(!m_functionCallCounts.ContainsKey( "get_bouncyness" )){
				m_functionCallCounts.Add( "get_bouncyness", 0 );
			}
			m_functionCallCounts["get_bouncyness"]++;
			
			throw new NotImplementedException("This function was automatically generated by Mockery and has no real implementation yet.");
		}
		set {
			if(m_functionCallCounts == null) {
				m_functionCallCounts = new Dictionary<string, int>();
			}
			if(!m_functionCallCounts.ContainsKey( "set_bouncyness" )){
				m_functionCallCounts.Add( "set_bouncyness", 0 );
			}
			m_functionCallCounts["set_bouncyness"]++;
			
		}
	}
}
}
