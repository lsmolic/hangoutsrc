using System;
using System.Collections;
using System.Collections.Generic;
using System.Runtime.Serialization;


namespace UnityEngine
{
	[System.Reflection.DefaultMemberAttribute("")]
	public struct Vector3
	{

		private float m_x;
		private float m_y;
		private float m_z;

		public Vector3(float x, float y, float z)
		{
			m_functionCallCounts = new Dictionary<string, int>();
			m_x = x;
			m_y = y;
			m_z = z;
		}

		public float x
		{
			get { return m_x; }
			set { m_x = value; }
		}

		public float y
		{
			get { return m_y; }
			set { m_y = value; }
		}

		public float z
		{
			get { return m_z; }
			set { m_z = value; }
		}
		// Mock data:
		private Dictionary<string, int> m_functionCallCounts;
		public Dictionary<string, int> FunctionCallCounts
		{
			get
			{
				if (m_functionCallCounts == null)
				{
					m_functionCallCounts = new Dictionary<string, int>();
				}
				return m_functionCallCounts;
			}
		}

		public static UnityEngine.Vector3 Lerp(UnityEngine.Vector3 from, UnityEngine.Vector3 to, System.Single t)
		{
			return new Vector3(
				Mathf.Lerp(from.x, to.x, t),
				Mathf.Lerp(from.y, to.y, t),
				Mathf.Lerp(from.z, to.z, t)
			);
		}

		public static UnityEngine.Vector3 Slerp(UnityEngine.Vector3 from, UnityEngine.Vector3 to, System.Single t)
		{
			throw new NotImplementedException("This function was automatically generated by Mockery and has no real implementation yet.");
		}

		public static void OrthoNormalize(ref UnityEngine.Vector3 normal, ref UnityEngine.Vector3 tangent)
		{
		}

		public static void OrthoNormalize(ref UnityEngine.Vector3 normal, ref UnityEngine.Vector3 tangent, ref UnityEngine.Vector3 binormal)
		{
		}

		public static UnityEngine.Vector3 RotateTowards(UnityEngine.Vector3 from, UnityEngine.Vector3 to, System.Single maxRadiansDelta, System.Single maxMagnitudeDelta)
		{
			throw new NotImplementedException("This function was automatically generated by Mockery and has no real implementation yet.");
		}

		public static UnityEngine.Vector3 Scale(UnityEngine.Vector3 a, UnityEngine.Vector3 b)
		{
			throw new NotImplementedException("This function was automatically generated by Mockery and has no real implementation yet.");
		}

		public void Scale(UnityEngine.Vector3 scale)
		{
			//Mock Data:
			if (m_functionCallCounts == null)
			{
				m_functionCallCounts = new Dictionary<string, int>();
			}
			if (!m_functionCallCounts.ContainsKey("Void Scale(Vector3)"))
			{
				m_functionCallCounts.Add("Void Scale(Vector3)", 0);
			}
			m_functionCallCounts["Void Scale(Vector3)"]++;

		}

		public static UnityEngine.Vector3 Cross(UnityEngine.Vector3 lhs, UnityEngine.Vector3 rhs)
		{
			throw new NotImplementedException("This function was automatically generated by Mockery and has no real implementation yet.");
		}

		public override System.Int32 GetHashCode()
		{
			//Mock Data:
			if (m_functionCallCounts == null)
			{
				m_functionCallCounts = new Dictionary<string, int>();
			}
			if (!m_functionCallCounts.ContainsKey("Int32 GetHashCode()"))
			{
				m_functionCallCounts.Add("Int32 GetHashCode()", 0);
			}
			m_functionCallCounts["Int32 GetHashCode()"]++;

			throw new NotImplementedException("This function was automatically generated by Mockery and has no real implementation yet.");
		}

		public override System.Boolean Equals(System.Object other)
		{
			//Mock Data:
			if (m_functionCallCounts == null)
			{
				m_functionCallCounts = new Dictionary<string, int>();
			}
			if (!m_functionCallCounts.ContainsKey("Boolean Equals(System.Object)"))
			{
				m_functionCallCounts.Add("Boolean Equals(System.Object)", 0);
			}
			m_functionCallCounts["Boolean Equals(System.Object)"]++;

			bool result = false;
			if( other is Vector3 )
			{
				Vector3 otherv3 = (Vector3)other;
				result =	this.x == otherv3.x &&
							this.y == otherv3.y &&
							this.z == otherv3.z;
			}
			return result;
		}

		public static UnityEngine.Vector3 Reflect(UnityEngine.Vector3 inDirection, UnityEngine.Vector3 inNormal)
		{
			throw new NotImplementedException("This function was automatically generated by Mockery and has no real implementation yet.");
		}

		public static UnityEngine.Vector3 Normalize(UnityEngine.Vector3 value)
		{
			value.Normalize();
			return value;
		}

		public void Normalize()
		{
			//Mock Data:
			if (m_functionCallCounts == null)
			{
				m_functionCallCounts = new Dictionary<string, int>();
			}
			if (!m_functionCallCounts.ContainsKey("Void Normalize()"))
			{
				m_functionCallCounts.Add("Void Normalize()", 0);
			}
			m_functionCallCounts["Void Normalize()"]++;

			this = this / this.magnitude;
		}

		public override System.String ToString()
		{
			//Mock Data:
			if (m_functionCallCounts == null)
			{
				m_functionCallCounts = new Dictionary<string, int>();
			}
			if (!m_functionCallCounts.ContainsKey("System.String ToString()"))
			{
				m_functionCallCounts.Add("System.String ToString()", 0);
			}
			m_functionCallCounts["System.String ToString()"]++;

			return "(" + m_x + ", " + m_y + ", " + m_z + ")";
		}

		public static System.Single Dot(UnityEngine.Vector3 lhs, UnityEngine.Vector3 rhs)
		{
			return (lhs.x * rhs.x) + (lhs.y * rhs.y) + (lhs.z * rhs.z);
		}

		public static UnityEngine.Vector3 Project(UnityEngine.Vector3 vector, UnityEngine.Vector3 onNormal)
		{
			throw new NotImplementedException("This function was automatically generated by Mockery and has no real implementation yet.");
		}

		public static UnityEngine.Vector3 Exclude(UnityEngine.Vector3 excludeThis, UnityEngine.Vector3 fromThat)
		{
			throw new NotImplementedException("This function was automatically generated by Mockery and has no real implementation yet.");
		}

		public static System.Single Angle(UnityEngine.Vector3 from, UnityEngine.Vector3 to)
		{
			throw new NotImplementedException("This function was automatically generated by Mockery and has no real implementation yet.");
		}

		public static System.Single Distance(UnityEngine.Vector3 a, UnityEngine.Vector3 b)
		{
			throw new NotImplementedException("This function was automatically generated by Mockery and has no real implementation yet.");
		}

		public static System.Single Magnitude(UnityEngine.Vector3 a)
		{
			throw new NotImplementedException("This function was automatically generated by Mockery and has no real implementation yet.");
		}

		public static System.Single SqrMagnitude(UnityEngine.Vector3 a)
		{
			throw new NotImplementedException("This function was automatically generated by Mockery and has no real implementation yet.");
		}

		public static UnityEngine.Vector3 Min(UnityEngine.Vector3 lhs, UnityEngine.Vector3 rhs)
		{
			throw new NotImplementedException("This function was automatically generated by Mockery and has no real implementation yet.");
		}

		public static UnityEngine.Vector3 Max(UnityEngine.Vector3 lhs, UnityEngine.Vector3 rhs)
		{
			throw new NotImplementedException("This function was automatically generated by Mockery and has no real implementation yet.");
		}

		public static System.Single AngleBetween(UnityEngine.Vector3 from, UnityEngine.Vector3 to)
		{
			throw new NotImplementedException("This function was automatically generated by Mockery and has no real implementation yet.");
		}

		public static UnityEngine.Vector3 operator +(UnityEngine.Vector3 a, UnityEngine.Vector3 b)
		{
			a.x += b.x;
			a.y += b.y;
			a.z += b.z;
			return a;
		}

		public static UnityEngine.Vector3 operator -(UnityEngine.Vector3 a, UnityEngine.Vector3 b)
		{
			a.x -= b.x;
			a.y -= b.y;
			a.z -= b.z;
			return a;
		}

		public static UnityEngine.Vector3 operator !(UnityEngine.Vector3 a)
		{
			throw new NotImplementedException("This function was automatically generated by Mockery and has no real implementation yet.");
		}

		public static UnityEngine.Vector3 operator *(UnityEngine.Vector3 a, System.Single d)
		{
			a.x *= d;
			a.y *= d;
			a.z *= d;
			return a;
		}

		public static UnityEngine.Vector3 operator *(System.Single d, UnityEngine.Vector3 a)
		{
			a.x *= d;
			a.y *= d;
			a.z *= d;
			return a;
		}

		public static UnityEngine.Vector3 operator /(UnityEngine.Vector3 a, System.Single d)
		{
			a.x /= d;
			a.y /= d;
			a.z /= d;
			return a;
		}

		public static System.Boolean operator ==(UnityEngine.Vector3 lhs, UnityEngine.Vector3 rhs)
		{
			return lhs.x == rhs.x && lhs.y == rhs.y && lhs.z == rhs.z;
		}

		public static System.Boolean operator !=(UnityEngine.Vector3 lhs, UnityEngine.Vector3 rhs)
		{
			return !(lhs == rhs);
		}

		public static UnityEngine.Vector3 up
		{
			get
			{
				return new Vector3(0.0f, 1.0f, 0.0f);
			}
		}

		public static UnityEngine.Vector3 back
		{
			get
			{
				throw new NotImplementedException("This function was automatically generated by Mockery and has no real implementation yet.");
			}
		}

		public System.Single Item
		{
			get
			{
				if (m_functionCallCounts == null)
				{
					m_functionCallCounts = new Dictionary<string, int>();
				}
				if (!m_functionCallCounts.ContainsKey("get_Item"))
				{
					m_functionCallCounts.Add("get_Item", 0);
				}
				m_functionCallCounts["get_Item"]++;

				throw new NotImplementedException("This function was automatically generated by Mockery and has no real implementation yet.");
			}
			set
			{
				if (m_functionCallCounts == null)
				{
					m_functionCallCounts = new Dictionary<string, int>();
				}
				if (!m_functionCallCounts.ContainsKey("set_Item"))
				{
					m_functionCallCounts.Add("set_Item", 0);
				}
				m_functionCallCounts["set_Item"]++;

			}
		}

		public static UnityEngine.Vector3 left
		{
			get
			{
				throw new NotImplementedException("This function was automatically generated by Mockery and has no real implementation yet.");
			}
		}

		public UnityEngine.Vector3 normalized
		{
			get
			{
				if (m_functionCallCounts == null)
				{
					m_functionCallCounts = new Dictionary<string, int>();
				}
				if (!m_functionCallCounts.ContainsKey("get_normalized"))
				{
					m_functionCallCounts.Add("get_normalized", 0);
				}
				m_functionCallCounts["get_normalized"]++;

				return Vector3.Normalize(this);
			}
		}

		public static UnityEngine.Vector3 zero
		{
			get
			{
				return new Vector3(0.0f, 0.0f, 0.0f);
			}
		}

		public static UnityEngine.Vector3 right
		{
			get
			{
				throw new NotImplementedException("This function was automatically generated by Mockery and has no real implementation yet.");
			}
		}

		public static UnityEngine.Vector3 fwd
		{
			get
			{
				throw new NotImplementedException("This function was automatically generated by Mockery and has no real implementation yet.");
			}
		}

		public static UnityEngine.Vector3 forward
		{
			get
			{
				throw new NotImplementedException("This function was automatically generated by Mockery and has no real implementation yet.");
			}
		}

		public System.Single sqrMagnitude
		{
			get
			{
				if (m_functionCallCounts == null)
				{
					m_functionCallCounts = new Dictionary<string, int>();
				}
				if (!m_functionCallCounts.ContainsKey("get_sqrMagnitude"))
				{
					m_functionCallCounts.Add("get_sqrMagnitude", 0);
				}
				m_functionCallCounts["get_sqrMagnitude"]++;

				return 1.0f / Vector3.Dot(this, this);
			}
		}

		public System.Single magnitude
		{
			get
			{
				if (m_functionCallCounts == null)
				{
					m_functionCallCounts = new Dictionary<string, int>();
				}
				if (!m_functionCallCounts.ContainsKey("get_magnitude"))
				{
					m_functionCallCounts.Add("get_magnitude", 0);
				}
				m_functionCallCounts["get_magnitude"]++;

				return Mathf.Sqrt(Vector3.Dot(this, this));
			}
		}

		public static UnityEngine.Vector3 one
		{
			get
			{
				return new Vector3(1.0f, 1.0f, 1.0f);
			}
		}

		public static UnityEngine.Vector3 down
		{
			get
			{
				return new Vector3(0.0f, -1.0f, 0.0f);
			}
		}
	}
}
