using System;
using System.Collections;
using System.Collections.Generic;
using System.Runtime.Serialization;


namespace UnityEngine
{
	public class Camera : UnityEngine.Behaviour
	{
		// Mock data:
		private Dictionary<string, int> m_functionCallCounts;
		public Dictionary<string, int> FunctionCallCounts
		{
			get
			{
				if (m_functionCallCounts == null)
				{
					m_functionCallCounts = new Dictionary<string, int>();
				}
				return m_functionCallCounts;
			}
		}

		public void ResetWorldToCameraMatrix()
		{
			//Mock Data:
			if (m_functionCallCounts == null)
			{
				m_functionCallCounts = new Dictionary<string, int>();
			}
			if (!m_functionCallCounts.ContainsKey("Void ResetWorldToCameraMatrix()"))
			{
				m_functionCallCounts.Add("Void ResetWorldToCameraMatrix()", 0);
			}
			m_functionCallCounts["Void ResetWorldToCameraMatrix()"]++;

		}

		public void ResetProjectionMatrix()
		{
			//Mock Data:
			if (m_functionCallCounts == null)
			{
				m_functionCallCounts = new Dictionary<string, int>();
			}
			if (!m_functionCallCounts.ContainsKey("Void ResetProjectionMatrix()"))
			{
				m_functionCallCounts.Add("Void ResetProjectionMatrix()", 0);
			}
			m_functionCallCounts["Void ResetProjectionMatrix()"]++;

		}

		public void ResetAspect()
		{
			//Mock Data:
			if (m_functionCallCounts == null)
			{
				m_functionCallCounts = new Dictionary<string, int>();
			}
			if (!m_functionCallCounts.ContainsKey("Void ResetAspect()"))
			{
				m_functionCallCounts.Add("Void ResetAspect()", 0);
			}
			m_functionCallCounts["Void ResetAspect()"]++;

		}

		public UnityEngine.Vector3 WorldToScreenPoint(UnityEngine.Vector3 position)
		{
			//Mock Data:
			if (m_functionCallCounts == null)
			{
				m_functionCallCounts = new Dictionary<string, int>();
			}
			if (!m_functionCallCounts.ContainsKey("Vector3 WorldToScreenPoint(Vector3)"))
			{
				m_functionCallCounts.Add("Vector3 WorldToScreenPoint(Vector3)", 0);
			}
			m_functionCallCounts["Vector3 WorldToScreenPoint(Vector3)"]++;

			throw new NotImplementedException("This function was automatically generated by Mockery and has no real implementation yet.");
		}

		public UnityEngine.Vector3 WorldToViewportPoint(UnityEngine.Vector3 position)
		{
			//Mock Data:
			if (m_functionCallCounts == null)
			{
				m_functionCallCounts = new Dictionary<string, int>();
			}
			if (!m_functionCallCounts.ContainsKey("Vector3 WorldToViewportPoint(Vector3)"))
			{
				m_functionCallCounts.Add("Vector3 WorldToViewportPoint(Vector3)", 0);
			}
			m_functionCallCounts["Vector3 WorldToViewportPoint(Vector3)"]++;

			throw new NotImplementedException("This function was automatically generated by Mockery and has no real implementation yet.");
		}

		public UnityEngine.Vector3 ViewportToWorldPoint(UnityEngine.Vector3 position)
		{
			//Mock Data:
			if (m_functionCallCounts == null)
			{
				m_functionCallCounts = new Dictionary<string, int>();
			}
			if (!m_functionCallCounts.ContainsKey("Vector3 ViewportToWorldPoint(Vector3)"))
			{
				m_functionCallCounts.Add("Vector3 ViewportToWorldPoint(Vector3)", 0);
			}
			m_functionCallCounts["Vector3 ViewportToWorldPoint(Vector3)"]++;

			throw new NotImplementedException("This function was automatically generated by Mockery and has no real implementation yet.");
		}

		public UnityEngine.Vector3 ScreenToWorldPoint(UnityEngine.Vector3 position)
		{
			//Mock Data:
			if (m_functionCallCounts == null)
			{
				m_functionCallCounts = new Dictionary<string, int>();
			}
			if (!m_functionCallCounts.ContainsKey("Vector3 ScreenToWorldPoint(Vector3)"))
			{
				m_functionCallCounts.Add("Vector3 ScreenToWorldPoint(Vector3)", 0);
			}
			m_functionCallCounts["Vector3 ScreenToWorldPoint(Vector3)"]++;

			throw new NotImplementedException("This function was automatically generated by Mockery and has no real implementation yet.");
		}

		public UnityEngine.Vector3 ScreenToViewportPoint(UnityEngine.Vector3 position)
		{
			//Mock Data:
			if (m_functionCallCounts == null)
			{
				m_functionCallCounts = new Dictionary<string, int>();
			}
			if (!m_functionCallCounts.ContainsKey("Vector3 ScreenToViewportPoint(Vector3)"))
			{
				m_functionCallCounts.Add("Vector3 ScreenToViewportPoint(Vector3)", 0);
			}
			m_functionCallCounts["Vector3 ScreenToViewportPoint(Vector3)"]++;

			throw new NotImplementedException("This function was automatically generated by Mockery and has no real implementation yet.");
		}

		public UnityEngine.Vector3 ViewportToScreenPoint(UnityEngine.Vector3 position)
		{
			//Mock Data:
			if (m_functionCallCounts == null)
			{
				m_functionCallCounts = new Dictionary<string, int>();
			}
			if (!m_functionCallCounts.ContainsKey("Vector3 ViewportToScreenPoint(Vector3)"))
			{
				m_functionCallCounts.Add("Vector3 ViewportToScreenPoint(Vector3)", 0);
			}
			m_functionCallCounts["Vector3 ViewportToScreenPoint(Vector3)"]++;

			throw new NotImplementedException("This function was automatically generated by Mockery and has no real implementation yet.");
		}

		public UnityEngine.Ray ViewportPointToRay(UnityEngine.Vector3 position)
		{
			//Mock Data:
			if (m_functionCallCounts == null)
			{
				m_functionCallCounts = new Dictionary<string, int>();
			}
			if (!m_functionCallCounts.ContainsKey("Ray ViewportPointToRay(Vector3)"))
			{
				m_functionCallCounts.Add("Ray ViewportPointToRay(Vector3)", 0);
			}
			m_functionCallCounts["Ray ViewportPointToRay(Vector3)"]++;

			throw new NotImplementedException("This function was automatically generated by Mockery and has no real implementation yet.");
		}

		public UnityEngine.Ray ScreenPointToRay(UnityEngine.Vector3 position)
		{
			//Mock Data:
			if (m_functionCallCounts == null)
			{
				m_functionCallCounts = new Dictionary<string, int>();
			}
			if (!m_functionCallCounts.ContainsKey("Ray ScreenPointToRay(Vector3)"))
			{
				m_functionCallCounts.Add("Ray ScreenPointToRay(Vector3)", 0);
			}
			m_functionCallCounts["Ray ScreenPointToRay(Vector3)"]++;

			throw new NotImplementedException("This function was automatically generated by Mockery and has no real implementation yet.");
		}

		public System.Single GetScreenWidth()
		{
			//Mock Data:
			if (m_functionCallCounts == null)
			{
				m_functionCallCounts = new Dictionary<string, int>();
			}
			if (!m_functionCallCounts.ContainsKey("Single GetScreenWidth()"))
			{
				m_functionCallCounts.Add("Single GetScreenWidth()", 0);
			}
			m_functionCallCounts["Single GetScreenWidth()"]++;

			throw new NotImplementedException("This function was automatically generated by Mockery and has no real implementation yet.");
		}

		public System.Single GetScreenHeight()
		{
			//Mock Data:
			if (m_functionCallCounts == null)
			{
				m_functionCallCounts = new Dictionary<string, int>();
			}
			if (!m_functionCallCounts.ContainsKey("Single GetScreenHeight()"))
			{
				m_functionCallCounts.Add("Single GetScreenHeight()", 0);
			}
			m_functionCallCounts["Single GetScreenHeight()"]++;

			throw new NotImplementedException("This function was automatically generated by Mockery and has no real implementation yet.");
		}

		public void DoClear()
		{
			//Mock Data:
			if (m_functionCallCounts == null)
			{
				m_functionCallCounts = new Dictionary<string, int>();
			}
			if (!m_functionCallCounts.ContainsKey("Void DoClear()"))
			{
				m_functionCallCounts.Add("Void DoClear()", 0);
			}
			m_functionCallCounts["Void DoClear()"]++;

		}

		public void Render()
		{
			//Mock Data:
			if (m_functionCallCounts == null)
			{
				m_functionCallCounts = new Dictionary<string, int>();
			}
			if (!m_functionCallCounts.ContainsKey("Void Render()"))
			{
				m_functionCallCounts.Add("Void Render()", 0);
			}
			m_functionCallCounts["Void Render()"]++;

		}

		public void RenderWithShader(UnityEngine.Shader shader, System.String replacementTag)
		{
			//Mock Data:
			if (m_functionCallCounts == null)
			{
				m_functionCallCounts = new Dictionary<string, int>();
			}
			if (!m_functionCallCounts.ContainsKey("Void RenderWithShader(UnityEngine.Shader, System.String)"))
			{
				m_functionCallCounts.Add("Void RenderWithShader(UnityEngine.Shader, System.String)", 0);
			}
			m_functionCallCounts["Void RenderWithShader(UnityEngine.Shader, System.String)"]++;

		}

		public void SetReplacementShader(UnityEngine.Shader shader, System.String replacementTag)
		{
			//Mock Data:
			if (m_functionCallCounts == null)
			{
				m_functionCallCounts = new Dictionary<string, int>();
			}
			if (!m_functionCallCounts.ContainsKey("Void SetReplacementShader(UnityEngine.Shader, System.String)"))
			{
				m_functionCallCounts.Add("Void SetReplacementShader(UnityEngine.Shader, System.String)", 0);
			}
			m_functionCallCounts["Void SetReplacementShader(UnityEngine.Shader, System.String)"]++;

		}

		public void ResetReplacementShader()
		{
			//Mock Data:
			if (m_functionCallCounts == null)
			{
				m_functionCallCounts = new Dictionary<string, int>();
			}
			if (!m_functionCallCounts.ContainsKey("Void ResetReplacementShader()"))
			{
				m_functionCallCounts.Add("Void ResetReplacementShader()", 0);
			}
			m_functionCallCounts["Void ResetReplacementShader()"]++;

		}

		public void RenderDontRestore()
		{
			//Mock Data:
			if (m_functionCallCounts == null)
			{
				m_functionCallCounts = new Dictionary<string, int>();
			}
			if (!m_functionCallCounts.ContainsKey("Void RenderDontRestore()"))
			{
				m_functionCallCounts.Add("Void RenderDontRestore()", 0);
			}
			m_functionCallCounts["Void RenderDontRestore()"]++;

		}

		public static void SetupCurrent(UnityEngine.Camera cur)
		{
		}

		public System.Boolean RenderToCubemap(UnityEngine.Cubemap cubemap)
		{
			//Mock Data:
			if (m_functionCallCounts == null)
			{
				m_functionCallCounts = new Dictionary<string, int>();
			}
			if (!m_functionCallCounts.ContainsKey("Boolean RenderToCubemap(UnityEngine.Cubemap)"))
			{
				m_functionCallCounts.Add("Boolean RenderToCubemap(UnityEngine.Cubemap)", 0);
			}
			m_functionCallCounts["Boolean RenderToCubemap(UnityEngine.Cubemap)"]++;

			throw new NotImplementedException("This function was automatically generated by Mockery and has no real implementation yet.");
		}

		public System.Boolean RenderToCubemap(UnityEngine.Cubemap cubemap, System.Int32 faceMask)
		{
			//Mock Data:
			if (m_functionCallCounts == null)
			{
				m_functionCallCounts = new Dictionary<string, int>();
			}
			if (!m_functionCallCounts.ContainsKey("Boolean RenderToCubemap(UnityEngine.Cubemap, Int32)"))
			{
				m_functionCallCounts.Add("Boolean RenderToCubemap(UnityEngine.Cubemap, Int32)", 0);
			}
			m_functionCallCounts["Boolean RenderToCubemap(UnityEngine.Cubemap, Int32)"]++;

			throw new NotImplementedException("This function was automatically generated by Mockery and has no real implementation yet.");
		}

		public System.Boolean RenderToCubemap(UnityEngine.RenderTexture cubemap)
		{
			//Mock Data:
			if (m_functionCallCounts == null)
			{
				m_functionCallCounts = new Dictionary<string, int>();
			}
			if (!m_functionCallCounts.ContainsKey("Boolean RenderToCubemap(UnityEngine.RenderTexture)"))
			{
				m_functionCallCounts.Add("Boolean RenderToCubemap(UnityEngine.RenderTexture)", 0);
			}
			m_functionCallCounts["Boolean RenderToCubemap(UnityEngine.RenderTexture)"]++;

			throw new NotImplementedException("This function was automatically generated by Mockery and has no real implementation yet.");
		}

		public System.Boolean RenderToCubemap(UnityEngine.RenderTexture cubemap, System.Int32 faceMask)
		{
			//Mock Data:
			if (m_functionCallCounts == null)
			{
				m_functionCallCounts = new Dictionary<string, int>();
			}
			if (!m_functionCallCounts.ContainsKey("Boolean RenderToCubemap(UnityEngine.RenderTexture, Int32)"))
			{
				m_functionCallCounts.Add("Boolean RenderToCubemap(UnityEngine.RenderTexture, Int32)", 0);
			}
			m_functionCallCounts["Boolean RenderToCubemap(UnityEngine.RenderTexture, Int32)"]++;

			throw new NotImplementedException("This function was automatically generated by Mockery and has no real implementation yet.");
		}

		public void CopyFrom(UnityEngine.Camera other)
		{
			//Mock Data:
			if (m_functionCallCounts == null)
			{
				m_functionCallCounts = new Dictionary<string, int>();
			}
			if (!m_functionCallCounts.ContainsKey("Void CopyFrom(UnityEngine.Camera)"))
			{
				m_functionCallCounts.Add("Void CopyFrom(UnityEngine.Camera)", 0);
			}
			m_functionCallCounts["Void CopyFrom(UnityEngine.Camera)"]++;

		}

		public Camera()
		{
			//Mock Data:
			m_functionCallCounts = new Dictionary<string, int>();
			if (!m_functionCallCounts.ContainsKey("Void .ctor()"))
			{
				m_functionCallCounts.Add("Void .ctor()", 0);
			}
			m_functionCallCounts["Void .ctor()"]++;

		}

		public static UnityEngine.Camera main
		{
			get
			{
				throw new NotImplementedException("This function was automatically generated by Mockery and has no real implementation yet.");
			}
		}

		public UnityEngine.Matrix4x4 worldToCameraMatrix
		{
			get
			{
				if (m_functionCallCounts == null)
				{
					m_functionCallCounts = new Dictionary<string, int>();
				}
				if (!m_functionCallCounts.ContainsKey("get_worldToCameraMatrix"))
				{
					m_functionCallCounts.Add("get_worldToCameraMatrix", 0);
				}
				m_functionCallCounts["get_worldToCameraMatrix"]++;

				throw new NotImplementedException("This function was automatically generated by Mockery and has no real implementation yet.");
			}
			set
			{
				if (m_functionCallCounts == null)
				{
					m_functionCallCounts = new Dictionary<string, int>();
				}
				if (!m_functionCallCounts.ContainsKey("set_worldToCameraMatrix"))
				{
					m_functionCallCounts.Add("set_worldToCameraMatrix", 0);
				}
				m_functionCallCounts["set_worldToCameraMatrix"]++;

			}
		}

		public System.Single depth
		{
			get
			{
				if (m_functionCallCounts == null)
				{
					m_functionCallCounts = new Dictionary<string, int>();
				}
				if (!m_functionCallCounts.ContainsKey("get_depth"))
				{
					m_functionCallCounts.Add("get_depth", 0);
				}
				m_functionCallCounts["get_depth"]++;

				throw new NotImplementedException("This function was automatically generated by Mockery and has no real implementation yet.");
			}
			set
			{
				if (m_functionCallCounts == null)
				{
					m_functionCallCounts = new Dictionary<string, int>();
				}
				if (!m_functionCallCounts.ContainsKey("set_depth"))
				{
					m_functionCallCounts.Add("set_depth", 0);
				}
				m_functionCallCounts["set_depth"]++;

			}
		}

		public UnityEngine.Matrix4x4 cameraToWorldMatrix
		{
			get
			{
				if (m_functionCallCounts == null)
				{
					m_functionCallCounts = new Dictionary<string, int>();
				}
				if (!m_functionCallCounts.ContainsKey("get_cameraToWorldMatrix"))
				{
					m_functionCallCounts.Add("get_cameraToWorldMatrix", 0);
				}
				m_functionCallCounts["get_cameraToWorldMatrix"]++;

				throw new NotImplementedException("This function was automatically generated by Mockery and has no real implementation yet.");
			}
		}

		public System.Single pixelWidth
		{
			get
			{
				if (m_functionCallCounts == null)
				{
					m_functionCallCounts = new Dictionary<string, int>();
				}
				if (!m_functionCallCounts.ContainsKey("get_pixelWidth"))
				{
					m_functionCallCounts.Add("get_pixelWidth", 0);
				}
				m_functionCallCounts["get_pixelWidth"]++;

				throw new NotImplementedException("This function was automatically generated by Mockery and has no real implementation yet.");
			}
		}

		public UnityEngine.RenderTexture targetTexture
		{
			get
			{
				if (m_functionCallCounts == null)
				{
					m_functionCallCounts = new Dictionary<string, int>();
				}
				if (!m_functionCallCounts.ContainsKey("get_targetTexture"))
				{
					m_functionCallCounts.Add("get_targetTexture", 0);
				}
				m_functionCallCounts["get_targetTexture"]++;

				throw new NotImplementedException("This function was automatically generated by Mockery and has no real implementation yet.");
			}
			set
			{
				if (m_functionCallCounts == null)
				{
					m_functionCallCounts = new Dictionary<string, int>();
				}
				if (!m_functionCallCounts.ContainsKey("set_targetTexture"))
				{
					m_functionCallCounts.Add("set_targetTexture", 0);
				}
				m_functionCallCounts["set_targetTexture"]++;

			}
		}

		public UnityEngine.Matrix4x4 projectionMatrix
		{
			get
			{
				if (m_functionCallCounts == null)
				{
					m_functionCallCounts = new Dictionary<string, int>();
				}
				if (!m_functionCallCounts.ContainsKey("get_projectionMatrix"))
				{
					m_functionCallCounts.Add("get_projectionMatrix", 0);
				}
				m_functionCallCounts["get_projectionMatrix"]++;

				throw new NotImplementedException("This function was automatically generated by Mockery and has no real implementation yet.");
			}
			set
			{
				if (m_functionCallCounts == null)
				{
					m_functionCallCounts = new Dictionary<string, int>();
				}
				if (!m_functionCallCounts.ContainsKey("set_projectionMatrix"))
				{
					m_functionCallCounts.Add("set_projectionMatrix", 0);
				}
				m_functionCallCounts["set_projectionMatrix"]++;

			}
		}

		public System.Single aspect
		{
			get
			{
				if (m_functionCallCounts == null)
				{
					m_functionCallCounts = new Dictionary<string, int>();
				}
				if (!m_functionCallCounts.ContainsKey("get_aspect"))
				{
					m_functionCallCounts.Add("get_aspect", 0);
				}
				m_functionCallCounts["get_aspect"]++;

				throw new NotImplementedException("This function was automatically generated by Mockery and has no real implementation yet.");
			}
			set
			{
				if (m_functionCallCounts == null)
				{
					m_functionCallCounts = new Dictionary<string, int>();
				}
				if (!m_functionCallCounts.ContainsKey("set_aspect"))
				{
					m_functionCallCounts.Add("set_aspect", 0);
				}
				m_functionCallCounts["set_aspect"]++;

			}
		}

		public System.Boolean orthographic
		{
			get
			{
				if (m_functionCallCounts == null)
				{
					m_functionCallCounts = new Dictionary<string, int>();
				}
				if (!m_functionCallCounts.ContainsKey("get_orthographic"))
				{
					m_functionCallCounts.Add("get_orthographic", 0);
				}
				m_functionCallCounts["get_orthographic"]++;

				throw new NotImplementedException("This function was automatically generated by Mockery and has no real implementation yet.");
			}
			set
			{
				if (m_functionCallCounts == null)
				{
					m_functionCallCounts = new Dictionary<string, int>();
				}
				if (!m_functionCallCounts.ContainsKey("set_orthographic"))
				{
					m_functionCallCounts.Add("set_orthographic", 0);
				}
				m_functionCallCounts["set_orthographic"]++;

			}
		}

		public System.Int32 cullingMask
		{
			get
			{
				if (m_functionCallCounts == null)
				{
					m_functionCallCounts = new Dictionary<string, int>();
				}
				if (!m_functionCallCounts.ContainsKey("get_cullingMask"))
				{
					m_functionCallCounts.Add("get_cullingMask", 0);
				}
				m_functionCallCounts["get_cullingMask"]++;

				throw new NotImplementedException("This function was automatically generated by Mockery and has no real implementation yet.");
			}
			set
			{
				if (m_functionCallCounts == null)
				{
					m_functionCallCounts = new Dictionary<string, int>();
				}
				if (!m_functionCallCounts.ContainsKey("set_cullingMask"))
				{
					m_functionCallCounts.Add("set_cullingMask", 0);
				}
				m_functionCallCounts["set_cullingMask"]++;

			}
		}

		public System.Single fieldOfView
		{
			get
			{
				if (m_functionCallCounts == null)
				{
					m_functionCallCounts = new Dictionary<string, int>();
				}
				if (!m_functionCallCounts.ContainsKey("get_fieldOfView"))
				{
					m_functionCallCounts.Add("get_fieldOfView", 0);
				}
				m_functionCallCounts["get_fieldOfView"]++;

				throw new NotImplementedException("This function was automatically generated by Mockery and has no real implementation yet.");
			}
			set
			{
				if (m_functionCallCounts == null)
				{
					m_functionCallCounts = new Dictionary<string, int>();
				}
				if (!m_functionCallCounts.ContainsKey("set_fieldOfView"))
				{
					m_functionCallCounts.Add("set_fieldOfView", 0);
				}
				m_functionCallCounts["set_fieldOfView"]++;

			}
		}

		public System.Single fov
		{
			get
			{
				if (m_functionCallCounts == null)
				{
					m_functionCallCounts = new Dictionary<string, int>();
				}
				if (!m_functionCallCounts.ContainsKey("get_fov"))
				{
					m_functionCallCounts.Add("get_fov", 0);
				}
				m_functionCallCounts["get_fov"]++;

				throw new NotImplementedException("This function was automatically generated by Mockery and has no real implementation yet.");
			}
			set
			{
				if (m_functionCallCounts == null)
				{
					m_functionCallCounts = new Dictionary<string, int>();
				}
				if (!m_functionCallCounts.ContainsKey("set_fov"))
				{
					m_functionCallCounts.Add("set_fov", 0);
				}
				m_functionCallCounts["set_fov"]++;

			}
		}

		public System.Single near
		{
			get
			{
				if (m_functionCallCounts == null)
				{
					m_functionCallCounts = new Dictionary<string, int>();
				}
				if (!m_functionCallCounts.ContainsKey("get_near"))
				{
					m_functionCallCounts.Add("get_near", 0);
				}
				m_functionCallCounts["get_near"]++;

				throw new NotImplementedException("This function was automatically generated by Mockery and has no real implementation yet.");
			}
			set
			{
				if (m_functionCallCounts == null)
				{
					m_functionCallCounts = new Dictionary<string, int>();
				}
				if (!m_functionCallCounts.ContainsKey("set_near"))
				{
					m_functionCallCounts.Add("set_near", 0);
				}
				m_functionCallCounts["set_near"]++;

			}
		}

		public System.Single pixelHeight
		{
			get
			{
				if (m_functionCallCounts == null)
				{
					m_functionCallCounts = new Dictionary<string, int>();
				}
				if (!m_functionCallCounts.ContainsKey("get_pixelHeight"))
				{
					m_functionCallCounts.Add("get_pixelHeight", 0);
				}
				m_functionCallCounts["get_pixelHeight"]++;

				throw new NotImplementedException("This function was automatically generated by Mockery and has no real implementation yet.");
			}
		}

		public System.Single orthographicSize
		{
			get
			{
				if (m_functionCallCounts == null)
				{
					m_functionCallCounts = new Dictionary<string, int>();
				}
				if (!m_functionCallCounts.ContainsKey("get_orthographicSize"))
				{
					m_functionCallCounts.Add("get_orthographicSize", 0);
				}
				m_functionCallCounts["get_orthographicSize"]++;

				throw new NotImplementedException("This function was automatically generated by Mockery and has no real implementation yet.");
			}
			set
			{
				if (m_functionCallCounts == null)
				{
					m_functionCallCounts = new Dictionary<string, int>();
				}
				if (!m_functionCallCounts.ContainsKey("set_orthographicSize"))
				{
					m_functionCallCounts.Add("set_orthographicSize", 0);
				}
				m_functionCallCounts["set_orthographicSize"]++;

			}
		}

		public static UnityEngine.Camera current
		{
			get
			{
				throw new NotImplementedException("This function was automatically generated by Mockery and has no real implementation yet.");
			}
		}

		public System.Single nearClipPlane
		{
			get
			{
				if (m_functionCallCounts == null)
				{
					m_functionCallCounts = new Dictionary<string, int>();
				}
				if (!m_functionCallCounts.ContainsKey("get_nearClipPlane"))
				{
					m_functionCallCounts.Add("get_nearClipPlane", 0);
				}
				m_functionCallCounts["get_nearClipPlane"]++;

				throw new NotImplementedException("This function was automatically generated by Mockery and has no real implementation yet.");
			}
			set
			{
				if (m_functionCallCounts == null)
				{
					m_functionCallCounts = new Dictionary<string, int>();
				}
				if (!m_functionCallCounts.ContainsKey("set_nearClipPlane"))
				{
					m_functionCallCounts.Add("set_nearClipPlane", 0);
				}
				m_functionCallCounts["set_nearClipPlane"]++;

			}
		}

		public UnityEngine.Vector3 velocity
		{
			get
			{
				if (m_functionCallCounts == null)
				{
					m_functionCallCounts = new Dictionary<string, int>();
				}
				if (!m_functionCallCounts.ContainsKey("get_velocity"))
				{
					m_functionCallCounts.Add("get_velocity", 0);
				}
				m_functionCallCounts["get_velocity"]++;

				throw new NotImplementedException("This function was automatically generated by Mockery and has no real implementation yet.");
			}
		}

		public System.Single far
		{
			get
			{
				if (m_functionCallCounts == null)
				{
					m_functionCallCounts = new Dictionary<string, int>();
				}
				if (!m_functionCallCounts.ContainsKey("get_far"))
				{
					m_functionCallCounts.Add("get_far", 0);
				}
				m_functionCallCounts["get_far"]++;

				throw new NotImplementedException("This function was automatically generated by Mockery and has no real implementation yet.");
			}
			set
			{
				if (m_functionCallCounts == null)
				{
					m_functionCallCounts = new Dictionary<string, int>();
				}
				if (!m_functionCallCounts.ContainsKey("set_far"))
				{
					m_functionCallCounts.Add("set_far", 0);
				}
				m_functionCallCounts["set_far"]++;

			}
		}

		public static UnityEngine.Camera[] allCameras
		{
			get
			{
				throw new NotImplementedException("This function was automatically generated by Mockery and has no real implementation yet.");
			}
		}

		public UnityEngine.CameraClearFlags clearFlags
		{
			get
			{
				if (m_functionCallCounts == null)
				{
					m_functionCallCounts = new Dictionary<string, int>();
				}
				if (!m_functionCallCounts.ContainsKey("get_clearFlags"))
				{
					m_functionCallCounts.Add("get_clearFlags", 0);
				}
				m_functionCallCounts["get_clearFlags"]++;

				throw new NotImplementedException("This function was automatically generated by Mockery and has no real implementation yet.");
			}
			set
			{
				if (m_functionCallCounts == null)
				{
					m_functionCallCounts = new Dictionary<string, int>();
				}
				if (!m_functionCallCounts.ContainsKey("set_clearFlags"))
				{
					m_functionCallCounts.Add("set_clearFlags", 0);
				}
				m_functionCallCounts["set_clearFlags"]++;

			}
		}

		public System.Single farClipPlane
		{
			get
			{
				if (m_functionCallCounts == null)
				{
					m_functionCallCounts = new Dictionary<string, int>();
				}
				if (!m_functionCallCounts.ContainsKey("get_farClipPlane"))
				{
					m_functionCallCounts.Add("get_farClipPlane", 0);
				}
				m_functionCallCounts["get_farClipPlane"]++;

				throw new NotImplementedException("This function was automatically generated by Mockery and has no real implementation yet.");
			}
			set
			{
				if (m_functionCallCounts == null)
				{
					m_functionCallCounts = new Dictionary<string, int>();
				}
				if (!m_functionCallCounts.ContainsKey("set_farClipPlane"))
				{
					m_functionCallCounts.Add("set_farClipPlane", 0);
				}
				m_functionCallCounts["set_farClipPlane"]++;

			}
		}

		public UnityEngine.Rect pixelRect
		{
			get
			{
				if (m_functionCallCounts == null)
				{
					m_functionCallCounts = new Dictionary<string, int>();
				}
				if (!m_functionCallCounts.ContainsKey("get_pixelRect"))
				{
					m_functionCallCounts.Add("get_pixelRect", 0);
				}
				m_functionCallCounts["get_pixelRect"]++;

				throw new NotImplementedException("This function was automatically generated by Mockery and has no real implementation yet.");
			}
			set
			{
				if (m_functionCallCounts == null)
				{
					m_functionCallCounts = new Dictionary<string, int>();
				}
				if (!m_functionCallCounts.ContainsKey("set_pixelRect"))
				{
					m_functionCallCounts.Add("set_pixelRect", 0);
				}
				m_functionCallCounts["set_pixelRect"]++;

			}
		}

		public static UnityEngine.Camera mainCamera
		{
			get
			{
				throw new NotImplementedException("This function was automatically generated by Mockery and has no real implementation yet.");
			}
		}

		public UnityEngine.Rect rect
		{
			get
			{
				if (m_functionCallCounts == null)
				{
					m_functionCallCounts = new Dictionary<string, int>();
				}
				if (!m_functionCallCounts.ContainsKey("get_rect"))
				{
					m_functionCallCounts.Add("get_rect", 0);
				}
				m_functionCallCounts["get_rect"]++;

				throw new NotImplementedException("This function was automatically generated by Mockery and has no real implementation yet.");
			}
			set
			{
				if (m_functionCallCounts == null)
				{
					m_functionCallCounts = new Dictionary<string, int>();
				}
				if (!m_functionCallCounts.ContainsKey("set_rect"))
				{
					m_functionCallCounts.Add("set_rect", 0);
				}
				m_functionCallCounts["set_rect"]++;

			}
		}

		public UnityEngine.Color backgroundColor
		{
			get
			{
				if (m_functionCallCounts == null)
				{
					m_functionCallCounts = new Dictionary<string, int>();
				}
				if (!m_functionCallCounts.ContainsKey("get_backgroundColor"))
				{
					m_functionCallCounts.Add("get_backgroundColor", 0);
				}
				m_functionCallCounts["get_backgroundColor"]++;

				throw new NotImplementedException("This function was automatically generated by Mockery and has no real implementation yet.");
			}
			set
			{
				if (m_functionCallCounts == null)
				{
					m_functionCallCounts = new Dictionary<string, int>();
				}
				if (!m_functionCallCounts.ContainsKey("set_backgroundColor"))
				{
					m_functionCallCounts.Add("set_backgroundColor", 0);
				}
				m_functionCallCounts["set_backgroundColor"]++;

			}
		}

		public System.Boolean isOrthoGraphic
		{
			get
			{
				if (m_functionCallCounts == null)
				{
					m_functionCallCounts = new Dictionary<string, int>();
				}
				if (!m_functionCallCounts.ContainsKey("get_isOrthoGraphic"))
				{
					m_functionCallCounts.Add("get_isOrthoGraphic", 0);
				}
				m_functionCallCounts["get_isOrthoGraphic"]++;

				throw new NotImplementedException("This function was automatically generated by Mockery and has no real implementation yet.");
			}
			set
			{
				if (m_functionCallCounts == null)
				{
					m_functionCallCounts = new Dictionary<string, int>();
				}
				if (!m_functionCallCounts.ContainsKey("set_isOrthoGraphic"))
				{
					m_functionCallCounts.Add("set_isOrthoGraphic", 0);
				}
				m_functionCallCounts["set_isOrthoGraphic"]++;

			}
		}
	}
}
