using System;
using System.Collections;
using System.Collections.Generic;
using System.Runtime.Serialization;


namespace UnityEngine {
[System.Reflection.DefaultMemberAttribute("")]
public struct Quaternion {
	// Mock data:
	private Dictionary<string, int> m_functionCallCounts;
	public Dictionary<string, int> FunctionCallCounts {
		get { 
			if(m_functionCallCounts == null) {
				m_functionCallCounts = new Dictionary<string, int>();
			}
			return m_functionCallCounts;
		}
	}

	public static System.Single Dot( UnityEngine.Quaternion a, UnityEngine.Quaternion b ){
		throw new NotImplementedException("This function was automatically generated by Mockery and has no real implementation yet.");
	}

	public static UnityEngine.Quaternion AngleAxis( System.Single angle, UnityEngine.Vector3 axis ){
		throw new NotImplementedException("This function was automatically generated by Mockery and has no real implementation yet.");
	}

	public void ToAngleAxis( out System.Single angle, out UnityEngine.Vector3 axis ){
		//Mock Data:
		if(m_functionCallCounts == null) {
			m_functionCallCounts = new Dictionary<string, int>();
		}
		if(!m_functionCallCounts.ContainsKey( "Void ToAngleAxis(Single ByRef, Vector3 ByRef)" )){
			m_functionCallCounts.Add( "Void ToAngleAxis(Single ByRef, Vector3 ByRef)", 0 );
		}
		m_functionCallCounts["Void ToAngleAxis(Single ByRef, Vector3 ByRef)"]++;
			
		angle = default(System.Single);
		axis = default(UnityEngine.Vector3);
	}

	public static UnityEngine.Quaternion FromToRotation( UnityEngine.Vector3 fromDirection, UnityEngine.Vector3 toDirection ){
		throw new NotImplementedException("This function was automatically generated by Mockery and has no real implementation yet.");
	}

	public void SetFromToRotation( UnityEngine.Vector3 fromDirection, UnityEngine.Vector3 toDirection ){
		//Mock Data:
		if(m_functionCallCounts == null) {
			m_functionCallCounts = new Dictionary<string, int>();
		}
		if(!m_functionCallCounts.ContainsKey( "Void SetFromToRotation(Vector3, Vector3)" )){
			m_functionCallCounts.Add( "Void SetFromToRotation(Vector3, Vector3)", 0 );
		}
		m_functionCallCounts["Void SetFromToRotation(Vector3, Vector3)"]++;
			
	}

	public static UnityEngine.Quaternion LookRotation( UnityEngine.Vector3 forward, UnityEngine.Vector3 upwards ){
		throw new NotImplementedException("This function was automatically generated by Mockery and has no real implementation yet.");
	}

	public static UnityEngine.Quaternion LookRotation( UnityEngine.Vector3 forward ){
		throw new NotImplementedException("This function was automatically generated by Mockery and has no real implementation yet.");
	}

	public void SetLookRotation( UnityEngine.Vector3 view ){
		//Mock Data:
		if(m_functionCallCounts == null) {
			m_functionCallCounts = new Dictionary<string, int>();
		}
		if(!m_functionCallCounts.ContainsKey( "Void SetLookRotation(Vector3)" )){
			m_functionCallCounts.Add( "Void SetLookRotation(Vector3)", 0 );
		}
		m_functionCallCounts["Void SetLookRotation(Vector3)"]++;
			
	}

	public void SetLookRotation( UnityEngine.Vector3 view, UnityEngine.Vector3 up ){
		//Mock Data:
		if(m_functionCallCounts == null) {
			m_functionCallCounts = new Dictionary<string, int>();
		}
		if(!m_functionCallCounts.ContainsKey( "Void SetLookRotation(Vector3, Vector3)" )){
			m_functionCallCounts.Add( "Void SetLookRotation(Vector3, Vector3)", 0 );
		}
		m_functionCallCounts["Void SetLookRotation(Vector3, Vector3)"]++;
			
	}

	public static UnityEngine.Quaternion Slerp( UnityEngine.Quaternion from, UnityEngine.Quaternion to, System.Single t ){
		throw new NotImplementedException("This function was automatically generated by Mockery and has no real implementation yet.");
	}

	public static UnityEngine.Quaternion Lerp( UnityEngine.Quaternion a, UnityEngine.Quaternion b, System.Single t ){
		throw new NotImplementedException("This function was automatically generated by Mockery and has no real implementation yet.");
	}

	public static UnityEngine.Quaternion Inverse( UnityEngine.Quaternion rotation ){
		throw new NotImplementedException("This function was automatically generated by Mockery and has no real implementation yet.");
	}

	public override System.String ToString( ){
		//Mock Data:
		if(m_functionCallCounts == null) {
			m_functionCallCounts = new Dictionary<string, int>();
		}
		if(!m_functionCallCounts.ContainsKey( "System.String ToString()" )){
			m_functionCallCounts.Add( "System.String ToString()", 0 );
		}
		m_functionCallCounts["System.String ToString()"]++;
			
		throw new NotImplementedException("This function was automatically generated by Mockery and has no real implementation yet.");
	}

	public static System.Single Angle( UnityEngine.Quaternion a, UnityEngine.Quaternion b ){
		throw new NotImplementedException("This function was automatically generated by Mockery and has no real implementation yet.");
	}

	public static UnityEngine.Quaternion Euler( System.Single x, System.Single y, System.Single z ){
		throw new NotImplementedException("This function was automatically generated by Mockery and has no real implementation yet.");
	}

	public static UnityEngine.Quaternion Euler( UnityEngine.Vector3 euler ){
		throw new NotImplementedException("This function was automatically generated by Mockery and has no real implementation yet.");
	}

	public static UnityEngine.Quaternion EulerRotation( System.Single x, System.Single y, System.Single z ){
		throw new NotImplementedException("This function was automatically generated by Mockery and has no real implementation yet.");
	}

	public static UnityEngine.Quaternion EulerRotation( UnityEngine.Vector3 euler ){
		throw new NotImplementedException("This function was automatically generated by Mockery and has no real implementation yet.");
	}

	public void SetEulerRotation( System.Single x, System.Single y, System.Single z ){
		//Mock Data:
		if(m_functionCallCounts == null) {
			m_functionCallCounts = new Dictionary<string, int>();
		}
		if(!m_functionCallCounts.ContainsKey( "Void SetEulerRotation(Single, Single, Single)" )){
			m_functionCallCounts.Add( "Void SetEulerRotation(Single, Single, Single)", 0 );
		}
		m_functionCallCounts["Void SetEulerRotation(Single, Single, Single)"]++;
			
	}

	public void SetEulerRotation( UnityEngine.Vector3 euler ){
		//Mock Data:
		if(m_functionCallCounts == null) {
			m_functionCallCounts = new Dictionary<string, int>();
		}
		if(!m_functionCallCounts.ContainsKey( "Void SetEulerRotation(Vector3)" )){
			m_functionCallCounts.Add( "Void SetEulerRotation(Vector3)", 0 );
		}
		m_functionCallCounts["Void SetEulerRotation(Vector3)"]++;
			
	}

	public UnityEngine.Vector3 ToEuler( ){
		//Mock Data:
		if(m_functionCallCounts == null) {
			m_functionCallCounts = new Dictionary<string, int>();
		}
		if(!m_functionCallCounts.ContainsKey( "Vector3 ToEuler()" )){
			m_functionCallCounts.Add( "Vector3 ToEuler()", 0 );
		}
		m_functionCallCounts["Vector3 ToEuler()"]++;
			
		throw new NotImplementedException("This function was automatically generated by Mockery and has no real implementation yet.");
	}

	public static UnityEngine.Quaternion EulerAngles( System.Single x, System.Single y, System.Single z ){
		throw new NotImplementedException("This function was automatically generated by Mockery and has no real implementation yet.");
	}

	public static UnityEngine.Quaternion EulerAngles( UnityEngine.Vector3 euler ){
		throw new NotImplementedException("This function was automatically generated by Mockery and has no real implementation yet.");
	}

	public void ToAxisAngle( out UnityEngine.Vector3 axis, out System.Single angle ){
		//Mock Data:
		if(m_functionCallCounts == null) {
			m_functionCallCounts = new Dictionary<string, int>();
		}
		if(!m_functionCallCounts.ContainsKey( "Void ToAxisAngle(Vector3 ByRef, Single ByRef)" )){
			m_functionCallCounts.Add( "Void ToAxisAngle(Vector3 ByRef, Single ByRef)", 0 );
		}
		m_functionCallCounts["Void ToAxisAngle(Vector3 ByRef, Single ByRef)"]++;
			
		axis = default(UnityEngine.Vector3);
		angle = default(System.Single);
	}

	public void SetEulerAngles( System.Single x, System.Single y, System.Single z ){
		//Mock Data:
		if(m_functionCallCounts == null) {
			m_functionCallCounts = new Dictionary<string, int>();
		}
		if(!m_functionCallCounts.ContainsKey( "Void SetEulerAngles(Single, Single, Single)" )){
			m_functionCallCounts.Add( "Void SetEulerAngles(Single, Single, Single)", 0 );
		}
		m_functionCallCounts["Void SetEulerAngles(Single, Single, Single)"]++;
			
	}

	public void SetEulerAngles( UnityEngine.Vector3 euler ){
		//Mock Data:
		if(m_functionCallCounts == null) {
			m_functionCallCounts = new Dictionary<string, int>();
		}
		if(!m_functionCallCounts.ContainsKey( "Void SetEulerAngles(Vector3)" )){
			m_functionCallCounts.Add( "Void SetEulerAngles(Vector3)", 0 );
		}
		m_functionCallCounts["Void SetEulerAngles(Vector3)"]++;
			
	}

	public static UnityEngine.Vector3 ToEulerAngles( UnityEngine.Quaternion rotation ){
		throw new NotImplementedException("This function was automatically generated by Mockery and has no real implementation yet.");
	}

	public UnityEngine.Vector3 ToEulerAngles( ){
		//Mock Data:
		if(m_functionCallCounts == null) {
			m_functionCallCounts = new Dictionary<string, int>();
		}
		if(!m_functionCallCounts.ContainsKey( "Vector3 ToEulerAngles()" )){
			m_functionCallCounts.Add( "Vector3 ToEulerAngles()", 0 );
		}
		m_functionCallCounts["Vector3 ToEulerAngles()"]++;
			
		throw new NotImplementedException("This function was automatically generated by Mockery and has no real implementation yet.");
	}

	public static UnityEngine.Quaternion AxisAngle( UnityEngine.Vector3 axis, System.Single angle ){
		throw new NotImplementedException("This function was automatically generated by Mockery and has no real implementation yet.");
	}

	public void SetAxisAngle( UnityEngine.Vector3 axis, System.Single angle ){
		//Mock Data:
		if(m_functionCallCounts == null) {
			m_functionCallCounts = new Dictionary<string, int>();
		}
		if(!m_functionCallCounts.ContainsKey( "Void SetAxisAngle(Vector3, Single)" )){
			m_functionCallCounts.Add( "Void SetAxisAngle(Vector3, Single)", 0 );
		}
		m_functionCallCounts["Void SetAxisAngle(Vector3, Single)"]++;
			
	}

	public override System.Int32 GetHashCode( ){
		//Mock Data:
		if(m_functionCallCounts == null) {
			m_functionCallCounts = new Dictionary<string, int>();
		}
		if(!m_functionCallCounts.ContainsKey( "Int32 GetHashCode()" )){
			m_functionCallCounts.Add( "Int32 GetHashCode()", 0 );
		}
		m_functionCallCounts["Int32 GetHashCode()"]++;
			
		throw new NotImplementedException("This function was automatically generated by Mockery and has no real implementation yet.");
	}

	public override System.Boolean Equals( System.Object other ){
		//Mock Data:
		if(m_functionCallCounts == null) {
			m_functionCallCounts = new Dictionary<string, int>();
		}
		if(!m_functionCallCounts.ContainsKey( "Boolean Equals(System.Object)" )){
			m_functionCallCounts.Add( "Boolean Equals(System.Object)", 0 );
		}
		m_functionCallCounts["Boolean Equals(System.Object)"]++;
			
		throw new NotImplementedException("This function was automatically generated by Mockery and has no real implementation yet.");
	}

	public static UnityEngine.Quaternion operator *( UnityEngine.Quaternion lhs, UnityEngine.Quaternion rhs ){
		throw new NotImplementedException("This function was automatically generated by Mockery and has no real implementation yet.");
	}

	public static UnityEngine.Vector3 operator *( UnityEngine.Quaternion rotation, UnityEngine.Vector3 point ){
		throw new NotImplementedException("This function was automatically generated by Mockery and has no real implementation yet.");
	}

	public static System.Boolean operator ==( UnityEngine.Quaternion lhs, UnityEngine.Quaternion rhs ){
		throw new NotImplementedException("This function was automatically generated by Mockery and has no real implementation yet.");
	}

	public static System.Boolean operator !=( UnityEngine.Quaternion lhs, UnityEngine.Quaternion rhs ){
		throw new NotImplementedException("This function was automatically generated by Mockery and has no real implementation yet.");
	}

	public Quaternion( System.Single x, System.Single y, System.Single z, System.Single w ){
		//Mock Data:
			m_functionCallCounts = new Dictionary<string, int>();
		if(!m_functionCallCounts.ContainsKey( "Void .ctor(Single, Single, Single, Single)" )){
			m_functionCallCounts.Add( "Void .ctor(Single, Single, Single, Single)", 0 );
		}
		m_functionCallCounts["Void .ctor(Single, Single, Single, Single)"]++;
			
	}

	public static UnityEngine.Quaternion identity {
		get {
			throw new NotImplementedException("This function was automatically generated by Mockery and has no real implementation yet.");
		}
	}

	public float x
	{
		get
		{
			throw new NotImplementedException("This function was automatically generated by Mockery and has no real implementation yet.");
		}
		set
		{
			throw new NotImplementedException("This function was automatically generated by Mockery and has no real implementation yet.");
		}
	}

	public float y
	{
		get
		{
			throw new NotImplementedException("This function was automatically generated by Mockery and has no real implementation yet.");
		}
		set
		{
			throw new NotImplementedException("This function was automatically generated by Mockery and has no real implementation yet.");
		}
	}

	public float z
	{
		get
		{
			throw new NotImplementedException("This function was automatically generated by Mockery and has no real implementation yet.");
		}
		set
		{
			throw new NotImplementedException("This function was automatically generated by Mockery and has no real implementation yet.");
		}
	}

	public float w
	{
		get
		{
			throw new NotImplementedException("This function was automatically generated by Mockery and has no real implementation yet.");
		}
		set
		{
			throw new NotImplementedException("This function was automatically generated by Mockery and has no real implementation yet.");
		}
	}

	public System.Single Item {
		get {
			if(m_functionCallCounts == null) {
				m_functionCallCounts = new Dictionary<string, int>();
			}
			if(!m_functionCallCounts.ContainsKey( "get_Item" )){
				m_functionCallCounts.Add( "get_Item", 0 );
			}
			m_functionCallCounts["get_Item"]++;
			
			throw new NotImplementedException("This function was automatically generated by Mockery and has no real implementation yet.");
		}
		set {
			if(m_functionCallCounts == null) {
				m_functionCallCounts = new Dictionary<string, int>();
			}
			if(!m_functionCallCounts.ContainsKey( "set_Item" )){
				m_functionCallCounts.Add( "set_Item", 0 );
			}
			m_functionCallCounts["set_Item"]++;
			
		}
	}

	public UnityEngine.Vector3 eulerAngles {
		get {
			if(m_functionCallCounts == null) {
				m_functionCallCounts = new Dictionary<string, int>();
			}
			if(!m_functionCallCounts.ContainsKey( "get_eulerAngles" )){
				m_functionCallCounts.Add( "get_eulerAngles", 0 );
			}
			m_functionCallCounts["get_eulerAngles"]++;
			
			throw new NotImplementedException("This function was automatically generated by Mockery and has no real implementation yet.");
		}
		set {
			if(m_functionCallCounts == null) {
				m_functionCallCounts = new Dictionary<string, int>();
			}
			if(!m_functionCallCounts.ContainsKey( "set_eulerAngles" )){
				m_functionCallCounts.Add( "set_eulerAngles", 0 );
			}
			m_functionCallCounts["set_eulerAngles"]++;
			
		}
	}
}
}
