using System;
using System.Collections;
using System.Collections.Generic;
using System.Runtime.Serialization;


namespace UnityEngine {
public struct WheelFrictionCurve {
	// Mock data:
	private Dictionary<string, int> m_functionCallCounts;
	public Dictionary<string, int> FunctionCallCounts {
		get { 
			if(m_functionCallCounts == null) {
				m_functionCallCounts = new Dictionary<string, int>();
			}
			return m_functionCallCounts;
		}
	}

	public System.Single extremumSlip {
		get {
			if(m_functionCallCounts == null) {
				m_functionCallCounts = new Dictionary<string, int>();
			}
			if(!m_functionCallCounts.ContainsKey( "get_extremumSlip" )){
				m_functionCallCounts.Add( "get_extremumSlip", 0 );
			}
			m_functionCallCounts["get_extremumSlip"]++;
			
			throw new NotImplementedException("This function was automatically generated by Mockery and has no real implementation yet.");
		}
		set {
			if(m_functionCallCounts == null) {
				m_functionCallCounts = new Dictionary<string, int>();
			}
			if(!m_functionCallCounts.ContainsKey( "set_extremumSlip" )){
				m_functionCallCounts.Add( "set_extremumSlip", 0 );
			}
			m_functionCallCounts["set_extremumSlip"]++;
			
		}
	}

	public System.Single asymptoteSlip {
		get {
			if(m_functionCallCounts == null) {
				m_functionCallCounts = new Dictionary<string, int>();
			}
			if(!m_functionCallCounts.ContainsKey( "get_asymptoteSlip" )){
				m_functionCallCounts.Add( "get_asymptoteSlip", 0 );
			}
			m_functionCallCounts["get_asymptoteSlip"]++;
			
			throw new NotImplementedException("This function was automatically generated by Mockery and has no real implementation yet.");
		}
		set {
			if(m_functionCallCounts == null) {
				m_functionCallCounts = new Dictionary<string, int>();
			}
			if(!m_functionCallCounts.ContainsKey( "set_asymptoteSlip" )){
				m_functionCallCounts.Add( "set_asymptoteSlip", 0 );
			}
			m_functionCallCounts["set_asymptoteSlip"]++;
			
		}
	}

	public System.Single extremumValue {
		get {
			if(m_functionCallCounts == null) {
				m_functionCallCounts = new Dictionary<string, int>();
			}
			if(!m_functionCallCounts.ContainsKey( "get_extremumValue" )){
				m_functionCallCounts.Add( "get_extremumValue", 0 );
			}
			m_functionCallCounts["get_extremumValue"]++;
			
			throw new NotImplementedException("This function was automatically generated by Mockery and has no real implementation yet.");
		}
		set {
			if(m_functionCallCounts == null) {
				m_functionCallCounts = new Dictionary<string, int>();
			}
			if(!m_functionCallCounts.ContainsKey( "set_extremumValue" )){
				m_functionCallCounts.Add( "set_extremumValue", 0 );
			}
			m_functionCallCounts["set_extremumValue"]++;
			
		}
	}

	public System.Single stiffness {
		get {
			if(m_functionCallCounts == null) {
				m_functionCallCounts = new Dictionary<string, int>();
			}
			if(!m_functionCallCounts.ContainsKey( "get_stiffness" )){
				m_functionCallCounts.Add( "get_stiffness", 0 );
			}
			m_functionCallCounts["get_stiffness"]++;
			
			throw new NotImplementedException("This function was automatically generated by Mockery and has no real implementation yet.");
		}
		set {
			if(m_functionCallCounts == null) {
				m_functionCallCounts = new Dictionary<string, int>();
			}
			if(!m_functionCallCounts.ContainsKey( "set_stiffness" )){
				m_functionCallCounts.Add( "set_stiffness", 0 );
			}
			m_functionCallCounts["set_stiffness"]++;
			
		}
	}

	public System.Single asymptoteValue {
		get {
			if(m_functionCallCounts == null) {
				m_functionCallCounts = new Dictionary<string, int>();
			}
			if(!m_functionCallCounts.ContainsKey( "get_asymptoteValue" )){
				m_functionCallCounts.Add( "get_asymptoteValue", 0 );
			}
			m_functionCallCounts["get_asymptoteValue"]++;
			
			throw new NotImplementedException("This function was automatically generated by Mockery and has no real implementation yet.");
		}
		set {
			if(m_functionCallCounts == null) {
				m_functionCallCounts = new Dictionary<string, int>();
			}
			if(!m_functionCallCounts.ContainsKey( "set_asymptoteValue" )){
				m_functionCallCounts.Add( "set_asymptoteValue", 0 );
			}
			m_functionCallCounts["set_asymptoteValue"]++;
			
		}
	}
}
}
