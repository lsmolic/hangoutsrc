using System;
using System.Collections;
using System.Collections.Generic;
using System.Runtime.Serialization;


namespace UnityEngine {
public struct WheelHit {
	// Mock data:
	private Dictionary<string, int> m_functionCallCounts;
	public Dictionary<string, int> FunctionCallCounts {
		get { 
			if(m_functionCallCounts == null) {
				m_functionCallCounts = new Dictionary<string, int>();
			}
			return m_functionCallCounts;
		}
	}

	public System.Single forwardSlip {
		get {
			if(m_functionCallCounts == null) {
				m_functionCallCounts = new Dictionary<string, int>();
			}
			if(!m_functionCallCounts.ContainsKey( "get_forwardSlip" )){
				m_functionCallCounts.Add( "get_forwardSlip", 0 );
			}
			m_functionCallCounts["get_forwardSlip"]++;
			
			throw new NotImplementedException("This function was automatically generated by Mockery and has no real implementation yet.");
		}
		set {
			if(m_functionCallCounts == null) {
				m_functionCallCounts = new Dictionary<string, int>();
			}
			if(!m_functionCallCounts.ContainsKey( "set_forwardSlip" )){
				m_functionCallCounts.Add( "set_forwardSlip", 0 );
			}
			m_functionCallCounts["set_forwardSlip"]++;
			
		}
	}

	public UnityEngine.Vector3 forwardDir {
		get {
			if(m_functionCallCounts == null) {
				m_functionCallCounts = new Dictionary<string, int>();
			}
			if(!m_functionCallCounts.ContainsKey( "get_forwardDir" )){
				m_functionCallCounts.Add( "get_forwardDir", 0 );
			}
			m_functionCallCounts["get_forwardDir"]++;
			
			throw new NotImplementedException("This function was automatically generated by Mockery and has no real implementation yet.");
		}
		set {
			if(m_functionCallCounts == null) {
				m_functionCallCounts = new Dictionary<string, int>();
			}
			if(!m_functionCallCounts.ContainsKey( "set_forwardDir" )){
				m_functionCallCounts.Add( "set_forwardDir", 0 );
			}
			m_functionCallCounts["set_forwardDir"]++;
			
		}
	}

	public UnityEngine.Collider collider {
		get {
			if(m_functionCallCounts == null) {
				m_functionCallCounts = new Dictionary<string, int>();
			}
			if(!m_functionCallCounts.ContainsKey( "get_collider" )){
				m_functionCallCounts.Add( "get_collider", 0 );
			}
			m_functionCallCounts["get_collider"]++;
			
			throw new NotImplementedException("This function was automatically generated by Mockery and has no real implementation yet.");
		}
		set {
			if(m_functionCallCounts == null) {
				m_functionCallCounts = new Dictionary<string, int>();
			}
			if(!m_functionCallCounts.ContainsKey( "set_collider" )){
				m_functionCallCounts.Add( "set_collider", 0 );
			}
			m_functionCallCounts["set_collider"]++;
			
		}
	}

	public UnityEngine.Vector3 point {
		get {
			if(m_functionCallCounts == null) {
				m_functionCallCounts = new Dictionary<string, int>();
			}
			if(!m_functionCallCounts.ContainsKey( "get_point" )){
				m_functionCallCounts.Add( "get_point", 0 );
			}
			m_functionCallCounts["get_point"]++;
			
			throw new NotImplementedException("This function was automatically generated by Mockery and has no real implementation yet.");
		}
		set {
			if(m_functionCallCounts == null) {
				m_functionCallCounts = new Dictionary<string, int>();
			}
			if(!m_functionCallCounts.ContainsKey( "set_point" )){
				m_functionCallCounts.Add( "set_point", 0 );
			}
			m_functionCallCounts["set_point"]++;
			
		}
	}

	public UnityEngine.Vector3 sidewaysDir {
		get {
			if(m_functionCallCounts == null) {
				m_functionCallCounts = new Dictionary<string, int>();
			}
			if(!m_functionCallCounts.ContainsKey( "get_sidewaysDir" )){
				m_functionCallCounts.Add( "get_sidewaysDir", 0 );
			}
			m_functionCallCounts["get_sidewaysDir"]++;
			
			throw new NotImplementedException("This function was automatically generated by Mockery and has no real implementation yet.");
		}
		set {
			if(m_functionCallCounts == null) {
				m_functionCallCounts = new Dictionary<string, int>();
			}
			if(!m_functionCallCounts.ContainsKey( "set_sidewaysDir" )){
				m_functionCallCounts.Add( "set_sidewaysDir", 0 );
			}
			m_functionCallCounts["set_sidewaysDir"]++;
			
		}
	}

	public System.Single sidewaysSlip {
		get {
			if(m_functionCallCounts == null) {
				m_functionCallCounts = new Dictionary<string, int>();
			}
			if(!m_functionCallCounts.ContainsKey( "get_sidewaysSlip" )){
				m_functionCallCounts.Add( "get_sidewaysSlip", 0 );
			}
			m_functionCallCounts["get_sidewaysSlip"]++;
			
			throw new NotImplementedException("This function was automatically generated by Mockery and has no real implementation yet.");
		}
		set {
			if(m_functionCallCounts == null) {
				m_functionCallCounts = new Dictionary<string, int>();
			}
			if(!m_functionCallCounts.ContainsKey( "set_sidewaysSlip" )){
				m_functionCallCounts.Add( "set_sidewaysSlip", 0 );
			}
			m_functionCallCounts["set_sidewaysSlip"]++;
			
		}
	}

	public System.Single force {
		get {
			if(m_functionCallCounts == null) {
				m_functionCallCounts = new Dictionary<string, int>();
			}
			if(!m_functionCallCounts.ContainsKey( "get_force" )){
				m_functionCallCounts.Add( "get_force", 0 );
			}
			m_functionCallCounts["get_force"]++;
			
			throw new NotImplementedException("This function was automatically generated by Mockery and has no real implementation yet.");
		}
		set {
			if(m_functionCallCounts == null) {
				m_functionCallCounts = new Dictionary<string, int>();
			}
			if(!m_functionCallCounts.ContainsKey( "set_force" )){
				m_functionCallCounts.Add( "set_force", 0 );
			}
			m_functionCallCounts["set_force"]++;
			
		}
	}

	public UnityEngine.Vector3 normal {
		get {
			if(m_functionCallCounts == null) {
				m_functionCallCounts = new Dictionary<string, int>();
			}
			if(!m_functionCallCounts.ContainsKey( "get_normal" )){
				m_functionCallCounts.Add( "get_normal", 0 );
			}
			m_functionCallCounts["get_normal"]++;
			
			throw new NotImplementedException("This function was automatically generated by Mockery and has no real implementation yet.");
		}
		set {
			if(m_functionCallCounts == null) {
				m_functionCallCounts = new Dictionary<string, int>();
			}
			if(!m_functionCallCounts.ContainsKey( "set_normal" )){
				m_functionCallCounts.Add( "set_normal", 0 );
			}
			m_functionCallCounts["set_normal"]++;
			
		}
	}
}
}
