using System;
using System.Collections;
using System.Collections.Generic;
using System.Runtime.Serialization;


namespace UnityEngine {
[System.Reflection.DefaultMemberAttribute("")]
public class AnimationCurve {
	// Mock data:
	private Dictionary<string, int> m_functionCallCounts;
	public Dictionary<string, int> FunctionCallCounts {
		get { 
			if(m_functionCallCounts == null) {
				m_functionCallCounts = new Dictionary<string, int>();
			}
			return m_functionCallCounts;
		}
	}

	public System.Single Evaluate( System.Single time ){
		//Mock Data:
		if(m_functionCallCounts == null) {
			m_functionCallCounts = new Dictionary<string, int>();
		}
		if(!m_functionCallCounts.ContainsKey( "Single Evaluate(Single)" )){
			m_functionCallCounts.Add( "Single Evaluate(Single)", 0 );
		}
		m_functionCallCounts["Single Evaluate(Single)"]++;
			
		throw new NotImplementedException("This function was automatically generated by Mockery and has no real implementation yet.");
	}

	public System.Int32 AddKey( System.Single time, System.Single value ){
		//Mock Data:
		if(m_functionCallCounts == null) {
			m_functionCallCounts = new Dictionary<string, int>();
		}
		if(!m_functionCallCounts.ContainsKey( "Int32 AddKey(Single, Single)" )){
			m_functionCallCounts.Add( "Int32 AddKey(Single, Single)", 0 );
		}
		m_functionCallCounts["Int32 AddKey(Single, Single)"]++;
			
		throw new NotImplementedException("This function was automatically generated by Mockery and has no real implementation yet.");
	}

	public System.Int32 AddKey( UnityEngine.Keyframe key ){
		//Mock Data:
		if(m_functionCallCounts == null) {
			m_functionCallCounts = new Dictionary<string, int>();
		}
		if(!m_functionCallCounts.ContainsKey( "Int32 AddKey(Keyframe)" )){
			m_functionCallCounts.Add( "Int32 AddKey(Keyframe)", 0 );
		}
		m_functionCallCounts["Int32 AddKey(Keyframe)"]++;
			
		throw new NotImplementedException("This function was automatically generated by Mockery and has no real implementation yet.");
	}

	public System.Int32 MoveKey( System.Int32 index, UnityEngine.Keyframe key ){
		//Mock Data:
		if(m_functionCallCounts == null) {
			m_functionCallCounts = new Dictionary<string, int>();
		}
		if(!m_functionCallCounts.ContainsKey( "Int32 MoveKey(Int32, Keyframe)" )){
			m_functionCallCounts.Add( "Int32 MoveKey(Int32, Keyframe)", 0 );
		}
		m_functionCallCounts["Int32 MoveKey(Int32, Keyframe)"]++;
			
		throw new NotImplementedException("This function was automatically generated by Mockery and has no real implementation yet.");
	}

	public void RemoveKey( System.Int32 index ){
		//Mock Data:
		if(m_functionCallCounts == null) {
			m_functionCallCounts = new Dictionary<string, int>();
		}
		if(!m_functionCallCounts.ContainsKey( "Void RemoveKey(Int32)" )){
			m_functionCallCounts.Add( "Void RemoveKey(Int32)", 0 );
		}
		m_functionCallCounts["Void RemoveKey(Int32)"]++;
			
	}

	public void SmoothTangents( System.Int32 index, System.Single weight ){
		//Mock Data:
		if(m_functionCallCounts == null) {
			m_functionCallCounts = new Dictionary<string, int>();
		}
		if(!m_functionCallCounts.ContainsKey( "Void SmoothTangents(Int32, Single)" )){
			m_functionCallCounts.Add( "Void SmoothTangents(Int32, Single)", 0 );
		}
		m_functionCallCounts["Void SmoothTangents(Int32, Single)"]++;
			
	}

	public static UnityEngine.AnimationCurve Linear( System.Single timeStart, System.Single valueStart, System.Single timeEnd, System.Single valueEnd ){
		throw new NotImplementedException("This function was automatically generated by Mockery and has no real implementation yet.");
	}

	public static UnityEngine.AnimationCurve EaseInOut( System.Single timeStart, System.Single valueStart, System.Single timeEnd, System.Single valueEnd ){
		throw new NotImplementedException("This function was automatically generated by Mockery and has no real implementation yet.");
	}

	public AnimationCurve( UnityEngine.Keyframe[] keys ){
		//Mock Data:
			m_functionCallCounts = new Dictionary<string, int>();
		if(!m_functionCallCounts.ContainsKey( "Void .ctor(Keyframe[])" )){
			m_functionCallCounts.Add( "Void .ctor(Keyframe[])", 0 );
		}
		m_functionCallCounts["Void .ctor(Keyframe[])"]++;
			
	}

	public AnimationCurve( ){
		//Mock Data:
			m_functionCallCounts = new Dictionary<string, int>();
		if(!m_functionCallCounts.ContainsKey( "Void .ctor()" )){
			m_functionCallCounts.Add( "Void .ctor()", 0 );
		}
		m_functionCallCounts["Void .ctor()"]++;
			
	}

	public UnityEngine.Keyframe[] keys {
		get {
			if(m_functionCallCounts == null) {
				m_functionCallCounts = new Dictionary<string, int>();
			}
			if(!m_functionCallCounts.ContainsKey( "get_keys" )){
				m_functionCallCounts.Add( "get_keys", 0 );
			}
			m_functionCallCounts["get_keys"]++;
			
			throw new NotImplementedException("This function was automatically generated by Mockery and has no real implementation yet.");
		}
		set {
			if(m_functionCallCounts == null) {
				m_functionCallCounts = new Dictionary<string, int>();
			}
			if(!m_functionCallCounts.ContainsKey( "set_keys" )){
				m_functionCallCounts.Add( "set_keys", 0 );
			}
			m_functionCallCounts["set_keys"]++;
			
		}
	}

	public UnityEngine.WrapMode postWrapMode {
		get {
			if(m_functionCallCounts == null) {
				m_functionCallCounts = new Dictionary<string, int>();
			}
			if(!m_functionCallCounts.ContainsKey( "get_postWrapMode" )){
				m_functionCallCounts.Add( "get_postWrapMode", 0 );
			}
			m_functionCallCounts["get_postWrapMode"]++;
			
			throw new NotImplementedException("This function was automatically generated by Mockery and has no real implementation yet.");
		}
		set {
			if(m_functionCallCounts == null) {
				m_functionCallCounts = new Dictionary<string, int>();
			}
			if(!m_functionCallCounts.ContainsKey( "set_postWrapMode" )){
				m_functionCallCounts.Add( "set_postWrapMode", 0 );
			}
			m_functionCallCounts["set_postWrapMode"]++;
			
		}
	}

	public UnityEngine.Keyframe Item {
		get {
			if(m_functionCallCounts == null) {
				m_functionCallCounts = new Dictionary<string, int>();
			}
			if(!m_functionCallCounts.ContainsKey( "get_Item" )){
				m_functionCallCounts.Add( "get_Item", 0 );
			}
			m_functionCallCounts["get_Item"]++;
			
			throw new NotImplementedException("This function was automatically generated by Mockery and has no real implementation yet.");
		}
	}

	public UnityEngine.WrapMode preWrapMode {
		get {
			if(m_functionCallCounts == null) {
				m_functionCallCounts = new Dictionary<string, int>();
			}
			if(!m_functionCallCounts.ContainsKey( "get_preWrapMode" )){
				m_functionCallCounts.Add( "get_preWrapMode", 0 );
			}
			m_functionCallCounts["get_preWrapMode"]++;
			
			throw new NotImplementedException("This function was automatically generated by Mockery and has no real implementation yet.");
		}
		set {
			if(m_functionCallCounts == null) {
				m_functionCallCounts = new Dictionary<string, int>();
			}
			if(!m_functionCallCounts.ContainsKey( "set_preWrapMode" )){
				m_functionCallCounts.Add( "set_preWrapMode", 0 );
			}
			m_functionCallCounts["set_preWrapMode"]++;
			
		}
	}

	public System.Int32 length {
		get {
			if(m_functionCallCounts == null) {
				m_functionCallCounts = new Dictionary<string, int>();
			}
			if(!m_functionCallCounts.ContainsKey( "get_length" )){
				m_functionCallCounts.Add( "get_length", 0 );
			}
			m_functionCallCounts["get_length"]++;
			
			throw new NotImplementedException("This function was automatically generated by Mockery and has no real implementation yet.");
		}
	}
}
}
