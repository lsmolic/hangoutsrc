using System;
using System.Collections;
using System.Collections.Generic;
using System.Runtime.Serialization;


namespace UnityEngine {
[UnityEngine.SerializePrivateVariables]
[System.SerializableAttribute]
public class GUIContent {
	// Mock data:
	private Dictionary<string, int> m_functionCallCounts;
	public Dictionary<string, int> FunctionCallCounts {
		get { 
			if(m_functionCallCounts == null) {
				m_functionCallCounts = new Dictionary<string, int>();
			}
			return m_functionCallCounts;
		}
	}

	public GUIContent( ){
		//Mock Data:
			m_functionCallCounts = new Dictionary<string, int>();
		if(!m_functionCallCounts.ContainsKey( "Void .ctor()" )){
			m_functionCallCounts.Add( "Void .ctor()", 0 );
		}
		m_functionCallCounts["Void .ctor()"]++;
			
	}

	public GUIContent( System.String text ){
		//Mock Data:
			m_functionCallCounts = new Dictionary<string, int>();
		if(!m_functionCallCounts.ContainsKey( "Void .ctor(String)" )){
			m_functionCallCounts.Add( "Void .ctor(String)", 0 );
		}
		m_functionCallCounts["Void .ctor(String)"]++;
			
	}

	public GUIContent( UnityEngine.Texture image ){
		//Mock Data:
			m_functionCallCounts = new Dictionary<string, int>();
		if(!m_functionCallCounts.ContainsKey( "Void .ctor(Texture)" )){
			m_functionCallCounts.Add( "Void .ctor(Texture)", 0 );
		}
		m_functionCallCounts["Void .ctor(Texture)"]++;
			
	}

	public GUIContent( System.String text, UnityEngine.Texture image ){
		//Mock Data:
			m_functionCallCounts = new Dictionary<string, int>();
		if(!m_functionCallCounts.ContainsKey( "Void .ctor(String, Texture)" )){
			m_functionCallCounts.Add( "Void .ctor(String, Texture)", 0 );
		}
		m_functionCallCounts["Void .ctor(String, Texture)"]++;
			
	}

	public GUIContent( System.String text, System.String tooltip ){
		//Mock Data:
			m_functionCallCounts = new Dictionary<string, int>();
		if(!m_functionCallCounts.ContainsKey( "Void .ctor(String, String)" )){
			m_functionCallCounts.Add( "Void .ctor(String, String)", 0 );
		}
		m_functionCallCounts["Void .ctor(String, String)"]++;
			
	}

	public GUIContent( UnityEngine.Texture image, System.String tooltip ){
		//Mock Data:
			m_functionCallCounts = new Dictionary<string, int>();
		if(!m_functionCallCounts.ContainsKey( "Void .ctor(Texture, String)" )){
			m_functionCallCounts.Add( "Void .ctor(Texture, String)", 0 );
		}
		m_functionCallCounts["Void .ctor(Texture, String)"]++;
			
	}

	public GUIContent( System.String text, UnityEngine.Texture image, System.String tooltip ){
		//Mock Data:
			m_functionCallCounts = new Dictionary<string, int>();
		if(!m_functionCallCounts.ContainsKey( "Void .ctor(String, Texture, String)" )){
			m_functionCallCounts.Add( "Void .ctor(String, Texture, String)", 0 );
		}
		m_functionCallCounts["Void .ctor(String, Texture, String)"]++;
			
	}

	public GUIContent( UnityEngine.GUIContent src ){
		//Mock Data:
			m_functionCallCounts = new Dictionary<string, int>();
		if(!m_functionCallCounts.ContainsKey( "Void .ctor(GUIContent)" )){
			m_functionCallCounts.Add( "Void .ctor(GUIContent)", 0 );
		}
		m_functionCallCounts["Void .ctor(GUIContent)"]++;
			
	}

	public System.String tooltip {
		get {
			if(m_functionCallCounts == null) {
				m_functionCallCounts = new Dictionary<string, int>();
			}
			if(!m_functionCallCounts.ContainsKey( "get_tooltip" )){
				m_functionCallCounts.Add( "get_tooltip", 0 );
			}
			m_functionCallCounts["get_tooltip"]++;
			
			throw new NotImplementedException("This function was automatically generated by Mockery and has no real implementation yet.");
		}
		set {
			if(m_functionCallCounts == null) {
				m_functionCallCounts = new Dictionary<string, int>();
			}
			if(!m_functionCallCounts.ContainsKey( "set_tooltip" )){
				m_functionCallCounts.Add( "set_tooltip", 0 );
			}
			m_functionCallCounts["set_tooltip"]++;
			
		}
	}

	public System.Int32 hash {
		get {
			if(m_functionCallCounts == null) {
				m_functionCallCounts = new Dictionary<string, int>();
			}
			if(!m_functionCallCounts.ContainsKey( "get_hash" )){
				m_functionCallCounts.Add( "get_hash", 0 );
			}
			m_functionCallCounts["get_hash"]++;
			
			throw new NotImplementedException("This function was automatically generated by Mockery and has no real implementation yet.");
		}
	}

	public System.String text {
		get {
			if(m_functionCallCounts == null) {
				m_functionCallCounts = new Dictionary<string, int>();
			}
			if(!m_functionCallCounts.ContainsKey( "get_text" )){
				m_functionCallCounts.Add( "get_text", 0 );
			}
			m_functionCallCounts["get_text"]++;
			
			throw new NotImplementedException("This function was automatically generated by Mockery and has no real implementation yet.");
		}
		set {
			if(m_functionCallCounts == null) {
				m_functionCallCounts = new Dictionary<string, int>();
			}
			if(!m_functionCallCounts.ContainsKey( "set_text" )){
				m_functionCallCounts.Add( "set_text", 0 );
			}
			m_functionCallCounts["set_text"]++;
			
		}
	}

	public UnityEngine.Texture image {
		get {
			if(m_functionCallCounts == null) {
				m_functionCallCounts = new Dictionary<string, int>();
			}
			if(!m_functionCallCounts.ContainsKey( "get_image" )){
				m_functionCallCounts.Add( "get_image", 0 );
			}
			m_functionCallCounts["get_image"]++;
			
			throw new NotImplementedException("This function was automatically generated by Mockery and has no real implementation yet.");
		}
		set {
			if(m_functionCallCounts == null) {
				m_functionCallCounts = new Dictionary<string, int>();
			}
			if(!m_functionCallCounts.ContainsKey( "set_image" )){
				m_functionCallCounts.Add( "set_image", 0 );
			}
			m_functionCallCounts["set_image"]++;
			
		}
	}
}
}
