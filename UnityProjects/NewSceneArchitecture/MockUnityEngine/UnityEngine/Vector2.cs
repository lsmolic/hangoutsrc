using System;
using System.Collections;
using System.Collections.Generic;
using System.Runtime.Serialization;


namespace UnityEngine
{
	[System.Reflection.DefaultMemberAttribute("")]
	public struct Vector2
	{
		private float m_x;
		private float m_y;

		public Vector2(float x, float y)
		{
			m_functionCallCounts = new Dictionary<string, int>();
			m_x = x;
			m_y = y;
		}

		public float x
		{
			get { return m_x; }
			set { m_x = value; }
		}

		public float y
		{
			get { return m_y; }
			set { m_y = value; }
		}

		// Mock data:
		private Dictionary<string, int> m_functionCallCounts;
		public Dictionary<string, int> FunctionCallCounts
		{
			get
			{
				if (m_functionCallCounts == null)
				{
					m_functionCallCounts = new Dictionary<string, int>();
				}
				return m_functionCallCounts;
			}
		}

		public static UnityEngine.Vector2 Scale(UnityEngine.Vector2 a, UnityEngine.Vector2 b)
		{
			throw new NotImplementedException("This function was automatically generated by Mockery and has no real implementation yet.");
		}

		public override System.String ToString()
		{
			//Mock Data:
			if (m_functionCallCounts == null)
			{
				m_functionCallCounts = new Dictionary<string, int>();
			}
			if (!m_functionCallCounts.ContainsKey("System.String ToString()"))
			{
				m_functionCallCounts.Add("System.String ToString()", 0);
			}
			m_functionCallCounts["System.String ToString()"]++;

			return "(" + this.x + ", " + this.y + ")";
		}

		public override System.Int32 GetHashCode()
		{
			//Mock Data:
			if (m_functionCallCounts == null)
			{
				m_functionCallCounts = new Dictionary<string, int>();
			}
			if (!m_functionCallCounts.ContainsKey("Int32 GetHashCode()"))
			{
				m_functionCallCounts.Add("Int32 GetHashCode()", 0);
			}
			m_functionCallCounts["Int32 GetHashCode()"]++;

			throw new NotImplementedException("This function was automatically generated by Mockery and has no real implementation yet.");
		}

		public override System.Boolean Equals(System.Object other)
		{
			//Mock Data:
			if (m_functionCallCounts == null)
			{
				m_functionCallCounts = new Dictionary<string, int>();
			}
			if (!m_functionCallCounts.ContainsKey("Boolean Equals(System.Object)"))
			{
				m_functionCallCounts.Add("Boolean Equals(System.Object)", 0);
			}
			m_functionCallCounts["Boolean Equals(System.Object)"]++;
			
			if( !(other is Vector2) )
			{
				return false;
			}
			Vector2 otherv2 = (Vector2)other;
			return otherv2.x == this.x && otherv2.y == this.y;
		}

		public static System.Single Dot(UnityEngine.Vector2 lhs, UnityEngine.Vector2 rhs)
		{
			return (lhs.x + rhs.x) * (lhs.y + rhs.y);
		}

		public static System.Single Distance(UnityEngine.Vector2 a, UnityEngine.Vector2 b)
		{
			throw new NotImplementedException("This function was automatically generated by Mockery and has no real implementation yet.");
		}

		public static System.Single SqrMagnitude(UnityEngine.Vector2 a)
		{
			throw new NotImplementedException("This function was automatically generated by Mockery and has no real implementation yet.");
		}

		public System.Single SqrMagnitude()
		{
			//Mock Data:
			if (m_functionCallCounts == null)
			{
				m_functionCallCounts = new Dictionary<string, int>();
			}
			if (!m_functionCallCounts.ContainsKey("Single SqrMagnitude()"))
			{
				m_functionCallCounts.Add("Single SqrMagnitude()", 0);
			}
			m_functionCallCounts["Single SqrMagnitude()"]++;

			throw new NotImplementedException("This function was automatically generated by Mockery and has no real implementation yet.");
		}

		public static UnityEngine.Vector2 operator +(UnityEngine.Vector2 a, UnityEngine.Vector2 b)
		{
			a.x += b.x;
			a.y += b.y;

			return a;
		}

		public static UnityEngine.Vector2 operator -(UnityEngine.Vector2 a, UnityEngine.Vector2 b)
		{
			a.x -= b.x;
			a.y -= b.y;

			return a;
		}

		public static UnityEngine.Vector2 operator !(UnityEngine.Vector2 a)
		{
			throw new NotImplementedException("This function was automatically generated by Mockery and has no real implementation yet.");
		}

		public static UnityEngine.Vector2 operator *(UnityEngine.Vector2 a, System.Single d)
		{
			a.x *= d;
			a.y *= d;

			return a;
		}

		public static UnityEngine.Vector2 operator *(System.Single d, UnityEngine.Vector2 a)
		{
			a.x *= d;
			a.y *= d;

			return a;
		}

		public static UnityEngine.Vector2 operator /(UnityEngine.Vector2 a, System.Single d)
		{
			a.x /= d;
			a.y /= d;

			return a;
		}

		public static implicit operator UnityEngine.Vector2(UnityEngine.Vector3 v)
		{
			return new Vector2(v.x, v.y);
		}

		public static implicit operator UnityEngine.Vector3(UnityEngine.Vector2 v)
		{
			return new Vector3(v.x, v.y, 0.0f);
		}

		public static System.Boolean operator ==(UnityEngine.Vector2 lhs, UnityEngine.Vector2 rhs)
		{
			return lhs.x == rhs.x && lhs.y == rhs.y;
		}

		public static System.Boolean operator !=(UnityEngine.Vector2 lhs, UnityEngine.Vector2 rhs)
		{
			return !(lhs == rhs);
		}

		public System.Single Item
		{
			get
			{
				if (m_functionCallCounts == null)
				{
					m_functionCallCounts = new Dictionary<string, int>();
				}
				if (!m_functionCallCounts.ContainsKey("get_Item"))
				{
					m_functionCallCounts.Add("get_Item", 0);
				}
				m_functionCallCounts["get_Item"]++;

				throw new NotImplementedException("This function was automatically generated by Mockery and has no real implementation yet.");
			}
			set
			{
				if (m_functionCallCounts == null)
				{
					m_functionCallCounts = new Dictionary<string, int>();
				}
				if (!m_functionCallCounts.ContainsKey("set_Item"))
				{
					m_functionCallCounts.Add("set_Item", 0);
				}
				m_functionCallCounts["set_Item"]++;

			}
		}

		public static UnityEngine.Vector2 zero
		{
			get
			{
				return new Vector2(0.0f, 0.0f);
			}
		}

		public System.Single magnitude
		{
			get
			{
				if (m_functionCallCounts == null)
				{
					m_functionCallCounts = new Dictionary<string, int>();
				}
				if (!m_functionCallCounts.ContainsKey("get_magnitude"))
				{
					m_functionCallCounts.Add("get_magnitude", 0);
				}
				m_functionCallCounts["get_magnitude"]++;

				return Mathf.Sqrt(this.sqrMagnitude);
			}
		}

		public static UnityEngine.Vector2 up
		{
			get
			{
				throw new NotImplementedException("This function was automatically generated by Mockery and has no real implementation yet.");
			}
		}

		public static UnityEngine.Vector2 right
		{
			get
			{
				throw new NotImplementedException("This function was automatically generated by Mockery and has no real implementation yet.");
			}
		}

		public System.Single sqrMagnitude
		{
			get
			{
				if (m_functionCallCounts == null)
				{
					m_functionCallCounts = new Dictionary<string, int>();
				}
				if (!m_functionCallCounts.ContainsKey("get_sqrMagnitude"))
				{
					m_functionCallCounts.Add("get_sqrMagnitude", 0);
				}
				m_functionCallCounts["get_sqrMagnitude"]++;

				return Vector2.Dot(this, this);
			}
		}
	}
}
