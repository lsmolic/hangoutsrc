using System;
using System.Collections;
using System.Collections.Generic;
using System.Runtime.Serialization;


namespace UnityEngine
{
	public class AssetBundle : UnityEngine.Object
	{
		// Mock data:
		private Dictionary<string, int> m_functionCallCounts;
		public Dictionary<string, int> FunctionCallCounts
		{
			get
			{
				if (m_functionCallCounts == null)
				{
					m_functionCallCounts = new Dictionary<string, int>();
				}
				return m_functionCallCounts;
			}
		}

		public UnityEngine.Object Load(System.String name)
		{
			//Mock Data:
			if (m_functionCallCounts == null)
			{
				m_functionCallCounts = new Dictionary<string, int>();
			}
			if (!m_functionCallCounts.ContainsKey("UnityEngine.Object Load(System.String)"))
			{
				m_functionCallCounts.Add("UnityEngine.Object Load(System.String)", 0);
			}
			m_functionCallCounts["UnityEngine.Object Load(System.String)"]++;

			throw new NotImplementedException("This function was automatically generated by Mockery and has no real implementation yet.");
		}

		public UnityEngine.Object Load(System.String name, System.Type type)
		{
			//Mock Data:
			if (m_functionCallCounts == null)
			{
				m_functionCallCounts = new Dictionary<string, int>();
			}
			if (!m_functionCallCounts.ContainsKey("UnityEngine.Object Load(System.String, System.Type)"))
			{
				m_functionCallCounts.Add("UnityEngine.Object Load(System.String, System.Type)", 0);
			}
			m_functionCallCounts["UnityEngine.Object Load(System.String, System.Type)"]++;

			throw new NotImplementedException("This function was automatically generated by Mockery and has no real implementation yet.");
		}

		public UnityEngine.Object[] LoadAll(System.Type type)
		{
			//Mock Data:
			if (m_functionCallCounts == null)
			{
				m_functionCallCounts = new Dictionary<string, int>();
			}
			if (!m_functionCallCounts.ContainsKey("UnityEngine.Object[] LoadAll(System.Type)"))
			{
				m_functionCallCounts.Add("UnityEngine.Object[] LoadAll(System.Type)", 0);
			}
			m_functionCallCounts["UnityEngine.Object[] LoadAll(System.Type)"]++;

			throw new NotImplementedException("This function was automatically generated by Mockery and has no real implementation yet.");
		}

		public UnityEngine.Object[] LoadAll()
		{
			//Mock Data:
			if (m_functionCallCounts == null)
			{
				m_functionCallCounts = new Dictionary<string, int>();
			}
			if (!m_functionCallCounts.ContainsKey("UnityEngine.Object[] LoadAll()"))
			{
				m_functionCallCounts.Add("UnityEngine.Object[] LoadAll()", 0);
			}
			m_functionCallCounts["UnityEngine.Object[] LoadAll()"]++;

			throw new NotImplementedException("This function was automatically generated by Mockery and has no real implementation yet.");
		}

		public void Unload(System.Boolean unloadAllLoadedObjects)
		{
			//Mock Data:
			if (m_functionCallCounts == null)
			{
				m_functionCallCounts = new Dictionary<string, int>();
			}
			if (!m_functionCallCounts.ContainsKey("Void Unload(Boolean)"))
			{
				m_functionCallCounts.Add("Void Unload(Boolean)", 0);
			}
			m_functionCallCounts["Void Unload(Boolean)"]++;

		}

		public AssetBundle()
		{
			//Mock Data:
			m_functionCallCounts = new Dictionary<string, int>();
			if (!m_functionCallCounts.ContainsKey("Void .ctor()"))
			{
				m_functionCallCounts.Add("Void .ctor()", 0);
			}
			m_functionCallCounts["Void .ctor()"]++;

		}

		public UnityEngine.Object mainAsset
		{
			get
			{
				if (m_functionCallCounts == null)
				{
					m_functionCallCounts = new Dictionary<string, int>();
				}
				if (!m_functionCallCounts.ContainsKey("get_mainAsset"))
				{
					m_functionCallCounts.Add("get_mainAsset", 0);
				}
				m_functionCallCounts["get_mainAsset"]++;

				throw new NotImplementedException("This function was automatically generated by Mockery and has no real implementation yet.");
			}
		}
	}
}
