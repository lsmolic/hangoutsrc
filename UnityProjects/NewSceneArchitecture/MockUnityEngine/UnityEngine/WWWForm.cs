using System;
using System.Collections;
using System.Collections.Generic;
using System.Runtime.Serialization;


namespace UnityEngine {
public class WWWForm {
	// Mock data:
	private Dictionary<string, int> m_functionCallCounts;
	public Dictionary<string, int> FunctionCallCounts {
		get { 
			if(m_functionCallCounts == null) {
				m_functionCallCounts = new Dictionary<string, int>();
			}
			return m_functionCallCounts;
		}
	}

	public void AddField( System.String fieldName, System.String value ){
		//Mock Data:
		if(m_functionCallCounts == null) {
			m_functionCallCounts = new Dictionary<string, int>();
		}
		if(!m_functionCallCounts.ContainsKey( "Void AddField(System.String, System.String)" )){
			m_functionCallCounts.Add( "Void AddField(System.String, System.String)", 0 );
		}
		m_functionCallCounts["Void AddField(System.String, System.String)"]++;
			
	}

	public void AddField( System.String fieldName, System.String value, System.Text.Encoding e ){
		//Mock Data:
		if(m_functionCallCounts == null) {
			m_functionCallCounts = new Dictionary<string, int>();
		}
		if(!m_functionCallCounts.ContainsKey( "Void AddField(System.String, System.String, System.Text.Encoding)" )){
			m_functionCallCounts.Add( "Void AddField(System.String, System.String, System.Text.Encoding)", 0 );
		}
		m_functionCallCounts["Void AddField(System.String, System.String, System.Text.Encoding)"]++;
			
	}

	public void AddField( System.String fieldName, System.Int32 i ){
		//Mock Data:
		if(m_functionCallCounts == null) {
			m_functionCallCounts = new Dictionary<string, int>();
		}
		if(!m_functionCallCounts.ContainsKey( "Void AddField(System.String, Int32)" )){
			m_functionCallCounts.Add( "Void AddField(System.String, Int32)", 0 );
		}
		m_functionCallCounts["Void AddField(System.String, Int32)"]++;
			
	}

	public void AddBinaryData( System.String fieldName, System.Byte[] contents, System.String fileName ){
		//Mock Data:
		if(m_functionCallCounts == null) {
			m_functionCallCounts = new Dictionary<string, int>();
		}
		if(!m_functionCallCounts.ContainsKey( "Void AddBinaryData(System.String, System.Byte[], System.String)" )){
			m_functionCallCounts.Add( "Void AddBinaryData(System.String, System.Byte[], System.String)", 0 );
		}
		m_functionCallCounts["Void AddBinaryData(System.String, System.Byte[], System.String)"]++;
			
	}

	public void AddBinaryData( System.String fieldName, System.Byte[] contents ){
		//Mock Data:
		if(m_functionCallCounts == null) {
			m_functionCallCounts = new Dictionary<string, int>();
		}
		if(!m_functionCallCounts.ContainsKey( "Void AddBinaryData(System.String, System.Byte[])" )){
			m_functionCallCounts.Add( "Void AddBinaryData(System.String, System.Byte[])", 0 );
		}
		m_functionCallCounts["Void AddBinaryData(System.String, System.Byte[])"]++;
			
	}

	public void AddBinaryData( System.String fieldName, System.Byte[] contents, System.String fileName, System.String mimeType ){
		//Mock Data:
		if(m_functionCallCounts == null) {
			m_functionCallCounts = new Dictionary<string, int>();
		}
		if(!m_functionCallCounts.ContainsKey( "Void AddBinaryData(System.String, System.Byte[], System.String, System.String)" )){
			m_functionCallCounts.Add( "Void AddBinaryData(System.String, System.Byte[], System.String, System.String)", 0 );
		}
		m_functionCallCounts["Void AddBinaryData(System.String, System.Byte[], System.String, System.String)"]++;
			
	}

	public WWWForm( ){
		//Mock Data:
			m_functionCallCounts = new Dictionary<string, int>();
		if(!m_functionCallCounts.ContainsKey( "Void .ctor()" )){
			m_functionCallCounts.Add( "Void .ctor()", 0 );
		}
		m_functionCallCounts["Void .ctor()"]++;
			
	}

	public System.Byte[] data {
		get {
			if(m_functionCallCounts == null) {
				m_functionCallCounts = new Dictionary<string, int>();
			}
			if(!m_functionCallCounts.ContainsKey( "get_data" )){
				m_functionCallCounts.Add( "get_data", 0 );
			}
			m_functionCallCounts["get_data"]++;
			
			throw new NotImplementedException("This function was automatically generated by Mockery and has no real implementation yet.");
		}
	}

	public System.Collections.Hashtable headers {
		get {
			if(m_functionCallCounts == null) {
				m_functionCallCounts = new Dictionary<string, int>();
			}
			if(!m_functionCallCounts.ContainsKey( "get_headers" )){
				m_functionCallCounts.Add( "get_headers", 0 );
			}
			m_functionCallCounts["get_headers"]++;
			
			throw new NotImplementedException("This function was automatically generated by Mockery and has no real implementation yet.");
		}
	}
}
}
