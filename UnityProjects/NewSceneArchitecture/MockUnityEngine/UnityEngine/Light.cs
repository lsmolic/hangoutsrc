using System;
using System.Collections;
using System.Collections.Generic;
using System.Runtime.Serialization;


namespace UnityEngine {
public class Light : UnityEngine.Behaviour {
	// Mock data:
	private Dictionary<string, int> m_functionCallCounts;
	public Dictionary<string, int> FunctionCallCounts {
		get { 
			if(m_functionCallCounts == null) {
				m_functionCallCounts = new Dictionary<string, int>();
			}
			return m_functionCallCounts;
		}
	}

	public static UnityEngine.Light[] GetLights( UnityEngine.LightType type, System.Int32 layer ){
		throw new NotImplementedException("This function was automatically generated by Mockery and has no real implementation yet.");
	}

	public Light( ){
		//Mock Data:
			m_functionCallCounts = new Dictionary<string, int>();
		if(!m_functionCallCounts.ContainsKey( "Void .ctor()" )){
			m_functionCallCounts.Add( "Void .ctor()", 0 );
		}
		m_functionCallCounts["Void .ctor()"]++;
			
	}

	public UnityEngine.LightType type {
		get {
			if(m_functionCallCounts == null) {
				m_functionCallCounts = new Dictionary<string, int>();
			}
			if(!m_functionCallCounts.ContainsKey( "get_type" )){
				m_functionCallCounts.Add( "get_type", 0 );
			}
			m_functionCallCounts["get_type"]++;
			
			throw new NotImplementedException("This function was automatically generated by Mockery and has no real implementation yet.");
		}
		set {
			if(m_functionCallCounts == null) {
				m_functionCallCounts = new Dictionary<string, int>();
			}
			if(!m_functionCallCounts.ContainsKey( "set_type" )){
				m_functionCallCounts.Add( "set_type", 0 );
			}
			m_functionCallCounts["set_type"]++;
			
		}
	}

	public UnityEngine.LightShadows shadows {
		get {
			if(m_functionCallCounts == null) {
				m_functionCallCounts = new Dictionary<string, int>();
			}
			if(!m_functionCallCounts.ContainsKey( "get_shadows" )){
				m_functionCallCounts.Add( "get_shadows", 0 );
			}
			m_functionCallCounts["get_shadows"]++;
			
			throw new NotImplementedException("This function was automatically generated by Mockery and has no real implementation yet.");
		}
		set {
			if(m_functionCallCounts == null) {
				m_functionCallCounts = new Dictionary<string, int>();
			}
			if(!m_functionCallCounts.ContainsKey( "set_shadows" )){
				m_functionCallCounts.Add( "set_shadows", 0 );
			}
			m_functionCallCounts["set_shadows"]++;
			
		}
	}

	public UnityEngine.Texture cookie {
		get {
			if(m_functionCallCounts == null) {
				m_functionCallCounts = new Dictionary<string, int>();
			}
			if(!m_functionCallCounts.ContainsKey( "get_cookie" )){
				m_functionCallCounts.Add( "get_cookie", 0 );
			}
			m_functionCallCounts["get_cookie"]++;
			
			throw new NotImplementedException("This function was automatically generated by Mockery and has no real implementation yet.");
		}
		set {
			if(m_functionCallCounts == null) {
				m_functionCallCounts = new Dictionary<string, int>();
			}
			if(!m_functionCallCounts.ContainsKey( "set_cookie" )){
				m_functionCallCounts.Add( "set_cookie", 0 );
			}
			m_functionCallCounts["set_cookie"]++;
			
		}
	}

	public System.Single shadowConstantBias {
		get {
			if(m_functionCallCounts == null) {
				m_functionCallCounts = new Dictionary<string, int>();
			}
			if(!m_functionCallCounts.ContainsKey( "get_shadowConstantBias" )){
				m_functionCallCounts.Add( "get_shadowConstantBias", 0 );
			}
			m_functionCallCounts["get_shadowConstantBias"]++;
			
			throw new NotImplementedException("This function was automatically generated by Mockery and has no real implementation yet.");
		}
		set {
			if(m_functionCallCounts == null) {
				m_functionCallCounts = new Dictionary<string, int>();
			}
			if(!m_functionCallCounts.ContainsKey( "set_shadowConstantBias" )){
				m_functionCallCounts.Add( "set_shadowConstantBias", 0 );
			}
			m_functionCallCounts["set_shadowConstantBias"]++;
			
		}
	}

	public static System.Int32 pixelLightCount {
		get {
			throw new NotImplementedException("This function was automatically generated by Mockery and has no real implementation yet.");
		}
		set {
		}
	}

	public System.Boolean attenuate {
		get {
			if(m_functionCallCounts == null) {
				m_functionCallCounts = new Dictionary<string, int>();
			}
			if(!m_functionCallCounts.ContainsKey( "get_attenuate" )){
				m_functionCallCounts.Add( "get_attenuate", 0 );
			}
			m_functionCallCounts["get_attenuate"]++;
			
			throw new NotImplementedException("This function was automatically generated by Mockery and has no real implementation yet.");
		}
		set {
			if(m_functionCallCounts == null) {
				m_functionCallCounts = new Dictionary<string, int>();
			}
			if(!m_functionCallCounts.ContainsKey( "set_attenuate" )){
				m_functionCallCounts.Add( "set_attenuate", 0 );
			}
			m_functionCallCounts["set_attenuate"]++;
			
		}
	}

	public UnityEngine.LightRenderMode renderMode {
		get {
			if(m_functionCallCounts == null) {
				m_functionCallCounts = new Dictionary<string, int>();
			}
			if(!m_functionCallCounts.ContainsKey( "get_renderMode" )){
				m_functionCallCounts.Add( "get_renderMode", 0 );
			}
			m_functionCallCounts["get_renderMode"]++;
			
			throw new NotImplementedException("This function was automatically generated by Mockery and has no real implementation yet.");
		}
		set {
			if(m_functionCallCounts == null) {
				m_functionCallCounts = new Dictionary<string, int>();
			}
			if(!m_functionCallCounts.ContainsKey( "set_renderMode" )){
				m_functionCallCounts.Add( "set_renderMode", 0 );
			}
			m_functionCallCounts["set_renderMode"]++;
			
		}
	}

	public System.Single spotAngle {
		get {
			if(m_functionCallCounts == null) {
				m_functionCallCounts = new Dictionary<string, int>();
			}
			if(!m_functionCallCounts.ContainsKey( "get_spotAngle" )){
				m_functionCallCounts.Add( "get_spotAngle", 0 );
			}
			m_functionCallCounts["get_spotAngle"]++;
			
			throw new NotImplementedException("This function was automatically generated by Mockery and has no real implementation yet.");
		}
		set {
			if(m_functionCallCounts == null) {
				m_functionCallCounts = new Dictionary<string, int>();
			}
			if(!m_functionCallCounts.ContainsKey( "set_spotAngle" )){
				m_functionCallCounts.Add( "set_spotAngle", 0 );
			}
			m_functionCallCounts["set_spotAngle"]++;
			
		}
	}

	public System.Int32 cullingMask {
		get {
			if(m_functionCallCounts == null) {
				m_functionCallCounts = new Dictionary<string, int>();
			}
			if(!m_functionCallCounts.ContainsKey( "get_cullingMask" )){
				m_functionCallCounts.Add( "get_cullingMask", 0 );
			}
			m_functionCallCounts["get_cullingMask"]++;
			
			throw new NotImplementedException("This function was automatically generated by Mockery and has no real implementation yet.");
		}
		set {
			if(m_functionCallCounts == null) {
				m_functionCallCounts = new Dictionary<string, int>();
			}
			if(!m_functionCallCounts.ContainsKey( "set_cullingMask" )){
				m_functionCallCounts.Add( "set_cullingMask", 0 );
			}
			m_functionCallCounts["set_cullingMask"]++;
			
		}
	}

	public System.Single shadowStrength {
		get {
			if(m_functionCallCounts == null) {
				m_functionCallCounts = new Dictionary<string, int>();
			}
			if(!m_functionCallCounts.ContainsKey( "get_shadowStrength" )){
				m_functionCallCounts.Add( "get_shadowStrength", 0 );
			}
			m_functionCallCounts["get_shadowStrength"]++;
			
			throw new NotImplementedException("This function was automatically generated by Mockery and has no real implementation yet.");
		}
		set {
			if(m_functionCallCounts == null) {
				m_functionCallCounts = new Dictionary<string, int>();
			}
			if(!m_functionCallCounts.ContainsKey( "set_shadowStrength" )){
				m_functionCallCounts.Add( "set_shadowStrength", 0 );
			}
			m_functionCallCounts["set_shadowStrength"]++;
			
		}
	}

	public System.Single intensity {
		get {
			if(m_functionCallCounts == null) {
				m_functionCallCounts = new Dictionary<string, int>();
			}
			if(!m_functionCallCounts.ContainsKey( "get_intensity" )){
				m_functionCallCounts.Add( "get_intensity", 0 );
			}
			m_functionCallCounts["get_intensity"]++;
			
			throw new NotImplementedException("This function was automatically generated by Mockery and has no real implementation yet.");
		}
		set {
			if(m_functionCallCounts == null) {
				m_functionCallCounts = new Dictionary<string, int>();
			}
			if(!m_functionCallCounts.ContainsKey( "set_intensity" )){
				m_functionCallCounts.Add( "set_intensity", 0 );
			}
			m_functionCallCounts["set_intensity"]++;
			
		}
	}

	public UnityEngine.Color color {
		get {
			if(m_functionCallCounts == null) {
				m_functionCallCounts = new Dictionary<string, int>();
			}
			if(!m_functionCallCounts.ContainsKey( "get_color" )){
				m_functionCallCounts.Add( "get_color", 0 );
			}
			m_functionCallCounts["get_color"]++;
			
			throw new NotImplementedException("This function was automatically generated by Mockery and has no real implementation yet.");
		}
		set {
			if(m_functionCallCounts == null) {
				m_functionCallCounts = new Dictionary<string, int>();
			}
			if(!m_functionCallCounts.ContainsKey( "set_color" )){
				m_functionCallCounts.Add( "set_color", 0 );
			}
			m_functionCallCounts["set_color"]++;
			
		}
	}

	public System.Single range {
		get {
			if(m_functionCallCounts == null) {
				m_functionCallCounts = new Dictionary<string, int>();
			}
			if(!m_functionCallCounts.ContainsKey( "get_range" )){
				m_functionCallCounts.Add( "get_range", 0 );
			}
			m_functionCallCounts["get_range"]++;
			
			throw new NotImplementedException("This function was automatically generated by Mockery and has no real implementation yet.");
		}
		set {
			if(m_functionCallCounts == null) {
				m_functionCallCounts = new Dictionary<string, int>();
			}
			if(!m_functionCallCounts.ContainsKey( "set_range" )){
				m_functionCallCounts.Add( "set_range", 0 );
			}
			m_functionCallCounts["set_range"]++;
			
		}
	}

	public System.Single shadowObjectSizeBias {
		get {
			if(m_functionCallCounts == null) {
				m_functionCallCounts = new Dictionary<string, int>();
			}
			if(!m_functionCallCounts.ContainsKey( "get_shadowObjectSizeBias" )){
				m_functionCallCounts.Add( "get_shadowObjectSizeBias", 0 );
			}
			m_functionCallCounts["get_shadowObjectSizeBias"]++;
			
			throw new NotImplementedException("This function was automatically generated by Mockery and has no real implementation yet.");
		}
		set {
			if(m_functionCallCounts == null) {
				m_functionCallCounts = new Dictionary<string, int>();
			}
			if(!m_functionCallCounts.ContainsKey( "set_shadowObjectSizeBias" )){
				m_functionCallCounts.Add( "set_shadowObjectSizeBias", 0 );
			}
			m_functionCallCounts["set_shadowObjectSizeBias"]++;
			
		}
	}

	public UnityEngine.Flare flare {
		get {
			if(m_functionCallCounts == null) {
				m_functionCallCounts = new Dictionary<string, int>();
			}
			if(!m_functionCallCounts.ContainsKey( "get_flare" )){
				m_functionCallCounts.Add( "get_flare", 0 );
			}
			m_functionCallCounts["get_flare"]++;
			
			throw new NotImplementedException("This function was automatically generated by Mockery and has no real implementation yet.");
		}
		set {
			if(m_functionCallCounts == null) {
				m_functionCallCounts = new Dictionary<string, int>();
			}
			if(!m_functionCallCounts.ContainsKey( "set_flare" )){
				m_functionCallCounts.Add( "set_flare", 0 );
			}
			m_functionCallCounts["set_flare"]++;
			
		}
	}
}
}
