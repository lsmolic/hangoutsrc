using System;
using System.Collections;
using System.Collections.Generic;
using System.Runtime.Serialization;


namespace UnityEngine {
public class GUILayoutEntry {
	// Mock data:
	private Dictionary<string, int> m_functionCallCounts;
	public Dictionary<string, int> FunctionCallCounts {
		get { 
			if(m_functionCallCounts == null) {
				m_functionCallCounts = new Dictionary<string, int>();
			}
			return m_functionCallCounts;
		}
	}

	public virtual void CalcWidth( ){
		//Mock Data:
		if(m_functionCallCounts == null) {
			m_functionCallCounts = new Dictionary<string, int>();
		}
		if(!m_functionCallCounts.ContainsKey( "Void CalcWidth()" )){
			m_functionCallCounts.Add( "Void CalcWidth()", 0 );
		}
		m_functionCallCounts["Void CalcWidth()"]++;
			
	}

	public virtual void CalcHeight( ){
		//Mock Data:
		if(m_functionCallCounts == null) {
			m_functionCallCounts = new Dictionary<string, int>();
		}
		if(!m_functionCallCounts.ContainsKey( "Void CalcHeight()" )){
			m_functionCallCounts.Add( "Void CalcHeight()", 0 );
		}
		m_functionCallCounts["Void CalcHeight()"]++;
			
	}

	public virtual void SetHorizontal( System.Single x, System.Single width ){
		//Mock Data:
		if(m_functionCallCounts == null) {
			m_functionCallCounts = new Dictionary<string, int>();
		}
		if(!m_functionCallCounts.ContainsKey( "Void SetHorizontal(Single, Single)" )){
			m_functionCallCounts.Add( "Void SetHorizontal(Single, Single)", 0 );
		}
		m_functionCallCounts["Void SetHorizontal(Single, Single)"]++;
			
	}

	public virtual void SetVertical( System.Single y, System.Single height ){
		//Mock Data:
		if(m_functionCallCounts == null) {
			m_functionCallCounts = new Dictionary<string, int>();
		}
		if(!m_functionCallCounts.ContainsKey( "Void SetVertical(Single, Single)" )){
			m_functionCallCounts.Add( "Void SetVertical(Single, Single)", 0 );
		}
		m_functionCallCounts["Void SetVertical(Single, Single)"]++;
			
	}

	public virtual void ApplyOptions( UnityEngine.GUILayoutOption[] options ){
		//Mock Data:
		if(m_functionCallCounts == null) {
			m_functionCallCounts = new Dictionary<string, int>();
		}
		if(!m_functionCallCounts.ContainsKey( "Void ApplyOptions(UnityEngine.GUILayoutOption[])" )){
			m_functionCallCounts.Add( "Void ApplyOptions(UnityEngine.GUILayoutOption[])", 0 );
		}
		m_functionCallCounts["Void ApplyOptions(UnityEngine.GUILayoutOption[])"]++;
			
	}

	public override System.String ToString( ){
		//Mock Data:
		if(m_functionCallCounts == null) {
			m_functionCallCounts = new Dictionary<string, int>();
		}
		if(!m_functionCallCounts.ContainsKey( "System.String ToString()" )){
			m_functionCallCounts.Add( "System.String ToString()", 0 );
		}
		m_functionCallCounts["System.String ToString()"]++;
			
		throw new NotImplementedException("This function was automatically generated by Mockery and has no real implementation yet.");
	}

	public GUILayoutEntry( System.Single _minWidth, System.Single _maxWidth, System.Single _minHeight, System.Single _maxHeight, UnityEngine.GUIStyle _style ){
		//Mock Data:
			m_functionCallCounts = new Dictionary<string, int>();
		if(!m_functionCallCounts.ContainsKey( "Void .ctor(Single, Single, Single, Single, GUIStyle)" )){
			m_functionCallCounts.Add( "Void .ctor(Single, Single, Single, Single, GUIStyle)", 0 );
		}
		m_functionCallCounts["Void .ctor(Single, Single, Single, Single, GUIStyle)"]++;
			
	}

	public GUILayoutEntry( System.Single _minWidth, System.Single _maxWidth, System.Single _minHeight, System.Single _maxHeight, UnityEngine.GUIStyle _style, UnityEngine.GUILayoutOption[] options ){
		//Mock Data:
			m_functionCallCounts = new Dictionary<string, int>();
		if(!m_functionCallCounts.ContainsKey( "Void .ctor(Single, Single, Single, Single, GUIStyle, GUILayoutOption[])" )){
			m_functionCallCounts.Add( "Void .ctor(Single, Single, Single, Single, GUIStyle, GUILayoutOption[])", 0 );
		}
		m_functionCallCounts["Void .ctor(Single, Single, Single, Single, GUIStyle, GUILayoutOption[])"]++;
			
	}

	public virtual UnityEngine.RectOffset margin {
		get {
			if(m_functionCallCounts == null) {
				m_functionCallCounts = new Dictionary<string, int>();
			}
			if(!m_functionCallCounts.ContainsKey( "get_margin" )){
				m_functionCallCounts.Add( "get_margin", 0 );
			}
			m_functionCallCounts["get_margin"]++;
			
			throw new NotImplementedException("This function was automatically generated by Mockery and has no real implementation yet.");
		}
	}

	public UnityEngine.GUIStyle style {
		get {
			if(m_functionCallCounts == null) {
				m_functionCallCounts = new Dictionary<string, int>();
			}
			if(!m_functionCallCounts.ContainsKey( "get_style" )){
				m_functionCallCounts.Add( "get_style", 0 );
			}
			m_functionCallCounts["get_style"]++;
			
			throw new NotImplementedException("This function was automatically generated by Mockery and has no real implementation yet.");
		}
		set {
			if(m_functionCallCounts == null) {
				m_functionCallCounts = new Dictionary<string, int>();
			}
			if(!m_functionCallCounts.ContainsKey( "set_style" )){
				m_functionCallCounts.Add( "set_style", 0 );
			}
			m_functionCallCounts["set_style"]++;
			
		}
	}
}
}
