using System;
using System.Collections;
using System.Collections.Generic;
using System.Runtime.Serialization;


namespace UnityEngine {
public struct JointLimits {
	// Mock data:
	private Dictionary<string, int> m_functionCallCounts;
	public Dictionary<string, int> FunctionCallCounts {
		get { 
			if(m_functionCallCounts == null) {
				m_functionCallCounts = new Dictionary<string, int>();
			}
			return m_functionCallCounts;
		}
	}

	public System.Single maxBounce {
		get {
			if(m_functionCallCounts == null) {
				m_functionCallCounts = new Dictionary<string, int>();
			}
			if(!m_functionCallCounts.ContainsKey( "get_maxBounce" )){
				m_functionCallCounts.Add( "get_maxBounce", 0 );
			}
			m_functionCallCounts["get_maxBounce"]++;
			
			throw new NotImplementedException("This function was automatically generated by Mockery and has no real implementation yet.");
		}
		set {
			if(m_functionCallCounts == null) {
				m_functionCallCounts = new Dictionary<string, int>();
			}
			if(!m_functionCallCounts.ContainsKey( "set_maxBounce" )){
				m_functionCallCounts.Add( "set_maxBounce", 0 );
			}
			m_functionCallCounts["set_maxBounce"]++;
			
		}
	}

	public System.Single minBounce {
		get {
			if(m_functionCallCounts == null) {
				m_functionCallCounts = new Dictionary<string, int>();
			}
			if(!m_functionCallCounts.ContainsKey( "get_minBounce" )){
				m_functionCallCounts.Add( "get_minBounce", 0 );
			}
			m_functionCallCounts["get_minBounce"]++;
			
			throw new NotImplementedException("This function was automatically generated by Mockery and has no real implementation yet.");
		}
		set {
			if(m_functionCallCounts == null) {
				m_functionCallCounts = new Dictionary<string, int>();
			}
			if(!m_functionCallCounts.ContainsKey( "set_minBounce" )){
				m_functionCallCounts.Add( "set_minBounce", 0 );
			}
			m_functionCallCounts["set_minBounce"]++;
			
		}
	}

	public System.Single min {
		get {
			if(m_functionCallCounts == null) {
				m_functionCallCounts = new Dictionary<string, int>();
			}
			if(!m_functionCallCounts.ContainsKey( "get_min" )){
				m_functionCallCounts.Add( "get_min", 0 );
			}
			m_functionCallCounts["get_min"]++;
			
			throw new NotImplementedException("This function was automatically generated by Mockery and has no real implementation yet.");
		}
		set {
			if(m_functionCallCounts == null) {
				m_functionCallCounts = new Dictionary<string, int>();
			}
			if(!m_functionCallCounts.ContainsKey( "set_min" )){
				m_functionCallCounts.Add( "set_min", 0 );
			}
			m_functionCallCounts["set_min"]++;
			
		}
	}

	public System.Single max {
		get {
			if(m_functionCallCounts == null) {
				m_functionCallCounts = new Dictionary<string, int>();
			}
			if(!m_functionCallCounts.ContainsKey( "get_max" )){
				m_functionCallCounts.Add( "get_max", 0 );
			}
			m_functionCallCounts["get_max"]++;
			
			throw new NotImplementedException("This function was automatically generated by Mockery and has no real implementation yet.");
		}
		set {
			if(m_functionCallCounts == null) {
				m_functionCallCounts = new Dictionary<string, int>();
			}
			if(!m_functionCallCounts.ContainsKey( "set_max" )){
				m_functionCallCounts.Add( "set_max", 0 );
			}
			m_functionCallCounts["set_max"]++;
			
		}
	}
}
}
