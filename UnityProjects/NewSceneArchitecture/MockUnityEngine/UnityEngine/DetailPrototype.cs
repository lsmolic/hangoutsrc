using System;
using System.Collections;
using System.Collections.Generic;
using System.Runtime.Serialization;


namespace UnityEngine {
public class DetailPrototype {
	// Mock data:
	private Dictionary<string, int> m_functionCallCounts;
	public Dictionary<string, int> FunctionCallCounts {
		get { 
			if(m_functionCallCounts == null) {
				m_functionCallCounts = new Dictionary<string, int>();
			}
			return m_functionCallCounts;
		}
	}

	public DetailPrototype( ){
		//Mock Data:
			m_functionCallCounts = new Dictionary<string, int>();
		if(!m_functionCallCounts.ContainsKey( "Void .ctor()" )){
			m_functionCallCounts.Add( "Void .ctor()", 0 );
		}
		m_functionCallCounts["Void .ctor()"]++;
			
	}

	public UnityEngine.GameObject prototype {
		get {
			if(m_functionCallCounts == null) {
				m_functionCallCounts = new Dictionary<string, int>();
			}
			if(!m_functionCallCounts.ContainsKey( "get_prototype" )){
				m_functionCallCounts.Add( "get_prototype", 0 );
			}
			m_functionCallCounts["get_prototype"]++;
			
			throw new NotImplementedException("This function was automatically generated by Mockery and has no real implementation yet.");
		}
		set {
			if(m_functionCallCounts == null) {
				m_functionCallCounts = new Dictionary<string, int>();
			}
			if(!m_functionCallCounts.ContainsKey( "set_prototype" )){
				m_functionCallCounts.Add( "set_prototype", 0 );
			}
			m_functionCallCounts["set_prototype"]++;
			
		}
	}

	public UnityEngine.Texture2D prototypeTexture {
		get {
			if(m_functionCallCounts == null) {
				m_functionCallCounts = new Dictionary<string, int>();
			}
			if(!m_functionCallCounts.ContainsKey( "get_prototypeTexture" )){
				m_functionCallCounts.Add( "get_prototypeTexture", 0 );
			}
			m_functionCallCounts["get_prototypeTexture"]++;
			
			throw new NotImplementedException("This function was automatically generated by Mockery and has no real implementation yet.");
		}
		set {
			if(m_functionCallCounts == null) {
				m_functionCallCounts = new Dictionary<string, int>();
			}
			if(!m_functionCallCounts.ContainsKey( "set_prototypeTexture" )){
				m_functionCallCounts.Add( "set_prototypeTexture", 0 );
			}
			m_functionCallCounts["set_prototypeTexture"]++;
			
		}
	}

	public System.Single noiseSpread {
		get {
			if(m_functionCallCounts == null) {
				m_functionCallCounts = new Dictionary<string, int>();
			}
			if(!m_functionCallCounts.ContainsKey( "get_noiseSpread" )){
				m_functionCallCounts.Add( "get_noiseSpread", 0 );
			}
			m_functionCallCounts["get_noiseSpread"]++;
			
			throw new NotImplementedException("This function was automatically generated by Mockery and has no real implementation yet.");
		}
		set {
			if(m_functionCallCounts == null) {
				m_functionCallCounts = new Dictionary<string, int>();
			}
			if(!m_functionCallCounts.ContainsKey( "set_noiseSpread" )){
				m_functionCallCounts.Add( "set_noiseSpread", 0 );
			}
			m_functionCallCounts["set_noiseSpread"]++;
			
		}
	}

	public System.Single lightmapFactor {
		get {
			if(m_functionCallCounts == null) {
				m_functionCallCounts = new Dictionary<string, int>();
			}
			if(!m_functionCallCounts.ContainsKey( "get_lightmapFactor" )){
				m_functionCallCounts.Add( "get_lightmapFactor", 0 );
			}
			m_functionCallCounts["get_lightmapFactor"]++;
			
			throw new NotImplementedException("This function was automatically generated by Mockery and has no real implementation yet.");
		}
		set {
			if(m_functionCallCounts == null) {
				m_functionCallCounts = new Dictionary<string, int>();
			}
			if(!m_functionCallCounts.ContainsKey( "set_lightmapFactor" )){
				m_functionCallCounts.Add( "set_lightmapFactor", 0 );
			}
			m_functionCallCounts["set_lightmapFactor"]++;
			
		}
	}

	public UnityEngine.Color healthyColor {
		get {
			if(m_functionCallCounts == null) {
				m_functionCallCounts = new Dictionary<string, int>();
			}
			if(!m_functionCallCounts.ContainsKey( "get_healthyColor" )){
				m_functionCallCounts.Add( "get_healthyColor", 0 );
			}
			m_functionCallCounts["get_healthyColor"]++;
			
			throw new NotImplementedException("This function was automatically generated by Mockery and has no real implementation yet.");
		}
		set {
			if(m_functionCallCounts == null) {
				m_functionCallCounts = new Dictionary<string, int>();
			}
			if(!m_functionCallCounts.ContainsKey( "set_healthyColor" )){
				m_functionCallCounts.Add( "set_healthyColor", 0 );
			}
			m_functionCallCounts["set_healthyColor"]++;
			
		}
	}

	public System.Single maxHeight {
		get {
			if(m_functionCallCounts == null) {
				m_functionCallCounts = new Dictionary<string, int>();
			}
			if(!m_functionCallCounts.ContainsKey( "get_maxHeight" )){
				m_functionCallCounts.Add( "get_maxHeight", 0 );
			}
			m_functionCallCounts["get_maxHeight"]++;
			
			throw new NotImplementedException("This function was automatically generated by Mockery and has no real implementation yet.");
		}
		set {
			if(m_functionCallCounts == null) {
				m_functionCallCounts = new Dictionary<string, int>();
			}
			if(!m_functionCallCounts.ContainsKey( "set_maxHeight" )){
				m_functionCallCounts.Add( "set_maxHeight", 0 );
			}
			m_functionCallCounts["set_maxHeight"]++;
			
		}
	}

	public System.Single maxWidth {
		get {
			if(m_functionCallCounts == null) {
				m_functionCallCounts = new Dictionary<string, int>();
			}
			if(!m_functionCallCounts.ContainsKey( "get_maxWidth" )){
				m_functionCallCounts.Add( "get_maxWidth", 0 );
			}
			m_functionCallCounts["get_maxWidth"]++;
			
			throw new NotImplementedException("This function was automatically generated by Mockery and has no real implementation yet.");
		}
		set {
			if(m_functionCallCounts == null) {
				m_functionCallCounts = new Dictionary<string, int>();
			}
			if(!m_functionCallCounts.ContainsKey( "set_maxWidth" )){
				m_functionCallCounts.Add( "set_maxWidth", 0 );
			}
			m_functionCallCounts["set_maxWidth"]++;
			
		}
	}

	public UnityEngine.Color dryColor {
		get {
			if(m_functionCallCounts == null) {
				m_functionCallCounts = new Dictionary<string, int>();
			}
			if(!m_functionCallCounts.ContainsKey( "get_dryColor" )){
				m_functionCallCounts.Add( "get_dryColor", 0 );
			}
			m_functionCallCounts["get_dryColor"]++;
			
			throw new NotImplementedException("This function was automatically generated by Mockery and has no real implementation yet.");
		}
		set {
			if(m_functionCallCounts == null) {
				m_functionCallCounts = new Dictionary<string, int>();
			}
			if(!m_functionCallCounts.ContainsKey( "set_dryColor" )){
				m_functionCallCounts.Add( "set_dryColor", 0 );
			}
			m_functionCallCounts["set_dryColor"]++;
			
		}
	}

	public System.Single bendFactor {
		get {
			if(m_functionCallCounts == null) {
				m_functionCallCounts = new Dictionary<string, int>();
			}
			if(!m_functionCallCounts.ContainsKey( "get_bendFactor" )){
				m_functionCallCounts.Add( "get_bendFactor", 0 );
			}
			m_functionCallCounts["get_bendFactor"]++;
			
			throw new NotImplementedException("This function was automatically generated by Mockery and has no real implementation yet.");
		}
		set {
			if(m_functionCallCounts == null) {
				m_functionCallCounts = new Dictionary<string, int>();
			}
			if(!m_functionCallCounts.ContainsKey( "set_bendFactor" )){
				m_functionCallCounts.Add( "set_bendFactor", 0 );
			}
			m_functionCallCounts["set_bendFactor"]++;
			
		}
	}

	public UnityEngine.DetailRenderMode renderMode {
		get {
			if(m_functionCallCounts == null) {
				m_functionCallCounts = new Dictionary<string, int>();
			}
			if(!m_functionCallCounts.ContainsKey( "get_renderMode" )){
				m_functionCallCounts.Add( "get_renderMode", 0 );
			}
			m_functionCallCounts["get_renderMode"]++;
			
			throw new NotImplementedException("This function was automatically generated by Mockery and has no real implementation yet.");
		}
		set {
			if(m_functionCallCounts == null) {
				m_functionCallCounts = new Dictionary<string, int>();
			}
			if(!m_functionCallCounts.ContainsKey( "set_renderMode" )){
				m_functionCallCounts.Add( "set_renderMode", 0 );
			}
			m_functionCallCounts["set_renderMode"]++;
			
		}
	}

	public System.Single minHeight {
		get {
			if(m_functionCallCounts == null) {
				m_functionCallCounts = new Dictionary<string, int>();
			}
			if(!m_functionCallCounts.ContainsKey( "get_minHeight" )){
				m_functionCallCounts.Add( "get_minHeight", 0 );
			}
			m_functionCallCounts["get_minHeight"]++;
			
			throw new NotImplementedException("This function was automatically generated by Mockery and has no real implementation yet.");
		}
		set {
			if(m_functionCallCounts == null) {
				m_functionCallCounts = new Dictionary<string, int>();
			}
			if(!m_functionCallCounts.ContainsKey( "set_minHeight" )){
				m_functionCallCounts.Add( "set_minHeight", 0 );
			}
			m_functionCallCounts["set_minHeight"]++;
			
		}
	}

	public System.Boolean grayscaleLighting {
		get {
			if(m_functionCallCounts == null) {
				m_functionCallCounts = new Dictionary<string, int>();
			}
			if(!m_functionCallCounts.ContainsKey( "get_grayscaleLighting" )){
				m_functionCallCounts.Add( "get_grayscaleLighting", 0 );
			}
			m_functionCallCounts["get_grayscaleLighting"]++;
			
			throw new NotImplementedException("This function was automatically generated by Mockery and has no real implementation yet.");
		}
		set {
			if(m_functionCallCounts == null) {
				m_functionCallCounts = new Dictionary<string, int>();
			}
			if(!m_functionCallCounts.ContainsKey( "set_grayscaleLighting" )){
				m_functionCallCounts.Add( "set_grayscaleLighting", 0 );
			}
			m_functionCallCounts["set_grayscaleLighting"]++;
			
		}
	}

	public System.Single minWidth {
		get {
			if(m_functionCallCounts == null) {
				m_functionCallCounts = new Dictionary<string, int>();
			}
			if(!m_functionCallCounts.ContainsKey( "get_minWidth" )){
				m_functionCallCounts.Add( "get_minWidth", 0 );
			}
			m_functionCallCounts["get_minWidth"]++;
			
			throw new NotImplementedException("This function was automatically generated by Mockery and has no real implementation yet.");
		}
		set {
			if(m_functionCallCounts == null) {
				m_functionCallCounts = new Dictionary<string, int>();
			}
			if(!m_functionCallCounts.ContainsKey( "set_minWidth" )){
				m_functionCallCounts.Add( "set_minWidth", 0 );
			}
			m_functionCallCounts["set_minWidth"]++;
			
		}
	}

	public System.Boolean usePrototypeMesh {
		get {
			if(m_functionCallCounts == null) {
				m_functionCallCounts = new Dictionary<string, int>();
			}
			if(!m_functionCallCounts.ContainsKey( "get_usePrototypeMesh" )){
				m_functionCallCounts.Add( "get_usePrototypeMesh", 0 );
			}
			m_functionCallCounts["get_usePrototypeMesh"]++;
			
			throw new NotImplementedException("This function was automatically generated by Mockery and has no real implementation yet.");
		}
		set {
			if(m_functionCallCounts == null) {
				m_functionCallCounts = new Dictionary<string, int>();
			}
			if(!m_functionCallCounts.ContainsKey( "set_usePrototypeMesh" )){
				m_functionCallCounts.Add( "set_usePrototypeMesh", 0 );
			}
			m_functionCallCounts["set_usePrototypeMesh"]++;
			
		}
	}
}
}
