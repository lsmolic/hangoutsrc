using System;
using System.Collections;
using System.Collections.Generic;
using System.Runtime.Serialization;


namespace UnityEngineInternal {
public class TerrainRenderer {
	// Mock data:
	private Dictionary<string, int> m_functionCallCounts;
	public Dictionary<string, int> FunctionCallCounts {
		get { 
			if(m_functionCallCounts == null) {
				m_functionCallCounts = new Dictionary<string, int>();
			}
			return m_functionCallCounts;
		}
	}

	public UnityEngine.Material GetSplatBaseMaterial( UnityEngine.TerrainLighting renderMode ){
		//Mock Data:
		if(m_functionCallCounts == null) {
			m_functionCallCounts = new Dictionary<string, int>();
		}
		if(!m_functionCallCounts.ContainsKey( "UnityEngine.Material GetSplatBaseMaterial(TerrainLighting)" )){
			m_functionCallCounts.Add( "UnityEngine.Material GetSplatBaseMaterial(TerrainLighting)", 0 );
		}
		m_functionCallCounts["UnityEngine.Material GetSplatBaseMaterial(TerrainLighting)"]++;
			
		throw new NotImplementedException("This function was automatically generated by Mockery and has no real implementation yet.");
	}

	public void RenderStep1( UnityEngine.Camera camera, UnityEngine.TerrainLighting renderMode, System.Int32 maxLodLevel, System.Single tau, System.Single splatDistance, System.Int32 layer ){
		//Mock Data:
		if(m_functionCallCounts == null) {
			m_functionCallCounts = new Dictionary<string, int>();
		}
		if(!m_functionCallCounts.ContainsKey( "Void RenderStep1(UnityEngine.Camera, TerrainLighting, Int32, Single, Single, Int32)" )){
			m_functionCallCounts.Add( "Void RenderStep1(UnityEngine.Camera, TerrainLighting, Int32, Single, Single, Int32)", 0 );
		}
		m_functionCallCounts["Void RenderStep1(UnityEngine.Camera, TerrainLighting, Int32, Single, Single, Int32)"]++;
			
	}

	public void RenderStep2( ){
		//Mock Data:
		if(m_functionCallCounts == null) {
			m_functionCallCounts = new Dictionary<string, int>();
		}
		if(!m_functionCallCounts.ContainsKey( "Void RenderStep2()" )){
			m_functionCallCounts.Add( "Void RenderStep2()", 0 );
		}
		m_functionCallCounts["Void RenderStep2()"]++;
			
	}

	public void RenderStep3( UnityEngine.Camera camera, System.Int32 layer, System.Single realtimeLightDistance, System.Boolean castShadows ){
		//Mock Data:
		if(m_functionCallCounts == null) {
			m_functionCallCounts = new Dictionary<string, int>();
		}
		if(!m_functionCallCounts.ContainsKey( "Void RenderStep3(UnityEngine.Camera, Int32, Single, Boolean)" )){
			m_functionCallCounts.Add( "Void RenderStep3(UnityEngine.Camera, Int32, Single, Boolean)", 0 );
		}
		m_functionCallCounts["Void RenderStep3(UnityEngine.Camera, Int32, Single, Boolean)"]++;
			
	}

	public void ReloadAll( ){
		//Mock Data:
		if(m_functionCallCounts == null) {
			m_functionCallCounts = new Dictionary<string, int>();
		}
		if(!m_functionCallCounts.ContainsKey( "Void ReloadAll()" )){
			m_functionCallCounts.Add( "Void ReloadAll()", 0 );
		}
		m_functionCallCounts["Void ReloadAll()"]++;
			
	}

	public void Cleanup( ){
		//Mock Data:
		if(m_functionCallCounts == null) {
			m_functionCallCounts = new Dictionary<string, int>();
		}
		if(!m_functionCallCounts.ContainsKey( "Void Cleanup()" )){
			m_functionCallCounts.Add( "Void Cleanup()", 0 );
		}
		m_functionCallCounts["Void Cleanup()"]++;
			
	}

	public void ReloadPrecomputedError( ){
		//Mock Data:
		if(m_functionCallCounts == null) {
			m_functionCallCounts = new Dictionary<string, int>();
		}
		if(!m_functionCallCounts.ContainsKey( "Void ReloadPrecomputedError()" )){
			m_functionCallCounts.Add( "Void ReloadPrecomputedError()", 0 );
		}
		m_functionCallCounts["Void ReloadPrecomputedError()"]++;
			
	}

	public void ReloadBounds( ){
		//Mock Data:
		if(m_functionCallCounts == null) {
			m_functionCallCounts = new Dictionary<string, int>();
		}
		if(!m_functionCallCounts.ContainsKey( "Void ReloadBounds()" )){
			m_functionCallCounts.Add( "Void ReloadBounds()", 0 );
		}
		m_functionCallCounts["Void ReloadBounds()"]++;
			
	}

	public TerrainRenderer( UnityEngine.TerrainData terrainData, UnityEngine.Vector3 position ){
		//Mock Data:
			m_functionCallCounts = new Dictionary<string, int>();
		if(!m_functionCallCounts.ContainsKey( "Void .ctor(TerrainData, Vector3)" )){
			m_functionCallCounts.Add( "Void .ctor(TerrainData, Vector3)", 0 );
		}
		m_functionCallCounts["Void .ctor(TerrainData, Vector3)"]++;
			
	}

	public UnityEngine.TerrainData terrainData {
		get {
			if(m_functionCallCounts == null) {
				m_functionCallCounts = new Dictionary<string, int>();
			}
			if(!m_functionCallCounts.ContainsKey( "get_terrainData" )){
				m_functionCallCounts.Add( "get_terrainData", 0 );
			}
			m_functionCallCounts["get_terrainData"]++;
			
			throw new NotImplementedException("This function was automatically generated by Mockery and has no real implementation yet.");
		}
	}
}
}
