using System;
using System.Collections;
using System.Collections.Generic;
using System.Runtime.Serialization;


namespace UnityEngine {
public struct Keyframe {
	// Mock data:
	private Dictionary<string, int> m_functionCallCounts;
	public Dictionary<string, int> FunctionCallCounts {
		get { 
			if(m_functionCallCounts == null) {
				m_functionCallCounts = new Dictionary<string, int>();
			}
			return m_functionCallCounts;
		}
	}

	public Keyframe( System.Single time, System.Single value ){
		//Mock Data:
			m_functionCallCounts = new Dictionary<string, int>();
		if(!m_functionCallCounts.ContainsKey( "Void .ctor(Single, Single)" )){
			m_functionCallCounts.Add( "Void .ctor(Single, Single)", 0 );
		}
		m_functionCallCounts["Void .ctor(Single, Single)"]++;
			
	}

	public Keyframe( System.Single time, System.Single value, System.Single inTangent, System.Single outTangent ){
		//Mock Data:
			m_functionCallCounts = new Dictionary<string, int>();
		if(!m_functionCallCounts.ContainsKey( "Void .ctor(Single, Single, Single, Single)" )){
			m_functionCallCounts.Add( "Void .ctor(Single, Single, Single, Single)", 0 );
		}
		m_functionCallCounts["Void .ctor(Single, Single, Single, Single)"]++;
			
	}

	public System.Single inTangent {
		get {
			if(m_functionCallCounts == null) {
				m_functionCallCounts = new Dictionary<string, int>();
			}
			if(!m_functionCallCounts.ContainsKey( "get_inTangent" )){
				m_functionCallCounts.Add( "get_inTangent", 0 );
			}
			m_functionCallCounts["get_inTangent"]++;
			
			throw new NotImplementedException("This function was automatically generated by Mockery and has no real implementation yet.");
		}
		set {
			if(m_functionCallCounts == null) {
				m_functionCallCounts = new Dictionary<string, int>();
			}
			if(!m_functionCallCounts.ContainsKey( "set_inTangent" )){
				m_functionCallCounts.Add( "set_inTangent", 0 );
			}
			m_functionCallCounts["set_inTangent"]++;
			
		}
	}

	public System.Single value {
		get {
			if(m_functionCallCounts == null) {
				m_functionCallCounts = new Dictionary<string, int>();
			}
			if(!m_functionCallCounts.ContainsKey( "get_value" )){
				m_functionCallCounts.Add( "get_value", 0 );
			}
			m_functionCallCounts["get_value"]++;
			
			throw new NotImplementedException("This function was automatically generated by Mockery and has no real implementation yet.");
		}
		set {
			if(m_functionCallCounts == null) {
				m_functionCallCounts = new Dictionary<string, int>();
			}
			if(!m_functionCallCounts.ContainsKey( "set_value" )){
				m_functionCallCounts.Add( "set_value", 0 );
			}
			m_functionCallCounts["set_value"]++;
			
		}
	}

	public System.Single outTangent {
		get {
			if(m_functionCallCounts == null) {
				m_functionCallCounts = new Dictionary<string, int>();
			}
			if(!m_functionCallCounts.ContainsKey( "get_outTangent" )){
				m_functionCallCounts.Add( "get_outTangent", 0 );
			}
			m_functionCallCounts["get_outTangent"]++;
			
			throw new NotImplementedException("This function was automatically generated by Mockery and has no real implementation yet.");
		}
		set {
			if(m_functionCallCounts == null) {
				m_functionCallCounts = new Dictionary<string, int>();
			}
			if(!m_functionCallCounts.ContainsKey( "set_outTangent" )){
				m_functionCallCounts.Add( "set_outTangent", 0 );
			}
			m_functionCallCounts["set_outTangent"]++;
			
		}
	}

	public System.Single time {
		get {
			if(m_functionCallCounts == null) {
				m_functionCallCounts = new Dictionary<string, int>();
			}
			if(!m_functionCallCounts.ContainsKey( "get_time" )){
				m_functionCallCounts.Add( "get_time", 0 );
			}
			m_functionCallCounts["get_time"]++;
			
			throw new NotImplementedException("This function was automatically generated by Mockery and has no real implementation yet.");
		}
		set {
			if(m_functionCallCounts == null) {
				m_functionCallCounts = new Dictionary<string, int>();
			}
			if(!m_functionCallCounts.ContainsKey( "set_time" )){
				m_functionCallCounts.Add( "set_time", 0 );
			}
			m_functionCallCounts["set_time"]++;
			
		}
	}

	public System.Int32 tangentMode {
		get {
			if(m_functionCallCounts == null) {
				m_functionCallCounts = new Dictionary<string, int>();
			}
			if(!m_functionCallCounts.ContainsKey( "get_tangentMode" )){
				m_functionCallCounts.Add( "get_tangentMode", 0 );
			}
			m_functionCallCounts["get_tangentMode"]++;
			
			throw new NotImplementedException("This function was automatically generated by Mockery and has no real implementation yet.");
		}
		set {
			if(m_functionCallCounts == null) {
				m_functionCallCounts = new Dictionary<string, int>();
			}
			if(!m_functionCallCounts.ContainsKey( "set_tangentMode" )){
				m_functionCallCounts.Add( "set_tangentMode", 0 );
			}
			m_functionCallCounts["set_tangentMode"]++;
			
		}
	}
}
}
