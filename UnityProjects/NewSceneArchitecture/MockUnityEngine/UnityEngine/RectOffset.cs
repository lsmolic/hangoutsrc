using System;
using System.Collections;
using System.Collections.Generic;
using System.Runtime.Serialization;


namespace UnityEngine {
[UnityEngine.SerializePrivateVariables]
[System.SerializableAttribute]
public class RectOffset {
	// Mock data:
	private Dictionary<string, int> m_functionCallCounts;
	public Dictionary<string, int> FunctionCallCounts {
		get { 
			if(m_functionCallCounts == null) {
				m_functionCallCounts = new Dictionary<string, int>();
			}
			return m_functionCallCounts;
		}
	}

	public UnityEngine.Rect Add( UnityEngine.Rect rect ){
		//Mock Data:
		if(m_functionCallCounts == null) {
			m_functionCallCounts = new Dictionary<string, int>();
		}
		if(!m_functionCallCounts.ContainsKey( "Rect Add(Rect)" )){
			m_functionCallCounts.Add( "Rect Add(Rect)", 0 );
		}
		m_functionCallCounts["Rect Add(Rect)"]++;
			
		throw new NotImplementedException("This function was automatically generated by Mockery and has no real implementation yet.");
	}

	public UnityEngine.Rect Remove( UnityEngine.Rect rect ){
		//Mock Data:
		if(m_functionCallCounts == null) {
			m_functionCallCounts = new Dictionary<string, int>();
		}
		if(!m_functionCallCounts.ContainsKey( "Rect Remove(Rect)" )){
			m_functionCallCounts.Add( "Rect Remove(Rect)", 0 );
		}
		m_functionCallCounts["Rect Remove(Rect)"]++;
			
		throw new NotImplementedException("This function was automatically generated by Mockery and has no real implementation yet.");
	}

	public override System.String ToString( ){
		//Mock Data:
		if(m_functionCallCounts == null) {
			m_functionCallCounts = new Dictionary<string, int>();
		}
		if(!m_functionCallCounts.ContainsKey( "System.String ToString()" )){
			m_functionCallCounts.Add( "System.String ToString()", 0 );
		}
		m_functionCallCounts["System.String ToString()"]++;
			
		throw new NotImplementedException("This function was automatically generated by Mockery and has no real implementation yet.");
	}

	public RectOffset( ){
		//Mock Data:
			m_functionCallCounts = new Dictionary<string, int>();
		if(!m_functionCallCounts.ContainsKey( "Void .ctor()" )){
			m_functionCallCounts.Add( "Void .ctor()", 0 );
		}
		m_functionCallCounts["Void .ctor()"]++;
			
	}

	public System.Int32 horizontal {
		get {
			if(m_functionCallCounts == null) {
				m_functionCallCounts = new Dictionary<string, int>();
			}
			if(!m_functionCallCounts.ContainsKey( "get_horizontal" )){
				m_functionCallCounts.Add( "get_horizontal", 0 );
			}
			m_functionCallCounts["get_horizontal"]++;
			
			throw new NotImplementedException("This function was automatically generated by Mockery and has no real implementation yet.");
		}
	}

	public System.Int32 left {
		get {
			if(m_functionCallCounts == null) {
				m_functionCallCounts = new Dictionary<string, int>();
			}
			if(!m_functionCallCounts.ContainsKey( "get_left" )){
				m_functionCallCounts.Add( "get_left", 0 );
			}
			m_functionCallCounts["get_left"]++;
			
			throw new NotImplementedException("This function was automatically generated by Mockery and has no real implementation yet.");
		}
		set {
			if(m_functionCallCounts == null) {
				m_functionCallCounts = new Dictionary<string, int>();
			}
			if(!m_functionCallCounts.ContainsKey( "set_left" )){
				m_functionCallCounts.Add( "set_left", 0 );
			}
			m_functionCallCounts["set_left"]++;
			
		}
	}

	public System.Int32 right {
		get {
			if(m_functionCallCounts == null) {
				m_functionCallCounts = new Dictionary<string, int>();
			}
			if(!m_functionCallCounts.ContainsKey( "get_right" )){
				m_functionCallCounts.Add( "get_right", 0 );
			}
			m_functionCallCounts["get_right"]++;
			
			throw new NotImplementedException("This function was automatically generated by Mockery and has no real implementation yet.");
		}
		set {
			if(m_functionCallCounts == null) {
				m_functionCallCounts = new Dictionary<string, int>();
			}
			if(!m_functionCallCounts.ContainsKey( "set_right" )){
				m_functionCallCounts.Add( "set_right", 0 );
			}
			m_functionCallCounts["set_right"]++;
			
		}
	}

	public System.Int32 top {
		get {
			if(m_functionCallCounts == null) {
				m_functionCallCounts = new Dictionary<string, int>();
			}
			if(!m_functionCallCounts.ContainsKey( "get_top" )){
				m_functionCallCounts.Add( "get_top", 0 );
			}
			m_functionCallCounts["get_top"]++;
			
			throw new NotImplementedException("This function was automatically generated by Mockery and has no real implementation yet.");
		}
		set {
			if(m_functionCallCounts == null) {
				m_functionCallCounts = new Dictionary<string, int>();
			}
			if(!m_functionCallCounts.ContainsKey( "set_top" )){
				m_functionCallCounts.Add( "set_top", 0 );
			}
			m_functionCallCounts["set_top"]++;
			
		}
	}

	public System.Int32 vertical {
		get {
			if(m_functionCallCounts == null) {
				m_functionCallCounts = new Dictionary<string, int>();
			}
			if(!m_functionCallCounts.ContainsKey( "get_vertical" )){
				m_functionCallCounts.Add( "get_vertical", 0 );
			}
			m_functionCallCounts["get_vertical"]++;
			
			throw new NotImplementedException("This function was automatically generated by Mockery and has no real implementation yet.");
		}
	}

	public System.Int32 bottom {
		get {
			if(m_functionCallCounts == null) {
				m_functionCallCounts = new Dictionary<string, int>();
			}
			if(!m_functionCallCounts.ContainsKey( "get_bottom" )){
				m_functionCallCounts.Add( "get_bottom", 0 );
			}
			m_functionCallCounts["get_bottom"]++;
			
			throw new NotImplementedException("This function was automatically generated by Mockery and has no real implementation yet.");
		}
		set {
			if(m_functionCallCounts == null) {
				m_functionCallCounts = new Dictionary<string, int>();
			}
			if(!m_functionCallCounts.ContainsKey( "set_bottom" )){
				m_functionCallCounts.Add( "set_bottom", 0 );
			}
			m_functionCallCounts["set_bottom"]++;
			
		}
	}
}
}
