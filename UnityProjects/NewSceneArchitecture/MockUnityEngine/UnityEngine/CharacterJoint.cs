using System;
using System.Collections;
using System.Collections.Generic;
using System.Runtime.Serialization;


namespace UnityEngine {
public class CharacterJoint : UnityEngine.Joint {
	// Mock data:
	private Dictionary<string, int> m_functionCallCounts;
	public Dictionary<string, int> FunctionCallCounts {
		get { 
			if(m_functionCallCounts == null) {
				m_functionCallCounts = new Dictionary<string, int>();
			}
			return m_functionCallCounts;
		}
	}

	public CharacterJoint( ){
		//Mock Data:
			m_functionCallCounts = new Dictionary<string, int>();
		if(!m_functionCallCounts.ContainsKey( "Void .ctor()" )){
			m_functionCallCounts.Add( "Void .ctor()", 0 );
		}
		m_functionCallCounts["Void .ctor()"]++;
			
	}

	public UnityEngine.SoftJointLimit swing1Limit {
		get {
			if(m_functionCallCounts == null) {
				m_functionCallCounts = new Dictionary<string, int>();
			}
			if(!m_functionCallCounts.ContainsKey( "get_swing1Limit" )){
				m_functionCallCounts.Add( "get_swing1Limit", 0 );
			}
			m_functionCallCounts["get_swing1Limit"]++;
			
			throw new NotImplementedException("This function was automatically generated by Mockery and has no real implementation yet.");
		}
		set {
			if(m_functionCallCounts == null) {
				m_functionCallCounts = new Dictionary<string, int>();
			}
			if(!m_functionCallCounts.ContainsKey( "set_swing1Limit" )){
				m_functionCallCounts.Add( "set_swing1Limit", 0 );
			}
			m_functionCallCounts["set_swing1Limit"]++;
			
		}
	}

	public UnityEngine.JointDrive rotationDrive {
		get {
			if(m_functionCallCounts == null) {
				m_functionCallCounts = new Dictionary<string, int>();
			}
			if(!m_functionCallCounts.ContainsKey( "get_rotationDrive" )){
				m_functionCallCounts.Add( "get_rotationDrive", 0 );
			}
			m_functionCallCounts["get_rotationDrive"]++;
			
			throw new NotImplementedException("This function was automatically generated by Mockery and has no real implementation yet.");
		}
		set {
			if(m_functionCallCounts == null) {
				m_functionCallCounts = new Dictionary<string, int>();
			}
			if(!m_functionCallCounts.ContainsKey( "set_rotationDrive" )){
				m_functionCallCounts.Add( "set_rotationDrive", 0 );
			}
			m_functionCallCounts["set_rotationDrive"]++;
			
		}
	}

	public UnityEngine.SoftJointLimit lowTwistLimit {
		get {
			if(m_functionCallCounts == null) {
				m_functionCallCounts = new Dictionary<string, int>();
			}
			if(!m_functionCallCounts.ContainsKey( "get_lowTwistLimit" )){
				m_functionCallCounts.Add( "get_lowTwistLimit", 0 );
			}
			m_functionCallCounts["get_lowTwistLimit"]++;
			
			throw new NotImplementedException("This function was automatically generated by Mockery and has no real implementation yet.");
		}
		set {
			if(m_functionCallCounts == null) {
				m_functionCallCounts = new Dictionary<string, int>();
			}
			if(!m_functionCallCounts.ContainsKey( "set_lowTwistLimit" )){
				m_functionCallCounts.Add( "set_lowTwistLimit", 0 );
			}
			m_functionCallCounts["set_lowTwistLimit"]++;
			
		}
	}

	public UnityEngine.SoftJointLimit highTwistLimit {
		get {
			if(m_functionCallCounts == null) {
				m_functionCallCounts = new Dictionary<string, int>();
			}
			if(!m_functionCallCounts.ContainsKey( "get_highTwistLimit" )){
				m_functionCallCounts.Add( "get_highTwistLimit", 0 );
			}
			m_functionCallCounts["get_highTwistLimit"]++;
			
			throw new NotImplementedException("This function was automatically generated by Mockery and has no real implementation yet.");
		}
		set {
			if(m_functionCallCounts == null) {
				m_functionCallCounts = new Dictionary<string, int>();
			}
			if(!m_functionCallCounts.ContainsKey( "set_highTwistLimit" )){
				m_functionCallCounts.Add( "set_highTwistLimit", 0 );
			}
			m_functionCallCounts["set_highTwistLimit"]++;
			
		}
	}

	public UnityEngine.SoftJointLimit swing2Limit {
		get {
			if(m_functionCallCounts == null) {
				m_functionCallCounts = new Dictionary<string, int>();
			}
			if(!m_functionCallCounts.ContainsKey( "get_swing2Limit" )){
				m_functionCallCounts.Add( "get_swing2Limit", 0 );
			}
			m_functionCallCounts["get_swing2Limit"]++;
			
			throw new NotImplementedException("This function was automatically generated by Mockery and has no real implementation yet.");
		}
		set {
			if(m_functionCallCounts == null) {
				m_functionCallCounts = new Dictionary<string, int>();
			}
			if(!m_functionCallCounts.ContainsKey( "set_swing2Limit" )){
				m_functionCallCounts.Add( "set_swing2Limit", 0 );
			}
			m_functionCallCounts["set_swing2Limit"]++;
			
		}
	}

	public UnityEngine.Vector3 swingAxis {
		get {
			if(m_functionCallCounts == null) {
				m_functionCallCounts = new Dictionary<string, int>();
			}
			if(!m_functionCallCounts.ContainsKey( "get_swingAxis" )){
				m_functionCallCounts.Add( "get_swingAxis", 0 );
			}
			m_functionCallCounts["get_swingAxis"]++;
			
			throw new NotImplementedException("This function was automatically generated by Mockery and has no real implementation yet.");
		}
		set {
			if(m_functionCallCounts == null) {
				m_functionCallCounts = new Dictionary<string, int>();
			}
			if(!m_functionCallCounts.ContainsKey( "set_swingAxis" )){
				m_functionCallCounts.Add( "set_swingAxis", 0 );
			}
			m_functionCallCounts["set_swingAxis"]++;
			
		}
	}

	public UnityEngine.Vector3 targetAngularVelocity {
		get {
			if(m_functionCallCounts == null) {
				m_functionCallCounts = new Dictionary<string, int>();
			}
			if(!m_functionCallCounts.ContainsKey( "get_targetAngularVelocity" )){
				m_functionCallCounts.Add( "get_targetAngularVelocity", 0 );
			}
			m_functionCallCounts["get_targetAngularVelocity"]++;
			
			throw new NotImplementedException("This function was automatically generated by Mockery and has no real implementation yet.");
		}
		set {
			if(m_functionCallCounts == null) {
				m_functionCallCounts = new Dictionary<string, int>();
			}
			if(!m_functionCallCounts.ContainsKey( "set_targetAngularVelocity" )){
				m_functionCallCounts.Add( "set_targetAngularVelocity", 0 );
			}
			m_functionCallCounts["set_targetAngularVelocity"]++;
			
		}
	}

	public UnityEngine.Quaternion targetRotation {
		get {
			if(m_functionCallCounts == null) {
				m_functionCallCounts = new Dictionary<string, int>();
			}
			if(!m_functionCallCounts.ContainsKey( "get_targetRotation" )){
				m_functionCallCounts.Add( "get_targetRotation", 0 );
			}
			m_functionCallCounts["get_targetRotation"]++;
			
			throw new NotImplementedException("This function was automatically generated by Mockery and has no real implementation yet.");
		}
		set {
			if(m_functionCallCounts == null) {
				m_functionCallCounts = new Dictionary<string, int>();
			}
			if(!m_functionCallCounts.ContainsKey( "set_targetRotation" )){
				m_functionCallCounts.Add( "set_targetRotation", 0 );
			}
			m_functionCallCounts["set_targetRotation"]++;
			
		}
	}
}
}
