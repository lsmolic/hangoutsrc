using System;
using System.Collections;
using System.Collections.Generic;
using System.Runtime.Serialization;


namespace UnityEngine {
public class MovieTexture : UnityEngine.Texture {
	// Mock data:
	private Dictionary<string, int> m_functionCallCounts;
	public Dictionary<string, int> FunctionCallCounts {
		get { 
			if(m_functionCallCounts == null) {
				m_functionCallCounts = new Dictionary<string, int>();
			}
			return m_functionCallCounts;
		}
	}

	public void Play( ){
		//Mock Data:
		if(m_functionCallCounts == null) {
			m_functionCallCounts = new Dictionary<string, int>();
		}
		if(!m_functionCallCounts.ContainsKey( "Void Play()" )){
			m_functionCallCounts.Add( "Void Play()", 0 );
		}
		m_functionCallCounts["Void Play()"]++;
			
	}

	public void Stop( ){
		//Mock Data:
		if(m_functionCallCounts == null) {
			m_functionCallCounts = new Dictionary<string, int>();
		}
		if(!m_functionCallCounts.ContainsKey( "Void Stop()" )){
			m_functionCallCounts.Add( "Void Stop()", 0 );
		}
		m_functionCallCounts["Void Stop()"]++;
			
	}

	public void Pause( ){
		//Mock Data:
		if(m_functionCallCounts == null) {
			m_functionCallCounts = new Dictionary<string, int>();
		}
		if(!m_functionCallCounts.ContainsKey( "Void Pause()" )){
			m_functionCallCounts.Add( "Void Pause()", 0 );
		}
		m_functionCallCounts["Void Pause()"]++;
			
	}

	public MovieTexture( ){
		//Mock Data:
			m_functionCallCounts = new Dictionary<string, int>();
		if(!m_functionCallCounts.ContainsKey( "Void .ctor()" )){
			m_functionCallCounts.Add( "Void .ctor()", 0 );
		}
		m_functionCallCounts["Void .ctor()"]++;
			
	}

	public UnityEngine.AudioClip audioClip {
		get {
			if(m_functionCallCounts == null) {
				m_functionCallCounts = new Dictionary<string, int>();
			}
			if(!m_functionCallCounts.ContainsKey( "get_audioClip" )){
				m_functionCallCounts.Add( "get_audioClip", 0 );
			}
			m_functionCallCounts["get_audioClip"]++;
			
			throw new NotImplementedException("This function was automatically generated by Mockery and has no real implementation yet.");
		}
	}

	public System.Boolean loop {
		get {
			if(m_functionCallCounts == null) {
				m_functionCallCounts = new Dictionary<string, int>();
			}
			if(!m_functionCallCounts.ContainsKey( "get_loop" )){
				m_functionCallCounts.Add( "get_loop", 0 );
			}
			m_functionCallCounts["get_loop"]++;
			
			throw new NotImplementedException("This function was automatically generated by Mockery and has no real implementation yet.");
		}
		set {
			if(m_functionCallCounts == null) {
				m_functionCallCounts = new Dictionary<string, int>();
			}
			if(!m_functionCallCounts.ContainsKey( "set_loop" )){
				m_functionCallCounts.Add( "set_loop", 0 );
			}
			m_functionCallCounts["set_loop"]++;
			
		}
	}

	public System.Boolean isReadyToPlay {
		get {
			if(m_functionCallCounts == null) {
				m_functionCallCounts = new Dictionary<string, int>();
			}
			if(!m_functionCallCounts.ContainsKey( "get_isReadyToPlay" )){
				m_functionCallCounts.Add( "get_isReadyToPlay", 0 );
			}
			m_functionCallCounts["get_isReadyToPlay"]++;
			
			throw new NotImplementedException("This function was automatically generated by Mockery and has no real implementation yet.");
		}
	}

	public System.Boolean isPlaying {
		get {
			if(m_functionCallCounts == null) {
				m_functionCallCounts = new Dictionary<string, int>();
			}
			if(!m_functionCallCounts.ContainsKey( "get_isPlaying" )){
				m_functionCallCounts.Add( "get_isPlaying", 0 );
			}
			m_functionCallCounts["get_isPlaying"]++;
			
			throw new NotImplementedException("This function was automatically generated by Mockery and has no real implementation yet.");
		}
	}
}
}
