using System;
using System.Collections;
using System.Collections.Generic;
using System.Runtime.Serialization;


namespace UnityEngine {
public class CharacterController : UnityEngine.Collider {
	// Mock data:
	private Dictionary<string, int> m_functionCallCounts;
	public Dictionary<string, int> FunctionCallCounts {
		get { 
			if(m_functionCallCounts == null) {
				m_functionCallCounts = new Dictionary<string, int>();
			}
			return m_functionCallCounts;
		}
	}

	public System.Boolean SimpleMove( UnityEngine.Vector3 speed ){
		//Mock Data:
		if(m_functionCallCounts == null) {
			m_functionCallCounts = new Dictionary<string, int>();
		}
		if(!m_functionCallCounts.ContainsKey( "Boolean SimpleMove(Vector3)" )){
			m_functionCallCounts.Add( "Boolean SimpleMove(Vector3)", 0 );
		}
		m_functionCallCounts["Boolean SimpleMove(Vector3)"]++;
			
		throw new NotImplementedException("This function was automatically generated by Mockery and has no real implementation yet.");
	}

	public UnityEngine.CollisionFlags Move( UnityEngine.Vector3 motion ){
		//Mock Data:
		if(m_functionCallCounts == null) {
			m_functionCallCounts = new Dictionary<string, int>();
		}
		if(!m_functionCallCounts.ContainsKey( "CollisionFlags Move(Vector3)" )){
			m_functionCallCounts.Add( "CollisionFlags Move(Vector3)", 0 );
		}
		m_functionCallCounts["CollisionFlags Move(Vector3)"]++;
			
		throw new NotImplementedException("This function was automatically generated by Mockery and has no real implementation yet.");
	}

	public CharacterController( ){
		//Mock Data:
			m_functionCallCounts = new Dictionary<string, int>();
		if(!m_functionCallCounts.ContainsKey( "Void .ctor()" )){
			m_functionCallCounts.Add( "Void .ctor()", 0 );
		}
		m_functionCallCounts["Void .ctor()"]++;
			
	}

	public System.Boolean detectCollisions {
		get {
			if(m_functionCallCounts == null) {
				m_functionCallCounts = new Dictionary<string, int>();
			}
			if(!m_functionCallCounts.ContainsKey( "get_detectCollisions" )){
				m_functionCallCounts.Add( "get_detectCollisions", 0 );
			}
			m_functionCallCounts["get_detectCollisions"]++;
			
			throw new NotImplementedException("This function was automatically generated by Mockery and has no real implementation yet.");
		}
		set {
			if(m_functionCallCounts == null) {
				m_functionCallCounts = new Dictionary<string, int>();
			}
			if(!m_functionCallCounts.ContainsKey( "set_detectCollisions" )){
				m_functionCallCounts.Add( "set_detectCollisions", 0 );
			}
			m_functionCallCounts["set_detectCollisions"]++;
			
		}
	}

	public System.Boolean isGrounded {
		get {
			if(m_functionCallCounts == null) {
				m_functionCallCounts = new Dictionary<string, int>();
			}
			if(!m_functionCallCounts.ContainsKey( "get_isGrounded" )){
				m_functionCallCounts.Add( "get_isGrounded", 0 );
			}
			m_functionCallCounts["get_isGrounded"]++;
			
			throw new NotImplementedException("This function was automatically generated by Mockery and has no real implementation yet.");
		}
	}

	public UnityEngine.CollisionFlags collisionFlags {
		get {
			if(m_functionCallCounts == null) {
				m_functionCallCounts = new Dictionary<string, int>();
			}
			if(!m_functionCallCounts.ContainsKey( "get_collisionFlags" )){
				m_functionCallCounts.Add( "get_collisionFlags", 0 );
			}
			m_functionCallCounts["get_collisionFlags"]++;
			
			throw new NotImplementedException("This function was automatically generated by Mockery and has no real implementation yet.");
		}
	}

	public System.Single stepOffset {
		get {
			if(m_functionCallCounts == null) {
				m_functionCallCounts = new Dictionary<string, int>();
			}
			if(!m_functionCallCounts.ContainsKey( "get_stepOffset" )){
				m_functionCallCounts.Add( "get_stepOffset", 0 );
			}
			m_functionCallCounts["get_stepOffset"]++;
			
			throw new NotImplementedException("This function was automatically generated by Mockery and has no real implementation yet.");
		}
		set {
			if(m_functionCallCounts == null) {
				m_functionCallCounts = new Dictionary<string, int>();
			}
			if(!m_functionCallCounts.ContainsKey( "set_stepOffset" )){
				m_functionCallCounts.Add( "set_stepOffset", 0 );
			}
			m_functionCallCounts["set_stepOffset"]++;
			
		}
	}

	public System.Single height {
		get {
			if(m_functionCallCounts == null) {
				m_functionCallCounts = new Dictionary<string, int>();
			}
			if(!m_functionCallCounts.ContainsKey( "get_height" )){
				m_functionCallCounts.Add( "get_height", 0 );
			}
			m_functionCallCounts["get_height"]++;
			
			throw new NotImplementedException("This function was automatically generated by Mockery and has no real implementation yet.");
		}
		set {
			if(m_functionCallCounts == null) {
				m_functionCallCounts = new Dictionary<string, int>();
			}
			if(!m_functionCallCounts.ContainsKey( "set_height" )){
				m_functionCallCounts.Add( "set_height", 0 );
			}
			m_functionCallCounts["set_height"]++;
			
		}
	}

	public System.Single slopeLimit {
		get {
			if(m_functionCallCounts == null) {
				m_functionCallCounts = new Dictionary<string, int>();
			}
			if(!m_functionCallCounts.ContainsKey( "get_slopeLimit" )){
				m_functionCallCounts.Add( "get_slopeLimit", 0 );
			}
			m_functionCallCounts["get_slopeLimit"]++;
			
			throw new NotImplementedException("This function was automatically generated by Mockery and has no real implementation yet.");
		}
		set {
			if(m_functionCallCounts == null) {
				m_functionCallCounts = new Dictionary<string, int>();
			}
			if(!m_functionCallCounts.ContainsKey( "set_slopeLimit" )){
				m_functionCallCounts.Add( "set_slopeLimit", 0 );
			}
			m_functionCallCounts["set_slopeLimit"]++;
			
		}
	}

	public UnityEngine.Vector3 center {
		get {
			if(m_functionCallCounts == null) {
				m_functionCallCounts = new Dictionary<string, int>();
			}
			if(!m_functionCallCounts.ContainsKey( "get_center" )){
				m_functionCallCounts.Add( "get_center", 0 );
			}
			m_functionCallCounts["get_center"]++;
			
			throw new NotImplementedException("This function was automatically generated by Mockery and has no real implementation yet.");
		}
		set {
			if(m_functionCallCounts == null) {
				m_functionCallCounts = new Dictionary<string, int>();
			}
			if(!m_functionCallCounts.ContainsKey( "set_center" )){
				m_functionCallCounts.Add( "set_center", 0 );
			}
			m_functionCallCounts["set_center"]++;
			
		}
	}

	public UnityEngine.Vector3 velocity {
		get {
			if(m_functionCallCounts == null) {
				m_functionCallCounts = new Dictionary<string, int>();
			}
			if(!m_functionCallCounts.ContainsKey( "get_velocity" )){
				m_functionCallCounts.Add( "get_velocity", 0 );
			}
			m_functionCallCounts["get_velocity"]++;
			
			throw new NotImplementedException("This function was automatically generated by Mockery and has no real implementation yet.");
		}
	}

	public System.Single radius {
		get {
			if(m_functionCallCounts == null) {
				m_functionCallCounts = new Dictionary<string, int>();
			}
			if(!m_functionCallCounts.ContainsKey( "get_radius" )){
				m_functionCallCounts.Add( "get_radius", 0 );
			}
			m_functionCallCounts["get_radius"]++;
			
			throw new NotImplementedException("This function was automatically generated by Mockery and has no real implementation yet.");
		}
		set {
			if(m_functionCallCounts == null) {
				m_functionCallCounts = new Dictionary<string, int>();
			}
			if(!m_functionCallCounts.ContainsKey( "set_radius" )){
				m_functionCallCounts.Add( "set_radius", 0 );
			}
			m_functionCallCounts["set_radius"]++;
			
		}
	}
}
}
