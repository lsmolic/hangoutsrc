using System;
using System.Collections;
using System.Collections.Generic;
using System.Runtime.Serialization;


namespace UnityEngine {
public class ParticleEmitter : UnityEngine.Component {
	// Mock data:
	private Dictionary<string, int> m_functionCallCounts;
	public Dictionary<string, int> FunctionCallCounts {
		get { 
			if(m_functionCallCounts == null) {
				m_functionCallCounts = new Dictionary<string, int>();
			}
			return m_functionCallCounts;
		}
	}

	public void ClearParticles( ){
		//Mock Data:
		if(m_functionCallCounts == null) {
			m_functionCallCounts = new Dictionary<string, int>();
		}
		if(!m_functionCallCounts.ContainsKey( "Void ClearParticles()" )){
			m_functionCallCounts.Add( "Void ClearParticles()", 0 );
		}
		m_functionCallCounts["Void ClearParticles()"]++;
			
	}

	public void Emit( ){
		//Mock Data:
		if(m_functionCallCounts == null) {
			m_functionCallCounts = new Dictionary<string, int>();
		}
		if(!m_functionCallCounts.ContainsKey( "Void Emit()" )){
			m_functionCallCounts.Add( "Void Emit()", 0 );
		}
		m_functionCallCounts["Void Emit()"]++;
			
	}

	public void Emit( System.Int32 count ){
		//Mock Data:
		if(m_functionCallCounts == null) {
			m_functionCallCounts = new Dictionary<string, int>();
		}
		if(!m_functionCallCounts.ContainsKey( "Void Emit(Int32)" )){
			m_functionCallCounts.Add( "Void Emit(Int32)", 0 );
		}
		m_functionCallCounts["Void Emit(Int32)"]++;
			
	}

	public void Emit( UnityEngine.Vector3 pos, UnityEngine.Vector3 velocity, System.Single size, System.Single energy, UnityEngine.Color color ){
		//Mock Data:
		if(m_functionCallCounts == null) {
			m_functionCallCounts = new Dictionary<string, int>();
		}
		if(!m_functionCallCounts.ContainsKey( "Void Emit(Vector3, Vector3, Single, Single, Color)" )){
			m_functionCallCounts.Add( "Void Emit(Vector3, Vector3, Single, Single, Color)", 0 );
		}
		m_functionCallCounts["Void Emit(Vector3, Vector3, Single, Single, Color)"]++;
			
	}

	public ParticleEmitter( ){
		//Mock Data:
			m_functionCallCounts = new Dictionary<string, int>();
		if(!m_functionCallCounts.ContainsKey( "Void .ctor()" )){
			m_functionCallCounts.Add( "Void .ctor()", 0 );
		}
		m_functionCallCounts["Void .ctor()"]++;
			
	}

	public UnityEngine.Vector3 ellipsoid {
		get {
			if(m_functionCallCounts == null) {
				m_functionCallCounts = new Dictionary<string, int>();
			}
			if(!m_functionCallCounts.ContainsKey( "get_ellipsoid" )){
				m_functionCallCounts.Add( "get_ellipsoid", 0 );
			}
			m_functionCallCounts["get_ellipsoid"]++;
			
			throw new NotImplementedException("This function was automatically generated by Mockery and has no real implementation yet.");
		}
		set {
			if(m_functionCallCounts == null) {
				m_functionCallCounts = new Dictionary<string, int>();
			}
			if(!m_functionCallCounts.ContainsKey( "set_ellipsoid" )){
				m_functionCallCounts.Add( "set_ellipsoid", 0 );
			}
			m_functionCallCounts["set_ellipsoid"]++;
			
		}
	}

	public UnityEngine.Particle[] particles {
		get {
			if(m_functionCallCounts == null) {
				m_functionCallCounts = new Dictionary<string, int>();
			}
			if(!m_functionCallCounts.ContainsKey( "get_particles" )){
				m_functionCallCounts.Add( "get_particles", 0 );
			}
			m_functionCallCounts["get_particles"]++;
			
			throw new NotImplementedException("This function was automatically generated by Mockery and has no real implementation yet.");
		}
		set {
			if(m_functionCallCounts == null) {
				m_functionCallCounts = new Dictionary<string, int>();
			}
			if(!m_functionCallCounts.ContainsKey( "set_particles" )){
				m_functionCallCounts.Add( "set_particles", 0 );
			}
			m_functionCallCounts["set_particles"]++;
			
		}
	}

	public System.Single minSize {
		get {
			if(m_functionCallCounts == null) {
				m_functionCallCounts = new Dictionary<string, int>();
			}
			if(!m_functionCallCounts.ContainsKey( "get_minSize" )){
				m_functionCallCounts.Add( "get_minSize", 0 );
			}
			m_functionCallCounts["get_minSize"]++;
			
			throw new NotImplementedException("This function was automatically generated by Mockery and has no real implementation yet.");
		}
		set {
			if(m_functionCallCounts == null) {
				m_functionCallCounts = new Dictionary<string, int>();
			}
			if(!m_functionCallCounts.ContainsKey( "set_minSize" )){
				m_functionCallCounts.Add( "set_minSize", 0 );
			}
			m_functionCallCounts["set_minSize"]++;
			
		}
	}

	public System.Single minEmission {
		get {
			if(m_functionCallCounts == null) {
				m_functionCallCounts = new Dictionary<string, int>();
			}
			if(!m_functionCallCounts.ContainsKey( "get_minEmission" )){
				m_functionCallCounts.Add( "get_minEmission", 0 );
			}
			m_functionCallCounts["get_minEmission"]++;
			
			throw new NotImplementedException("This function was automatically generated by Mockery and has no real implementation yet.");
		}
		set {
			if(m_functionCallCounts == null) {
				m_functionCallCounts = new Dictionary<string, int>();
			}
			if(!m_functionCallCounts.ContainsKey( "set_minEmission" )){
				m_functionCallCounts.Add( "set_minEmission", 0 );
			}
			m_functionCallCounts["set_minEmission"]++;
			
		}
	}

	public System.Single maxEnergy {
		get {
			if(m_functionCallCounts == null) {
				m_functionCallCounts = new Dictionary<string, int>();
			}
			if(!m_functionCallCounts.ContainsKey( "get_maxEnergy" )){
				m_functionCallCounts.Add( "get_maxEnergy", 0 );
			}
			m_functionCallCounts["get_maxEnergy"]++;
			
			throw new NotImplementedException("This function was automatically generated by Mockery and has no real implementation yet.");
		}
		set {
			if(m_functionCallCounts == null) {
				m_functionCallCounts = new Dictionary<string, int>();
			}
			if(!m_functionCallCounts.ContainsKey( "set_maxEnergy" )){
				m_functionCallCounts.Add( "set_maxEnergy", 0 );
			}
			m_functionCallCounts["set_maxEnergy"]++;
			
		}
	}

	public System.Single maxEmission {
		get {
			if(m_functionCallCounts == null) {
				m_functionCallCounts = new Dictionary<string, int>();
			}
			if(!m_functionCallCounts.ContainsKey( "get_maxEmission" )){
				m_functionCallCounts.Add( "get_maxEmission", 0 );
			}
			m_functionCallCounts["get_maxEmission"]++;
			
			throw new NotImplementedException("This function was automatically generated by Mockery and has no real implementation yet.");
		}
		set {
			if(m_functionCallCounts == null) {
				m_functionCallCounts = new Dictionary<string, int>();
			}
			if(!m_functionCallCounts.ContainsKey( "set_maxEmission" )){
				m_functionCallCounts.Add( "set_maxEmission", 0 );
			}
			m_functionCallCounts["set_maxEmission"]++;
			
		}
	}

	public UnityEngine.Vector3 rndVelocity {
		get {
			if(m_functionCallCounts == null) {
				m_functionCallCounts = new Dictionary<string, int>();
			}
			if(!m_functionCallCounts.ContainsKey( "get_rndVelocity" )){
				m_functionCallCounts.Add( "get_rndVelocity", 0 );
			}
			m_functionCallCounts["get_rndVelocity"]++;
			
			throw new NotImplementedException("This function was automatically generated by Mockery and has no real implementation yet.");
		}
		set {
			if(m_functionCallCounts == null) {
				m_functionCallCounts = new Dictionary<string, int>();
			}
			if(!m_functionCallCounts.ContainsKey( "set_rndVelocity" )){
				m_functionCallCounts.Add( "set_rndVelocity", 0 );
			}
			m_functionCallCounts["set_rndVelocity"]++;
			
		}
	}

	public System.Boolean emit {
		get {
			if(m_functionCallCounts == null) {
				m_functionCallCounts = new Dictionary<string, int>();
			}
			if(!m_functionCallCounts.ContainsKey( "get_emit" )){
				m_functionCallCounts.Add( "get_emit", 0 );
			}
			m_functionCallCounts["get_emit"]++;
			
			throw new NotImplementedException("This function was automatically generated by Mockery and has no real implementation yet.");
		}
		set {
			if(m_functionCallCounts == null) {
				m_functionCallCounts = new Dictionary<string, int>();
			}
			if(!m_functionCallCounts.ContainsKey( "set_emit" )){
				m_functionCallCounts.Add( "set_emit", 0 );
			}
			m_functionCallCounts["set_emit"]++;
			
		}
	}

	public System.Single minEnergy {
		get {
			if(m_functionCallCounts == null) {
				m_functionCallCounts = new Dictionary<string, int>();
			}
			if(!m_functionCallCounts.ContainsKey( "get_minEnergy" )){
				m_functionCallCounts.Add( "get_minEnergy", 0 );
			}
			m_functionCallCounts["get_minEnergy"]++;
			
			throw new NotImplementedException("This function was automatically generated by Mockery and has no real implementation yet.");
		}
		set {
			if(m_functionCallCounts == null) {
				m_functionCallCounts = new Dictionary<string, int>();
			}
			if(!m_functionCallCounts.ContainsKey( "set_minEnergy" )){
				m_functionCallCounts.Add( "set_minEnergy", 0 );
			}
			m_functionCallCounts["set_minEnergy"]++;
			
		}
	}

	public System.Int32 particleCount {
		get {
			if(m_functionCallCounts == null) {
				m_functionCallCounts = new Dictionary<string, int>();
			}
			if(!m_functionCallCounts.ContainsKey( "get_particleCount" )){
				m_functionCallCounts.Add( "get_particleCount", 0 );
			}
			m_functionCallCounts["get_particleCount"]++;
			
			throw new NotImplementedException("This function was automatically generated by Mockery and has no real implementation yet.");
		}
	}

	public System.Single emitterVelocityScale {
		get {
			if(m_functionCallCounts == null) {
				m_functionCallCounts = new Dictionary<string, int>();
			}
			if(!m_functionCallCounts.ContainsKey( "get_emitterVelocityScale" )){
				m_functionCallCounts.Add( "get_emitterVelocityScale", 0 );
			}
			m_functionCallCounts["get_emitterVelocityScale"]++;
			
			throw new NotImplementedException("This function was automatically generated by Mockery and has no real implementation yet.");
		}
		set {
			if(m_functionCallCounts == null) {
				m_functionCallCounts = new Dictionary<string, int>();
			}
			if(!m_functionCallCounts.ContainsKey( "set_emitterVelocityScale" )){
				m_functionCallCounts.Add( "set_emitterVelocityScale", 0 );
			}
			m_functionCallCounts["set_emitterVelocityScale"]++;
			
		}
	}

	public UnityEngine.Vector3 localVelocity {
		get {
			if(m_functionCallCounts == null) {
				m_functionCallCounts = new Dictionary<string, int>();
			}
			if(!m_functionCallCounts.ContainsKey( "get_localVelocity" )){
				m_functionCallCounts.Add( "get_localVelocity", 0 );
			}
			m_functionCallCounts["get_localVelocity"]++;
			
			throw new NotImplementedException("This function was automatically generated by Mockery and has no real implementation yet.");
		}
		set {
			if(m_functionCallCounts == null) {
				m_functionCallCounts = new Dictionary<string, int>();
			}
			if(!m_functionCallCounts.ContainsKey( "set_localVelocity" )){
				m_functionCallCounts.Add( "set_localVelocity", 0 );
			}
			m_functionCallCounts["set_localVelocity"]++;
			
		}
	}

	public System.Boolean useWorldSpace {
		get {
			if(m_functionCallCounts == null) {
				m_functionCallCounts = new Dictionary<string, int>();
			}
			if(!m_functionCallCounts.ContainsKey( "get_useWorldSpace" )){
				m_functionCallCounts.Add( "get_useWorldSpace", 0 );
			}
			m_functionCallCounts["get_useWorldSpace"]++;
			
			throw new NotImplementedException("This function was automatically generated by Mockery and has no real implementation yet.");
		}
		set {
			if(m_functionCallCounts == null) {
				m_functionCallCounts = new Dictionary<string, int>();
			}
			if(!m_functionCallCounts.ContainsKey( "set_useWorldSpace" )){
				m_functionCallCounts.Add( "set_useWorldSpace", 0 );
			}
			m_functionCallCounts["set_useWorldSpace"]++;
			
		}
	}

	public System.Single maxSize {
		get {
			if(m_functionCallCounts == null) {
				m_functionCallCounts = new Dictionary<string, int>();
			}
			if(!m_functionCallCounts.ContainsKey( "get_maxSize" )){
				m_functionCallCounts.Add( "get_maxSize", 0 );
			}
			m_functionCallCounts["get_maxSize"]++;
			
			throw new NotImplementedException("This function was automatically generated by Mockery and has no real implementation yet.");
		}
		set {
			if(m_functionCallCounts == null) {
				m_functionCallCounts = new Dictionary<string, int>();
			}
			if(!m_functionCallCounts.ContainsKey( "set_maxSize" )){
				m_functionCallCounts.Add( "set_maxSize", 0 );
			}
			m_functionCallCounts["set_maxSize"]++;
			
		}
	}

	public UnityEngine.Vector3 worldVelocity {
		get {
			if(m_functionCallCounts == null) {
				m_functionCallCounts = new Dictionary<string, int>();
			}
			if(!m_functionCallCounts.ContainsKey( "get_worldVelocity" )){
				m_functionCallCounts.Add( "get_worldVelocity", 0 );
			}
			m_functionCallCounts["get_worldVelocity"]++;
			
			throw new NotImplementedException("This function was automatically generated by Mockery and has no real implementation yet.");
		}
		set {
			if(m_functionCallCounts == null) {
				m_functionCallCounts = new Dictionary<string, int>();
			}
			if(!m_functionCallCounts.ContainsKey( "set_worldVelocity" )){
				m_functionCallCounts.Add( "set_worldVelocity", 0 );
			}
			m_functionCallCounts["set_worldVelocity"]++;
			
		}
	}
}
}
