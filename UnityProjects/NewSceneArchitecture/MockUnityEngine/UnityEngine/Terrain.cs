using System;
using System.Collections;
using System.Collections.Generic;
using System.Runtime.Serialization;


namespace UnityEngine {
[UnityEngine.SerializePrivateVariables]
[UnityEngine.ExecuteInEditMode]
public class Terrain : UnityEngine.MonoBehaviour {
	// Mock data:
	private Dictionary<string, int> m_functionCallCounts;
	public Dictionary<string, int> FunctionCallCounts {
		get { 
			if(m_functionCallCounts == null) {
				m_functionCallCounts = new Dictionary<string, int>();
			}
			return m_functionCallCounts;
		}
	}

	public System.Single SampleHeight( UnityEngine.Vector3 worldPosition ){
		//Mock Data:
		if(m_functionCallCounts == null) {
			m_functionCallCounts = new Dictionary<string, int>();
		}
		if(!m_functionCallCounts.ContainsKey( "Single SampleHeight(Vector3)" )){
			m_functionCallCounts.Add( "Single SampleHeight(Vector3)", 0 );
		}
		m_functionCallCounts["Single SampleHeight(Vector3)"]++;
			
		throw new NotImplementedException("This function was automatically generated by Mockery and has no real implementation yet.");
	}

	public static UnityEngine.GameObject CreateTerrainGameObject( UnityEngine.TerrainData assignTerrain ){
		throw new NotImplementedException("This function was automatically generated by Mockery and has no real implementation yet.");
	}

	public void Flush( ){
		//Mock Data:
		if(m_functionCallCounts == null) {
			m_functionCallCounts = new Dictionary<string, int>();
		}
		if(!m_functionCallCounts.ContainsKey( "Void Flush()" )){
			m_functionCallCounts.Add( "Void Flush()", 0 );
		}
		m_functionCallCounts["Void Flush()"]++;
			
	}

	public void AddTreeInstance( UnityEngine.TreeInstance instance ){
		//Mock Data:
		if(m_functionCallCounts == null) {
			m_functionCallCounts = new Dictionary<string, int>();
		}
		if(!m_functionCallCounts.ContainsKey( "Void AddTreeInstance(TreeInstance)" )){
			m_functionCallCounts.Add( "Void AddTreeInstance(TreeInstance)", 0 );
		}
		m_functionCallCounts["Void AddTreeInstance(TreeInstance)"]++;
			
	}

	public void RemoveTrees( UnityEngine.Vector2 position, System.Single radius, System.Int32 prototypeIndex ){
		//Mock Data:
		if(m_functionCallCounts == null) {
			m_functionCallCounts = new Dictionary<string, int>();
		}
		if(!m_functionCallCounts.ContainsKey( "Void RemoveTrees(Vector2, Single, Int32)" )){
			m_functionCallCounts.Add( "Void RemoveTrees(Vector2, Single, Int32)", 0 );
		}
		m_functionCallCounts["Void RemoveTrees(Vector2, Single, Int32)"]++;
			
	}

	public void SetNeighbors( UnityEngine.Terrain left, UnityEngine.Terrain top, UnityEngine.Terrain right, UnityEngine.Terrain bottom ){
		//Mock Data:
		if(m_functionCallCounts == null) {
			m_functionCallCounts = new Dictionary<string, int>();
		}
		if(!m_functionCallCounts.ContainsKey( "Void SetNeighbors(UnityEngine.Terrain, UnityEngine.Terrain, UnityEngine.Terrain, UnityEngine.Terrain)" )){
			m_functionCallCounts.Add( "Void SetNeighbors(UnityEngine.Terrain, UnityEngine.Terrain, UnityEngine.Terrain, UnityEngine.Terrain)", 0 );
		}
		m_functionCallCounts["Void SetNeighbors(UnityEngine.Terrain, UnityEngine.Terrain, UnityEngine.Terrain, UnityEngine.Terrain)"]++;
			
	}

	public Terrain( ){
		//Mock Data:
			m_functionCallCounts = new Dictionary<string, int>();
		if(!m_functionCallCounts.ContainsKey( "Void .ctor()" )){
			m_functionCallCounts.Add( "Void .ctor()", 0 );
		}
		m_functionCallCounts["Void .ctor()"]++;
			
	}

	public System.Single basemapDistance {
		get {
			if(m_functionCallCounts == null) {
				m_functionCallCounts = new Dictionary<string, int>();
			}
			if(!m_functionCallCounts.ContainsKey( "get_basemapDistance" )){
				m_functionCallCounts.Add( "get_basemapDistance", 0 );
			}
			m_functionCallCounts["get_basemapDistance"]++;
			
			throw new NotImplementedException("This function was automatically generated by Mockery and has no real implementation yet.");
		}
		set {
			if(m_functionCallCounts == null) {
				m_functionCallCounts = new Dictionary<string, int>();
			}
			if(!m_functionCallCounts.ContainsKey( "set_basemapDistance" )){
				m_functionCallCounts.Add( "set_basemapDistance", 0 );
			}
			m_functionCallCounts["set_basemapDistance"]++;
			
		}
	}

	public System.Single detailObjectDistance {
		get {
			if(m_functionCallCounts == null) {
				m_functionCallCounts = new Dictionary<string, int>();
			}
			if(!m_functionCallCounts.ContainsKey( "get_detailObjectDistance" )){
				m_functionCallCounts.Add( "get_detailObjectDistance", 0 );
			}
			m_functionCallCounts["get_detailObjectDistance"]++;
			
			throw new NotImplementedException("This function was automatically generated by Mockery and has no real implementation yet.");
		}
		set {
			if(m_functionCallCounts == null) {
				m_functionCallCounts = new Dictionary<string, int>();
			}
			if(!m_functionCallCounts.ContainsKey( "set_detailObjectDistance" )){
				m_functionCallCounts.Add( "set_detailObjectDistance", 0 );
			}
			m_functionCallCounts["set_detailObjectDistance"]++;
			
		}
	}

	public System.Single splatmapDistance {
		get {
			if(m_functionCallCounts == null) {
				m_functionCallCounts = new Dictionary<string, int>();
			}
			if(!m_functionCallCounts.ContainsKey( "get_splatmapDistance" )){
				m_functionCallCounts.Add( "get_splatmapDistance", 0 );
			}
			m_functionCallCounts["get_splatmapDistance"]++;
			
			throw new NotImplementedException("This function was automatically generated by Mockery and has no real implementation yet.");
		}
		set {
			if(m_functionCallCounts == null) {
				m_functionCallCounts = new Dictionary<string, int>();
			}
			if(!m_functionCallCounts.ContainsKey( "set_splatmapDistance" )){
				m_functionCallCounts.Add( "set_splatmapDistance", 0 );
			}
			m_functionCallCounts["set_splatmapDistance"]++;
			
		}
	}

	public UnityEngine.TerrainData terrainData {
		get {
			if(m_functionCallCounts == null) {
				m_functionCallCounts = new Dictionary<string, int>();
			}
			if(!m_functionCallCounts.ContainsKey( "get_terrainData" )){
				m_functionCallCounts.Add( "get_terrainData", 0 );
			}
			m_functionCallCounts["get_terrainData"]++;
			
			throw new NotImplementedException("This function was automatically generated by Mockery and has no real implementation yet.");
		}
		set {
			if(m_functionCallCounts == null) {
				m_functionCallCounts = new Dictionary<string, int>();
			}
			if(!m_functionCallCounts.ContainsKey( "set_terrainData" )){
				m_functionCallCounts.Add( "set_terrainData", 0 );
			}
			m_functionCallCounts["set_terrainData"]++;
			
		}
	}

	public System.Int32 treeMaximumFullLODCount {
		get {
			if(m_functionCallCounts == null) {
				m_functionCallCounts = new Dictionary<string, int>();
			}
			if(!m_functionCallCounts.ContainsKey( "get_treeMaximumFullLODCount" )){
				m_functionCallCounts.Add( "get_treeMaximumFullLODCount", 0 );
			}
			m_functionCallCounts["get_treeMaximumFullLODCount"]++;
			
			throw new NotImplementedException("This function was automatically generated by Mockery and has no real implementation yet.");
		}
		set {
			if(m_functionCallCounts == null) {
				m_functionCallCounts = new Dictionary<string, int>();
			}
			if(!m_functionCallCounts.ContainsKey( "set_treeMaximumFullLODCount" )){
				m_functionCallCounts.Add( "set_treeMaximumFullLODCount", 0 );
			}
			m_functionCallCounts["set_treeMaximumFullLODCount"]++;
			
		}
	}

	public static UnityEngine.Terrain activeTerrain {
		get {
			throw new NotImplementedException("This function was automatically generated by Mockery and has no real implementation yet.");
		}
	}

	public System.Single heightmapPixelError {
		get {
			if(m_functionCallCounts == null) {
				m_functionCallCounts = new Dictionary<string, int>();
			}
			if(!m_functionCallCounts.ContainsKey( "get_heightmapPixelError" )){
				m_functionCallCounts.Add( "get_heightmapPixelError", 0 );
			}
			m_functionCallCounts["get_heightmapPixelError"]++;
			
			throw new NotImplementedException("This function was automatically generated by Mockery and has no real implementation yet.");
		}
		set {
			if(m_functionCallCounts == null) {
				m_functionCallCounts = new Dictionary<string, int>();
			}
			if(!m_functionCallCounts.ContainsKey( "set_heightmapPixelError" )){
				m_functionCallCounts.Add( "set_heightmapPixelError", 0 );
			}
			m_functionCallCounts["set_heightmapPixelError"]++;
			
		}
	}

	public System.Single treeBillboardDistance {
		get {
			if(m_functionCallCounts == null) {
				m_functionCallCounts = new Dictionary<string, int>();
			}
			if(!m_functionCallCounts.ContainsKey( "get_treeBillboardDistance" )){
				m_functionCallCounts.Add( "get_treeBillboardDistance", 0 );
			}
			m_functionCallCounts["get_treeBillboardDistance"]++;
			
			throw new NotImplementedException("This function was automatically generated by Mockery and has no real implementation yet.");
		}
		set {
			if(m_functionCallCounts == null) {
				m_functionCallCounts = new Dictionary<string, int>();
			}
			if(!m_functionCallCounts.ContainsKey( "set_treeBillboardDistance" )){
				m_functionCallCounts.Add( "set_treeBillboardDistance", 0 );
			}
			m_functionCallCounts["set_treeBillboardDistance"]++;
			
		}
	}

	public System.Single treeDistance {
		get {
			if(m_functionCallCounts == null) {
				m_functionCallCounts = new Dictionary<string, int>();
			}
			if(!m_functionCallCounts.ContainsKey( "get_treeDistance" )){
				m_functionCallCounts.Add( "get_treeDistance", 0 );
			}
			m_functionCallCounts["get_treeDistance"]++;
			
			throw new NotImplementedException("This function was automatically generated by Mockery and has no real implementation yet.");
		}
		set {
			if(m_functionCallCounts == null) {
				m_functionCallCounts = new Dictionary<string, int>();
			}
			if(!m_functionCallCounts.ContainsKey( "set_treeDistance" )){
				m_functionCallCounts.Add( "set_treeDistance", 0 );
			}
			m_functionCallCounts["set_treeDistance"]++;
			
		}
	}

	public System.Boolean useLightmap {
		get {
			if(m_functionCallCounts == null) {
				m_functionCallCounts = new Dictionary<string, int>();
			}
			if(!m_functionCallCounts.ContainsKey( "get_useLightmap" )){
				m_functionCallCounts.Add( "get_useLightmap", 0 );
			}
			m_functionCallCounts["get_useLightmap"]++;
			
			throw new NotImplementedException("This function was automatically generated by Mockery and has no real implementation yet.");
		}
		set {
			if(m_functionCallCounts == null) {
				m_functionCallCounts = new Dictionary<string, int>();
			}
			if(!m_functionCallCounts.ContainsKey( "set_useLightmap" )){
				m_functionCallCounts.Add( "set_useLightmap", 0 );
			}
			m_functionCallCounts["set_useLightmap"]++;
			
		}
	}

	public System.Int32 heightmapMaximumLOD {
		get {
			if(m_functionCallCounts == null) {
				m_functionCallCounts = new Dictionary<string, int>();
			}
			if(!m_functionCallCounts.ContainsKey( "get_heightmapMaximumLOD" )){
				m_functionCallCounts.Add( "get_heightmapMaximumLOD", 0 );
			}
			m_functionCallCounts["get_heightmapMaximumLOD"]++;
			
			throw new NotImplementedException("This function was automatically generated by Mockery and has no real implementation yet.");
		}
		set {
			if(m_functionCallCounts == null) {
				m_functionCallCounts = new Dictionary<string, int>();
			}
			if(!m_functionCallCounts.ContainsKey( "set_heightmapMaximumLOD" )){
				m_functionCallCounts.Add( "set_heightmapMaximumLOD", 0 );
			}
			m_functionCallCounts["set_heightmapMaximumLOD"]++;
			
		}
	}

	public UnityEngine.TerrainLighting lighting {
		get {
			if(m_functionCallCounts == null) {
				m_functionCallCounts = new Dictionary<string, int>();
			}
			if(!m_functionCallCounts.ContainsKey( "get_lighting" )){
				m_functionCallCounts.Add( "get_lighting", 0 );
			}
			m_functionCallCounts["get_lighting"]++;
			
			throw new NotImplementedException("This function was automatically generated by Mockery and has no real implementation yet.");
		}
		set {
			if(m_functionCallCounts == null) {
				m_functionCallCounts = new Dictionary<string, int>();
			}
			if(!m_functionCallCounts.ContainsKey( "set_lighting" )){
				m_functionCallCounts.Add( "set_lighting", 0 );
			}
			m_functionCallCounts["set_lighting"]++;
			
		}
	}

	public System.Single treeCrossFadeLength {
		get {
			if(m_functionCallCounts == null) {
				m_functionCallCounts = new Dictionary<string, int>();
			}
			if(!m_functionCallCounts.ContainsKey( "get_treeCrossFadeLength" )){
				m_functionCallCounts.Add( "get_treeCrossFadeLength", 0 );
			}
			m_functionCallCounts["get_treeCrossFadeLength"]++;
			
			throw new NotImplementedException("This function was automatically generated by Mockery and has no real implementation yet.");
		}
		set {
			if(m_functionCallCounts == null) {
				m_functionCallCounts = new Dictionary<string, int>();
			}
			if(!m_functionCallCounts.ContainsKey( "set_treeCrossFadeLength" )){
				m_functionCallCounts.Add( "set_treeCrossFadeLength", 0 );
			}
			m_functionCallCounts["set_treeCrossFadeLength"]++;
			
		}
	}

	public System.Boolean castShadows {
		get {
			if(m_functionCallCounts == null) {
				m_functionCallCounts = new Dictionary<string, int>();
			}
			if(!m_functionCallCounts.ContainsKey( "get_castShadows" )){
				m_functionCallCounts.Add( "get_castShadows", 0 );
			}
			m_functionCallCounts["get_castShadows"]++;
			
			throw new NotImplementedException("This function was automatically generated by Mockery and has no real implementation yet.");
		}
		set {
			if(m_functionCallCounts == null) {
				m_functionCallCounts = new Dictionary<string, int>();
			}
			if(!m_functionCallCounts.ContainsKey( "set_castShadows" )){
				m_functionCallCounts.Add( "set_castShadows", 0 );
			}
			m_functionCallCounts["set_castShadows"]++;
			
		}
	}
}
}
