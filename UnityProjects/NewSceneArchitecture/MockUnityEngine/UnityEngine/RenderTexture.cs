using System;
using System.Collections;
using System.Collections.Generic;
using System.Runtime.Serialization;


namespace UnityEngine {
public class RenderTexture : UnityEngine.Texture {
	// Mock data:
	private Dictionary<string, int> m_functionCallCounts;
	public Dictionary<string, int> FunctionCallCounts {
		get { 
			if(m_functionCallCounts == null) {
				m_functionCallCounts = new Dictionary<string, int>();
			}
			return m_functionCallCounts;
		}
	}

	public static UnityEngine.RenderTexture GetTemporary( System.Int32 width, System.Int32 height, System.Int32 depthBuffer, UnityEngine.RenderTextureFormat format ){
		throw new NotImplementedException("This function was automatically generated by Mockery and has no real implementation yet.");
	}

	public static UnityEngine.RenderTexture GetTemporary( System.Int32 width, System.Int32 height, System.Int32 depthBuffer ){
		throw new NotImplementedException("This function was automatically generated by Mockery and has no real implementation yet.");
	}

	public static UnityEngine.RenderTexture GetTemporary( System.Int32 width, System.Int32 height ){
		throw new NotImplementedException("This function was automatically generated by Mockery and has no real implementation yet.");
	}

	public static void ReleaseTemporary( UnityEngine.RenderTexture temp ){
	}

	public System.Boolean Create( ){
		//Mock Data:
		if(m_functionCallCounts == null) {
			m_functionCallCounts = new Dictionary<string, int>();
		}
		if(!m_functionCallCounts.ContainsKey( "Boolean Create()" )){
			m_functionCallCounts.Add( "Boolean Create()", 0 );
		}
		m_functionCallCounts["Boolean Create()"]++;
			
		throw new NotImplementedException("This function was automatically generated by Mockery and has no real implementation yet.");
	}

	public void Release( ){
		//Mock Data:
		if(m_functionCallCounts == null) {
			m_functionCallCounts = new Dictionary<string, int>();
		}
		if(!m_functionCallCounts.ContainsKey( "Void Release()" )){
			m_functionCallCounts.Add( "Void Release()", 0 );
		}
		m_functionCallCounts["Void Release()"]++;
			
	}

	public System.Boolean IsCreated( ){
		//Mock Data:
		if(m_functionCallCounts == null) {
			m_functionCallCounts = new Dictionary<string, int>();
		}
		if(!m_functionCallCounts.ContainsKey( "Boolean IsCreated()" )){
			m_functionCallCounts.Add( "Boolean IsCreated()", 0 );
		}
		m_functionCallCounts["Boolean IsCreated()"]++;
			
		throw new NotImplementedException("This function was automatically generated by Mockery and has no real implementation yet.");
	}

	public void SetGlobalShaderProperty( System.String propertyName ){
		//Mock Data:
		if(m_functionCallCounts == null) {
			m_functionCallCounts = new Dictionary<string, int>();
		}
		if(!m_functionCallCounts.ContainsKey( "Void SetGlobalShaderProperty(System.String)" )){
			m_functionCallCounts.Add( "Void SetGlobalShaderProperty(System.String)", 0 );
		}
		m_functionCallCounts["Void SetGlobalShaderProperty(System.String)"]++;
			
	}

	public void SetBorderColor( UnityEngine.Color color ){
		//Mock Data:
		if(m_functionCallCounts == null) {
			m_functionCallCounts = new Dictionary<string, int>();
		}
		if(!m_functionCallCounts.ContainsKey( "Void SetBorderColor(Color)" )){
			m_functionCallCounts.Add( "Void SetBorderColor(Color)", 0 );
		}
		m_functionCallCounts["Void SetBorderColor(Color)"]++;
			
	}

	public UnityEngine.Vector2 GetTexelOffset( ){
		//Mock Data:
		if(m_functionCallCounts == null) {
			m_functionCallCounts = new Dictionary<string, int>();
		}
		if(!m_functionCallCounts.ContainsKey( "Vector2 GetTexelOffset()" )){
			m_functionCallCounts.Add( "Vector2 GetTexelOffset()", 0 );
		}
		m_functionCallCounts["Vector2 GetTexelOffset()"]++;
			
		throw new NotImplementedException("This function was automatically generated by Mockery and has no real implementation yet.");
	}

	public RenderTexture( System.Int32 width, System.Int32 height, System.Int32 depth ){
		//Mock Data:
			m_functionCallCounts = new Dictionary<string, int>();
		if(!m_functionCallCounts.ContainsKey( "Void .ctor(Int32, Int32, Int32)" )){
			m_functionCallCounts.Add( "Void .ctor(Int32, Int32, Int32)", 0 );
		}
		m_functionCallCounts["Void .ctor(Int32, Int32, Int32)"]++;
			
	}

	public System.Boolean isCubemap {
		get {
			if(m_functionCallCounts == null) {
				m_functionCallCounts = new Dictionary<string, int>();
			}
			if(!m_functionCallCounts.ContainsKey( "get_isCubemap" )){
				m_functionCallCounts.Add( "get_isCubemap", 0 );
			}
			m_functionCallCounts["get_isCubemap"]++;
			
			throw new NotImplementedException("This function was automatically generated by Mockery and has no real implementation yet.");
		}
		set {
			if(m_functionCallCounts == null) {
				m_functionCallCounts = new Dictionary<string, int>();
			}
			if(!m_functionCallCounts.ContainsKey( "set_isCubemap" )){
				m_functionCallCounts.Add( "set_isCubemap", 0 );
			}
			m_functionCallCounts["set_isCubemap"]++;
			
		}
	}

	public System.Boolean isPowerOfTwo {
		get {
			if(m_functionCallCounts == null) {
				m_functionCallCounts = new Dictionary<string, int>();
			}
			if(!m_functionCallCounts.ContainsKey( "get_isPowerOfTwo" )){
				m_functionCallCounts.Add( "get_isPowerOfTwo", 0 );
			}
			m_functionCallCounts["get_isPowerOfTwo"]++;
			
			throw new NotImplementedException("This function was automatically generated by Mockery and has no real implementation yet.");
		}
		set {
			if(m_functionCallCounts == null) {
				m_functionCallCounts = new Dictionary<string, int>();
			}
			if(!m_functionCallCounts.ContainsKey( "set_isPowerOfTwo" )){
				m_functionCallCounts.Add( "set_isPowerOfTwo", 0 );
			}
			m_functionCallCounts["set_isPowerOfTwo"]++;
			
		}
	}

	public static System.Boolean enabled {
		get {
			throw new NotImplementedException("This function was automatically generated by Mockery and has no real implementation yet.");
		}
		set {
		}
	}

	public override System.Int32 height {
		get {
			if(m_functionCallCounts == null) {
				m_functionCallCounts = new Dictionary<string, int>();
			}
			if(!m_functionCallCounts.ContainsKey( "get_height" )){
				m_functionCallCounts.Add( "get_height", 0 );
			}
			m_functionCallCounts["get_height"]++;
			
			throw new NotImplementedException("This function was automatically generated by Mockery and has no real implementation yet.");
		}
		set {
			if(m_functionCallCounts == null) {
				m_functionCallCounts = new Dictionary<string, int>();
			}
			if(!m_functionCallCounts.ContainsKey( "set_height" )){
				m_functionCallCounts.Add( "set_height", 0 );
			}
			m_functionCallCounts["set_height"]++;
			
		}
	}

	public static UnityEngine.RenderTexture active {
		get {
			throw new NotImplementedException("This function was automatically generated by Mockery and has no real implementation yet.");
		}
		set {
		}
	}

	public override System.Int32 width {
		get {
			if(m_functionCallCounts == null) {
				m_functionCallCounts = new Dictionary<string, int>();
			}
			if(!m_functionCallCounts.ContainsKey( "get_width" )){
				m_functionCallCounts.Add( "get_width", 0 );
			}
			m_functionCallCounts["get_width"]++;
			
			throw new NotImplementedException("This function was automatically generated by Mockery and has no real implementation yet.");
		}
		set {
			if(m_functionCallCounts == null) {
				m_functionCallCounts = new Dictionary<string, int>();
			}
			if(!m_functionCallCounts.ContainsKey( "set_width" )){
				m_functionCallCounts.Add( "set_width", 0 );
			}
			m_functionCallCounts["set_width"]++;
			
		}
	}

	public System.Boolean useMipMap {
		get {
			if(m_functionCallCounts == null) {
				m_functionCallCounts = new Dictionary<string, int>();
			}
			if(!m_functionCallCounts.ContainsKey( "get_useMipMap" )){
				m_functionCallCounts.Add( "get_useMipMap", 0 );
			}
			m_functionCallCounts["get_useMipMap"]++;
			
			throw new NotImplementedException("This function was automatically generated by Mockery and has no real implementation yet.");
		}
		set {
			if(m_functionCallCounts == null) {
				m_functionCallCounts = new Dictionary<string, int>();
			}
			if(!m_functionCallCounts.ContainsKey( "set_useMipMap" )){
				m_functionCallCounts.Add( "set_useMipMap", 0 );
			}
			m_functionCallCounts["set_useMipMap"]++;
			
		}
	}

	public UnityEngine.RenderTextureFormat format {
		get {
			if(m_functionCallCounts == null) {
				m_functionCallCounts = new Dictionary<string, int>();
			}
			if(!m_functionCallCounts.ContainsKey( "get_format" )){
				m_functionCallCounts.Add( "get_format", 0 );
			}
			m_functionCallCounts["get_format"]++;
			
			throw new NotImplementedException("This function was automatically generated by Mockery and has no real implementation yet.");
		}
		set {
			if(m_functionCallCounts == null) {
				m_functionCallCounts = new Dictionary<string, int>();
			}
			if(!m_functionCallCounts.ContainsKey( "set_format" )){
				m_functionCallCounts.Add( "set_format", 0 );
			}
			m_functionCallCounts["set_format"]++;
			
		}
	}

	public System.Int32 depth {
		get {
			if(m_functionCallCounts == null) {
				m_functionCallCounts = new Dictionary<string, int>();
			}
			if(!m_functionCallCounts.ContainsKey( "get_depth" )){
				m_functionCallCounts.Add( "get_depth", 0 );
			}
			m_functionCallCounts["get_depth"]++;
			
			throw new NotImplementedException("This function was automatically generated by Mockery and has no real implementation yet.");
		}
		set {
			if(m_functionCallCounts == null) {
				m_functionCallCounts = new Dictionary<string, int>();
			}
			if(!m_functionCallCounts.ContainsKey( "set_depth" )){
				m_functionCallCounts.Add( "set_depth", 0 );
			}
			m_functionCallCounts["set_depth"]++;
			
		}
	}
}
}
