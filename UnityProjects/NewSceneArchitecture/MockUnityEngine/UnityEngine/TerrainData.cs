using System;
using System.Collections;
using System.Collections.Generic;
using System.Runtime.Serialization;


namespace UnityEngine {
public class TerrainData : UnityEngine.Object {
	// Mock data:
	private Dictionary<string, int> m_functionCallCounts;
	public Dictionary<string, int> FunctionCallCounts {
		get { 
			if(m_functionCallCounts == null) {
				m_functionCallCounts = new Dictionary<string, int>();
			}
			return m_functionCallCounts;
		}
	}

	public void Init( System.Int32 splatRes, System.Int32 detailRes, System.Int32 basemapRes ){
		//Mock Data:
		if(m_functionCallCounts == null) {
			m_functionCallCounts = new Dictionary<string, int>();
		}
		if(!m_functionCallCounts.ContainsKey( "Void Init(Int32, Int32, Int32)" )){
			m_functionCallCounts.Add( "Void Init(Int32, Int32, Int32)", 0 );
		}
		m_functionCallCounts["Void Init(Int32, Int32, Int32)"]++;
			
	}

	public System.Single GetHeight( System.Int32 x, System.Int32 y ){
		//Mock Data:
		if(m_functionCallCounts == null) {
			m_functionCallCounts = new Dictionary<string, int>();
		}
		if(!m_functionCallCounts.ContainsKey( "Single GetHeight(Int32, Int32)" )){
			m_functionCallCounts.Add( "Single GetHeight(Int32, Int32)", 0 );
		}
		m_functionCallCounts["Single GetHeight(Int32, Int32)"]++;
			
		throw new NotImplementedException("This function was automatically generated by Mockery and has no real implementation yet.");
	}

	public System.Single GetInterpolatedHeight( System.Single x, System.Single y ){
		//Mock Data:
		if(m_functionCallCounts == null) {
			m_functionCallCounts = new Dictionary<string, int>();
		}
		if(!m_functionCallCounts.ContainsKey( "Single GetInterpolatedHeight(Single, Single)" )){
			m_functionCallCounts.Add( "Single GetInterpolatedHeight(Single, Single)", 0 );
		}
		m_functionCallCounts["Single GetInterpolatedHeight(Single, Single)"]++;
			
		throw new NotImplementedException("This function was automatically generated by Mockery and has no real implementation yet.");
	}

	public System.Single[,] GetHeights( System.Int32 xBase, System.Int32 yBase, System.Int32 width, System.Int32 height ){
		//Mock Data:
		if(m_functionCallCounts == null) {
			m_functionCallCounts = new Dictionary<string, int>();
		}
		if(!m_functionCallCounts.ContainsKey( "System.Single[,] GetHeights(Int32, Int32, Int32, Int32)" )){
			m_functionCallCounts.Add( "System.Single[,] GetHeights(Int32, Int32, Int32, Int32)", 0 );
		}
		m_functionCallCounts["System.Single[,] GetHeights(Int32, Int32, Int32, Int32)"]++;
			
		throw new NotImplementedException("This function was automatically generated by Mockery and has no real implementation yet.");
	}

	public void SetHeights( System.Int32 xBase, System.Int32 yBase, System.Single[,] heights ){
		//Mock Data:
		if(m_functionCallCounts == null) {
			m_functionCallCounts = new Dictionary<string, int>();
		}
		if(!m_functionCallCounts.ContainsKey( "Void SetHeights(Int32, Int32, System.Single[,])" )){
			m_functionCallCounts.Add( "Void SetHeights(Int32, Int32, System.Single[,])", 0 );
		}
		m_functionCallCounts["Void SetHeights(Int32, Int32, System.Single[,])"]++;
			
	}

	public System.Int32 GetAdjustedSize( System.Int32 size ){
		//Mock Data:
		if(m_functionCallCounts == null) {
			m_functionCallCounts = new Dictionary<string, int>();
		}
		if(!m_functionCallCounts.ContainsKey( "Int32 GetAdjustedSize(Int32)" )){
			m_functionCallCounts.Add( "Int32 GetAdjustedSize(Int32)", 0 );
		}
		m_functionCallCounts["Int32 GetAdjustedSize(Int32)"]++;
			
		throw new NotImplementedException("This function was automatically generated by Mockery and has no real implementation yet.");
	}

	public System.Single GetSteepness( System.Single x, System.Single y ){
		//Mock Data:
		if(m_functionCallCounts == null) {
			m_functionCallCounts = new Dictionary<string, int>();
		}
		if(!m_functionCallCounts.ContainsKey( "Single GetSteepness(Single, Single)" )){
			m_functionCallCounts.Add( "Single GetSteepness(Single, Single)", 0 );
		}
		m_functionCallCounts["Single GetSteepness(Single, Single)"]++;
			
		throw new NotImplementedException("This function was automatically generated by Mockery and has no real implementation yet.");
	}

	public UnityEngine.Vector3 GetInterpolatedNormal( System.Single x, System.Single y ){
		//Mock Data:
		if(m_functionCallCounts == null) {
			m_functionCallCounts = new Dictionary<string, int>();
		}
		if(!m_functionCallCounts.ContainsKey( "Vector3 GetInterpolatedNormal(Single, Single)" )){
			m_functionCallCounts.Add( "Vector3 GetInterpolatedNormal(Single, Single)", 0 );
		}
		m_functionCallCounts["Vector3 GetInterpolatedNormal(Single, Single)"]++;
			
		throw new NotImplementedException("This function was automatically generated by Mockery and has no real implementation yet.");
	}

	public void SetHeightsDelayLOD( System.Int32 xBase, System.Int32 yBase, System.Single[,] heights ){
		//Mock Data:
		if(m_functionCallCounts == null) {
			m_functionCallCounts = new Dictionary<string, int>();
		}
		if(!m_functionCallCounts.ContainsKey( "Void SetHeightsDelayLOD(Int32, Int32, System.Single[,])" )){
			m_functionCallCounts.Add( "Void SetHeightsDelayLOD(Int32, Int32, System.Single[,])", 0 );
		}
		m_functionCallCounts["Void SetHeightsDelayLOD(Int32, Int32, System.Single[,])"]++;
			
	}

	public void ResetDirtyDetails( ){
		//Mock Data:
		if(m_functionCallCounts == null) {
			m_functionCallCounts = new Dictionary<string, int>();
		}
		if(!m_functionCallCounts.ContainsKey( "Void ResetDirtyDetails()" )){
			m_functionCallCounts.Add( "Void ResetDirtyDetails()", 0 );
		}
		m_functionCallCounts["Void ResetDirtyDetails()"]++;
			
	}

	public void RefreshPrototypes( ){
		//Mock Data:
		if(m_functionCallCounts == null) {
			m_functionCallCounts = new Dictionary<string, int>();
		}
		if(!m_functionCallCounts.ContainsKey( "Void RefreshPrototypes()" )){
			m_functionCallCounts.Add( "Void RefreshPrototypes()", 0 );
		}
		m_functionCallCounts["Void RefreshPrototypes()"]++;
			
	}

	public System.Int32[] GetSupportedLayers( System.Int32 xBase, System.Int32 yBase, System.Int32 totalWidth, System.Int32 totalHeight ){
		//Mock Data:
		if(m_functionCallCounts == null) {
			m_functionCallCounts = new Dictionary<string, int>();
		}
		if(!m_functionCallCounts.ContainsKey( "System.Int32[] GetSupportedLayers(Int32, Int32, Int32, Int32)" )){
			m_functionCallCounts.Add( "System.Int32[] GetSupportedLayers(Int32, Int32, Int32, Int32)", 0 );
		}
		m_functionCallCounts["System.Int32[] GetSupportedLayers(Int32, Int32, Int32, Int32)"]++;
			
		throw new NotImplementedException("This function was automatically generated by Mockery and has no real implementation yet.");
	}

	public System.Int32[,] GetDetailLayer( System.Int32 xBase, System.Int32 yBase, System.Int32 width, System.Int32 height, System.Int32 layer ){
		//Mock Data:
		if(m_functionCallCounts == null) {
			m_functionCallCounts = new Dictionary<string, int>();
		}
		if(!m_functionCallCounts.ContainsKey( "System.Int32[,] GetDetailLayer(Int32, Int32, Int32, Int32, Int32)" )){
			m_functionCallCounts.Add( "System.Int32[,] GetDetailLayer(Int32, Int32, Int32, Int32, Int32)", 0 );
		}
		m_functionCallCounts["System.Int32[,] GetDetailLayer(Int32, Int32, Int32, Int32, Int32)"]++;
			
		throw new NotImplementedException("This function was automatically generated by Mockery and has no real implementation yet.");
	}

	public void SetDetailLayer( System.Int32 xBase, System.Int32 yBase, System.Int32 layer, System.Int32[,] details ){
		//Mock Data:
		if(m_functionCallCounts == null) {
			m_functionCallCounts = new Dictionary<string, int>();
		}
		if(!m_functionCallCounts.ContainsKey( "Void SetDetailLayer(Int32, Int32, Int32, System.Int32[,])" )){
			m_functionCallCounts.Add( "Void SetDetailLayer(Int32, Int32, Int32, System.Int32[,])", 0 );
		}
		m_functionCallCounts["Void SetDetailLayer(Int32, Int32, Int32, System.Int32[,])"]++;
			
	}

	public void RecalculateTreePositions( ){
		//Mock Data:
		if(m_functionCallCounts == null) {
			m_functionCallCounts = new Dictionary<string, int>();
		}
		if(!m_functionCallCounts.ContainsKey( "Void RecalculateTreePositions()" )){
			m_functionCallCounts.Add( "Void RecalculateTreePositions()", 0 );
		}
		m_functionCallCounts["Void RecalculateTreePositions()"]++;
			
	}

	public void RemoveTreePrototype( System.Int32 index ){
		//Mock Data:
		if(m_functionCallCounts == null) {
			m_functionCallCounts = new Dictionary<string, int>();
		}
		if(!m_functionCallCounts.ContainsKey( "Void RemoveTreePrototype(Int32)" )){
			m_functionCallCounts.Add( "Void RemoveTreePrototype(Int32)", 0 );
		}
		m_functionCallCounts["Void RemoveTreePrototype(Int32)"]++;
			
	}

	public void RemoveDetailPrototype( System.Int32 index ){
		//Mock Data:
		if(m_functionCallCounts == null) {
			m_functionCallCounts = new Dictionary<string, int>();
		}
		if(!m_functionCallCounts.ContainsKey( "Void RemoveDetailPrototype(Int32)" )){
			m_functionCallCounts.Add( "Void RemoveDetailPrototype(Int32)", 0 );
		}
		m_functionCallCounts["Void RemoveDetailPrototype(Int32)"]++;
			
	}

	public System.Single[,,] GetAlphamaps( System.Int32 x, System.Int32 y, System.Int32 width, System.Int32 height ){
		//Mock Data:
		if(m_functionCallCounts == null) {
			m_functionCallCounts = new Dictionary<string, int>();
		}
		if(!m_functionCallCounts.ContainsKey( "System.Single[,,] GetAlphamaps(Int32, Int32, Int32, Int32)" )){
			m_functionCallCounts.Add( "System.Single[,,] GetAlphamaps(Int32, Int32, Int32, Int32)", 0 );
		}
		m_functionCallCounts["System.Single[,,] GetAlphamaps(Int32, Int32, Int32, Int32)"]++;
			
		throw new NotImplementedException("This function was automatically generated by Mockery and has no real implementation yet.");
	}

	public void SetAlphamaps( System.Int32 x, System.Int32 y, System.Single[,,] map ){
		//Mock Data:
		if(m_functionCallCounts == null) {
			m_functionCallCounts = new Dictionary<string, int>();
		}
		if(!m_functionCallCounts.ContainsKey( "Void SetAlphamaps(Int32, Int32, System.Single[,,])" )){
			m_functionCallCounts.Add( "Void SetAlphamaps(Int32, Int32, System.Single[,,])", 0 );
		}
		m_functionCallCounts["Void SetAlphamaps(Int32, Int32, System.Single[,,])"]++;
			
	}

	public UnityEngine.Texture2D GetBaseMap( ){
		//Mock Data:
		if(m_functionCallCounts == null) {
			m_functionCallCounts = new Dictionary<string, int>();
		}
		if(!m_functionCallCounts.ContainsKey( "UnityEngine.Texture2D GetBaseMap()" )){
			m_functionCallCounts.Add( "UnityEngine.Texture2D GetBaseMap()", 0 );
		}
		m_functionCallCounts["UnityEngine.Texture2D GetBaseMap()"]++;
			
		throw new NotImplementedException("This function was automatically generated by Mockery and has no real implementation yet.");
	}

	public void SetBaseMapDirty( ){
		//Mock Data:
		if(m_functionCallCounts == null) {
			m_functionCallCounts = new Dictionary<string, int>();
		}
		if(!m_functionCallCounts.ContainsKey( "Void SetBaseMapDirty()" )){
			m_functionCallCounts.Add( "Void SetBaseMapDirty()", 0 );
		}
		m_functionCallCounts["Void SetBaseMapDirty()"]++;
			
	}

	public TerrainData( ){
		//Mock Data:
			m_functionCallCounts = new Dictionary<string, int>();
		if(!m_functionCallCounts.ContainsKey( "Void .ctor()" )){
			m_functionCallCounts.Add( "Void .ctor()", 0 );
		}
		m_functionCallCounts["Void .ctor()"]++;
			
	}

	public System.Int32 alphamapResolution {
		get {
			if(m_functionCallCounts == null) {
				m_functionCallCounts = new Dictionary<string, int>();
			}
			if(!m_functionCallCounts.ContainsKey( "get_alphamapResolution" )){
				m_functionCallCounts.Add( "get_alphamapResolution", 0 );
			}
			m_functionCallCounts["get_alphamapResolution"]++;
			
			throw new NotImplementedException("This function was automatically generated by Mockery and has no real implementation yet.");
		}
		set {
			if(m_functionCallCounts == null) {
				m_functionCallCounts = new Dictionary<string, int>();
			}
			if(!m_functionCallCounts.ContainsKey( "set_alphamapResolution" )){
				m_functionCallCounts.Add( "set_alphamapResolution", 0 );
			}
			m_functionCallCounts["set_alphamapResolution"]++;
			
		}
	}

	public UnityEngine.Texture2D[] alphamapTextures {
		get {
			if(m_functionCallCounts == null) {
				m_functionCallCounts = new Dictionary<string, int>();
			}
			if(!m_functionCallCounts.ContainsKey( "get_alphamapTextures" )){
				m_functionCallCounts.Add( "get_alphamapTextures", 0 );
			}
			m_functionCallCounts["get_alphamapTextures"]++;
			
			throw new NotImplementedException("This function was automatically generated by Mockery and has no real implementation yet.");
		}
	}

	public System.Int32 baseMapResolution {
		get {
			if(m_functionCallCounts == null) {
				m_functionCallCounts = new Dictionary<string, int>();
			}
			if(!m_functionCallCounts.ContainsKey( "get_baseMapResolution" )){
				m_functionCallCounts.Add( "get_baseMapResolution", 0 );
			}
			m_functionCallCounts["get_baseMapResolution"]++;
			
			throw new NotImplementedException("This function was automatically generated by Mockery and has no real implementation yet.");
		}
		set {
			if(m_functionCallCounts == null) {
				m_functionCallCounts = new Dictionary<string, int>();
			}
			if(!m_functionCallCounts.ContainsKey( "set_baseMapResolution" )){
				m_functionCallCounts.Add( "set_baseMapResolution", 0 );
			}
			m_functionCallCounts["set_baseMapResolution"]++;
			
		}
	}

	public System.Int32 detailWidth {
		get {
			if(m_functionCallCounts == null) {
				m_functionCallCounts = new Dictionary<string, int>();
			}
			if(!m_functionCallCounts.ContainsKey( "get_detailWidth" )){
				m_functionCallCounts.Add( "get_detailWidth", 0 );
			}
			m_functionCallCounts["get_detailWidth"]++;
			
			throw new NotImplementedException("This function was automatically generated by Mockery and has no real implementation yet.");
		}
	}

	public System.Int32 patchCount {
		get {
			if(m_functionCallCounts == null) {
				m_functionCallCounts = new Dictionary<string, int>();
			}
			if(!m_functionCallCounts.ContainsKey( "get_patchCount" )){
				m_functionCallCounts.Add( "get_patchCount", 0 );
			}
			m_functionCallCounts["get_patchCount"]++;
			
			throw new NotImplementedException("This function was automatically generated by Mockery and has no real implementation yet.");
		}
	}

	public System.Int32 detailResolution {
		get {
			if(m_functionCallCounts == null) {
				m_functionCallCounts = new Dictionary<string, int>();
			}
			if(!m_functionCallCounts.ContainsKey( "get_detailResolution" )){
				m_functionCallCounts.Add( "get_detailResolution", 0 );
			}
			m_functionCallCounts["get_detailResolution"]++;
			
			throw new NotImplementedException("This function was automatically generated by Mockery and has no real implementation yet.");
		}
		set {
			if(m_functionCallCounts == null) {
				m_functionCallCounts = new Dictionary<string, int>();
			}
			if(!m_functionCallCounts.ContainsKey( "set_detailResolution" )){
				m_functionCallCounts.Add( "set_detailResolution", 0 );
			}
			m_functionCallCounts["set_detailResolution"]++;
			
		}
	}

	public System.Int32 heightmapPatchSize {
		get {
			if(m_functionCallCounts == null) {
				m_functionCallCounts = new Dictionary<string, int>();
			}
			if(!m_functionCallCounts.ContainsKey( "get_heightmapPatchSize" )){
				m_functionCallCounts.Add( "get_heightmapPatchSize", 0 );
			}
			m_functionCallCounts["get_heightmapPatchSize"]++;
			
			throw new NotImplementedException("This function was automatically generated by Mockery and has no real implementation yet.");
		}
	}

	public System.Int32 alphamapTextureCount {
		get {
			if(m_functionCallCounts == null) {
				m_functionCallCounts = new Dictionary<string, int>();
			}
			if(!m_functionCallCounts.ContainsKey( "get_alphamapTextureCount" )){
				m_functionCallCounts.Add( "get_alphamapTextureCount", 0 );
			}
			m_functionCallCounts["get_alphamapTextureCount"]++;
			
			throw new NotImplementedException("This function was automatically generated by Mockery and has no real implementation yet.");
		}
	}

	public System.Int32 heightmapHeight {
		get {
			if(m_functionCallCounts == null) {
				m_functionCallCounts = new Dictionary<string, int>();
			}
			if(!m_functionCallCounts.ContainsKey( "get_heightmapHeight" )){
				m_functionCallCounts.Add( "get_heightmapHeight", 0 );
			}
			m_functionCallCounts["get_heightmapHeight"]++;
			
			throw new NotImplementedException("This function was automatically generated by Mockery and has no real implementation yet.");
		}
	}

	public UnityEngine.Color wavingGrassTint {
		get {
			if(m_functionCallCounts == null) {
				m_functionCallCounts = new Dictionary<string, int>();
			}
			if(!m_functionCallCounts.ContainsKey( "get_wavingGrassTint" )){
				m_functionCallCounts.Add( "get_wavingGrassTint", 0 );
			}
			m_functionCallCounts["get_wavingGrassTint"]++;
			
			throw new NotImplementedException("This function was automatically generated by Mockery and has no real implementation yet.");
		}
		set {
			if(m_functionCallCounts == null) {
				m_functionCallCounts = new Dictionary<string, int>();
			}
			if(!m_functionCallCounts.ContainsKey( "set_wavingGrassTint" )){
				m_functionCallCounts.Add( "set_wavingGrassTint", 0 );
			}
			m_functionCallCounts["set_wavingGrassTint"]++;
			
		}
	}

	public System.Int32 alphamapHeight {
		get {
			if(m_functionCallCounts == null) {
				m_functionCallCounts = new Dictionary<string, int>();
			}
			if(!m_functionCallCounts.ContainsKey( "get_alphamapHeight" )){
				m_functionCallCounts.Add( "get_alphamapHeight", 0 );
			}
			m_functionCallCounts["get_alphamapHeight"]++;
			
			throw new NotImplementedException("This function was automatically generated by Mockery and has no real implementation yet.");
		}
	}

	public System.Single wavingGrassStrength {
		get {
			if(m_functionCallCounts == null) {
				m_functionCallCounts = new Dictionary<string, int>();
			}
			if(!m_functionCallCounts.ContainsKey( "get_wavingGrassStrength" )){
				m_functionCallCounts.Add( "get_wavingGrassStrength", 0 );
			}
			m_functionCallCounts["get_wavingGrassStrength"]++;
			
			throw new NotImplementedException("This function was automatically generated by Mockery and has no real implementation yet.");
		}
		set {
			if(m_functionCallCounts == null) {
				m_functionCallCounts = new Dictionary<string, int>();
			}
			if(!m_functionCallCounts.ContainsKey( "set_wavingGrassStrength" )){
				m_functionCallCounts.Add( "set_wavingGrassStrength", 0 );
			}
			m_functionCallCounts["set_wavingGrassStrength"]++;
			
		}
	}

	public System.Single wavingGrassSpeed {
		get {
			if(m_functionCallCounts == null) {
				m_functionCallCounts = new Dictionary<string, int>();
			}
			if(!m_functionCallCounts.ContainsKey( "get_wavingGrassSpeed" )){
				m_functionCallCounts.Add( "get_wavingGrassSpeed", 0 );
			}
			m_functionCallCounts["get_wavingGrassSpeed"]++;
			
			throw new NotImplementedException("This function was automatically generated by Mockery and has no real implementation yet.");
		}
		set {
			if(m_functionCallCounts == null) {
				m_functionCallCounts = new Dictionary<string, int>();
			}
			if(!m_functionCallCounts.ContainsKey( "set_wavingGrassSpeed" )){
				m_functionCallCounts.Add( "set_wavingGrassSpeed", 0 );
			}
			m_functionCallCounts["set_wavingGrassSpeed"]++;
			
		}
	}

	public System.Int32 heightmapWidth {
		get {
			if(m_functionCallCounts == null) {
				m_functionCallCounts = new Dictionary<string, int>();
			}
			if(!m_functionCallCounts.ContainsKey( "get_heightmapWidth" )){
				m_functionCallCounts.Add( "get_heightmapWidth", 0 );
			}
			m_functionCallCounts["get_heightmapWidth"]++;
			
			throw new NotImplementedException("This function was automatically generated by Mockery and has no real implementation yet.");
		}
	}

	public UnityEngine.TreeInstance[] treeInstances {
		get {
			if(m_functionCallCounts == null) {
				m_functionCallCounts = new Dictionary<string, int>();
			}
			if(!m_functionCallCounts.ContainsKey( "get_treeInstances" )){
				m_functionCallCounts.Add( "get_treeInstances", 0 );
			}
			m_functionCallCounts["get_treeInstances"]++;
			
			throw new NotImplementedException("This function was automatically generated by Mockery and has no real implementation yet.");
		}
		set {
			if(m_functionCallCounts == null) {
				m_functionCallCounts = new Dictionary<string, int>();
			}
			if(!m_functionCallCounts.ContainsKey( "set_treeInstances" )){
				m_functionCallCounts.Add( "set_treeInstances", 0 );
			}
			m_functionCallCounts["set_treeInstances"]++;
			
		}
	}

	public UnityEngine.DetailPrototype[] detailPrototypes {
		get {
			if(m_functionCallCounts == null) {
				m_functionCallCounts = new Dictionary<string, int>();
			}
			if(!m_functionCallCounts.ContainsKey( "get_detailPrototypes" )){
				m_functionCallCounts.Add( "get_detailPrototypes", 0 );
			}
			m_functionCallCounts["get_detailPrototypes"]++;
			
			throw new NotImplementedException("This function was automatically generated by Mockery and has no real implementation yet.");
		}
		set {
			if(m_functionCallCounts == null) {
				m_functionCallCounts = new Dictionary<string, int>();
			}
			if(!m_functionCallCounts.ContainsKey( "set_detailPrototypes" )){
				m_functionCallCounts.Add( "set_detailPrototypes", 0 );
			}
			m_functionCallCounts["set_detailPrototypes"]++;
			
		}
	}

	public System.Single wavingGrassAmount {
		get {
			if(m_functionCallCounts == null) {
				m_functionCallCounts = new Dictionary<string, int>();
			}
			if(!m_functionCallCounts.ContainsKey( "get_wavingGrassAmount" )){
				m_functionCallCounts.Add( "get_wavingGrassAmount", 0 );
			}
			m_functionCallCounts["get_wavingGrassAmount"]++;
			
			throw new NotImplementedException("This function was automatically generated by Mockery and has no real implementation yet.");
		}
		set {
			if(m_functionCallCounts == null) {
				m_functionCallCounts = new Dictionary<string, int>();
			}
			if(!m_functionCallCounts.ContainsKey( "set_wavingGrassAmount" )){
				m_functionCallCounts.Add( "set_wavingGrassAmount", 0 );
			}
			m_functionCallCounts["set_wavingGrassAmount"]++;
			
		}
	}

	public System.Int32 mipLevels {
		get {
			if(m_functionCallCounts == null) {
				m_functionCallCounts = new Dictionary<string, int>();
			}
			if(!m_functionCallCounts.ContainsKey( "get_mipLevels" )){
				m_functionCallCounts.Add( "get_mipLevels", 0 );
			}
			m_functionCallCounts["get_mipLevels"]++;
			
			throw new NotImplementedException("This function was automatically generated by Mockery and has no real implementation yet.");
		}
	}

	public System.Int32 alphamapWidth {
		get {
			if(m_functionCallCounts == null) {
				m_functionCallCounts = new Dictionary<string, int>();
			}
			if(!m_functionCallCounts.ContainsKey( "get_alphamapWidth" )){
				m_functionCallCounts.Add( "get_alphamapWidth", 0 );
			}
			m_functionCallCounts["get_alphamapWidth"]++;
			
			throw new NotImplementedException("This function was automatically generated by Mockery and has no real implementation yet.");
		}
	}

	public UnityEngine.TreePrototype[] treePrototypes {
		get {
			if(m_functionCallCounts == null) {
				m_functionCallCounts = new Dictionary<string, int>();
			}
			if(!m_functionCallCounts.ContainsKey( "get_treePrototypes" )){
				m_functionCallCounts.Add( "get_treePrototypes", 0 );
			}
			m_functionCallCounts["get_treePrototypes"]++;
			
			throw new NotImplementedException("This function was automatically generated by Mockery and has no real implementation yet.");
		}
		set {
			if(m_functionCallCounts == null) {
				m_functionCallCounts = new Dictionary<string, int>();
			}
			if(!m_functionCallCounts.ContainsKey( "set_treePrototypes" )){
				m_functionCallCounts.Add( "set_treePrototypes", 0 );
			}
			m_functionCallCounts["set_treePrototypes"]++;
			
		}
	}

	public System.Int32 heightmapResolution {
		get {
			if(m_functionCallCounts == null) {
				m_functionCallCounts = new Dictionary<string, int>();
			}
			if(!m_functionCallCounts.ContainsKey( "get_heightmapResolution" )){
				m_functionCallCounts.Add( "get_heightmapResolution", 0 );
			}
			m_functionCallCounts["get_heightmapResolution"]++;
			
			throw new NotImplementedException("This function was automatically generated by Mockery and has no real implementation yet.");
		}
		set {
			if(m_functionCallCounts == null) {
				m_functionCallCounts = new Dictionary<string, int>();
			}
			if(!m_functionCallCounts.ContainsKey( "set_heightmapResolution" )){
				m_functionCallCounts.Add( "set_heightmapResolution", 0 );
			}
			m_functionCallCounts["set_heightmapResolution"]++;
			
		}
	}

	public System.Int32 alphamapLayers {
		get {
			if(m_functionCallCounts == null) {
				m_functionCallCounts = new Dictionary<string, int>();
			}
			if(!m_functionCallCounts.ContainsKey( "get_alphamapLayers" )){
				m_functionCallCounts.Add( "get_alphamapLayers", 0 );
			}
			m_functionCallCounts["get_alphamapLayers"]++;
			
			throw new NotImplementedException("This function was automatically generated by Mockery and has no real implementation yet.");
		}
	}

	public UnityEngine.Vector3 size {
		get {
			if(m_functionCallCounts == null) {
				m_functionCallCounts = new Dictionary<string, int>();
			}
			if(!m_functionCallCounts.ContainsKey( "get_size" )){
				m_functionCallCounts.Add( "get_size", 0 );
			}
			m_functionCallCounts["get_size"]++;
			
			throw new NotImplementedException("This function was automatically generated by Mockery and has no real implementation yet.");
		}
		set {
			if(m_functionCallCounts == null) {
				m_functionCallCounts = new Dictionary<string, int>();
			}
			if(!m_functionCallCounts.ContainsKey( "set_size" )){
				m_functionCallCounts.Add( "set_size", 0 );
			}
			m_functionCallCounts["set_size"]++;
			
		}
	}

	public UnityEngine.SplatPrototype[] splatPrototypes {
		get {
			if(m_functionCallCounts == null) {
				m_functionCallCounts = new Dictionary<string, int>();
			}
			if(!m_functionCallCounts.ContainsKey( "get_splatPrototypes" )){
				m_functionCallCounts.Add( "get_splatPrototypes", 0 );
			}
			m_functionCallCounts["get_splatPrototypes"]++;
			
			throw new NotImplementedException("This function was automatically generated by Mockery and has no real implementation yet.");
		}
		set {
			if(m_functionCallCounts == null) {
				m_functionCallCounts = new Dictionary<string, int>();
			}
			if(!m_functionCallCounts.ContainsKey( "set_splatPrototypes" )){
				m_functionCallCounts.Add( "set_splatPrototypes", 0 );
			}
			m_functionCallCounts["set_splatPrototypes"]++;
			
		}
	}

	public UnityEngine.Vector3 heightmapScale {
		get {
			if(m_functionCallCounts == null) {
				m_functionCallCounts = new Dictionary<string, int>();
			}
			if(!m_functionCallCounts.ContainsKey( "get_heightmapScale" )){
				m_functionCallCounts.Add( "get_heightmapScale", 0 );
			}
			m_functionCallCounts["get_heightmapScale"]++;
			
			throw new NotImplementedException("This function was automatically generated by Mockery and has no real implementation yet.");
		}
	}

	public UnityEngine.Texture2D plantAtlasTexture {
		get {
			if(m_functionCallCounts == null) {
				m_functionCallCounts = new Dictionary<string, int>();
			}
			if(!m_functionCallCounts.ContainsKey( "get_plantAtlasTexture" )){
				m_functionCallCounts.Add( "get_plantAtlasTexture", 0 );
			}
			m_functionCallCounts["get_plantAtlasTexture"]++;
			
			throw new NotImplementedException("This function was automatically generated by Mockery and has no real implementation yet.");
		}
	}

	public UnityEngine.Texture2D lightmap {
		get {
			if(m_functionCallCounts == null) {
				m_functionCallCounts = new Dictionary<string, int>();
			}
			if(!m_functionCallCounts.ContainsKey( "get_lightmap" )){
				m_functionCallCounts.Add( "get_lightmap", 0 );
			}
			m_functionCallCounts["get_lightmap"]++;
			
			throw new NotImplementedException("This function was automatically generated by Mockery and has no real implementation yet.");
		}
		set {
			if(m_functionCallCounts == null) {
				m_functionCallCounts = new Dictionary<string, int>();
			}
			if(!m_functionCallCounts.ContainsKey( "set_lightmap" )){
				m_functionCallCounts.Add( "set_lightmap", 0 );
			}
			m_functionCallCounts["set_lightmap"]++;
			
		}
	}

	public System.Int32 detailHeight {
		get {
			if(m_functionCallCounts == null) {
				m_functionCallCounts = new Dictionary<string, int>();
			}
			if(!m_functionCallCounts.ContainsKey( "get_detailHeight" )){
				m_functionCallCounts.Add( "get_detailHeight", 0 );
			}
			m_functionCallCounts["get_detailHeight"]++;
			
			throw new NotImplementedException("This function was automatically generated by Mockery and has no real implementation yet.");
		}
	}
}
}
