<?xml version="1.0" encoding="utf-8"?>
<root>
  <!-- 
    Microsoft ResX Schema 
    
    Version 2.0
    
    The primary goals of this format is to allow a simple XML format 
    that is mostly human readable. The generation and parsing of the 
    various data types are done through the TypeConverter classes 
    associated with the data types.
    
    Example:
    
    ... ado.net/XML headers & schema ...
    <resheader name="resmimetype">text/microsoft-resx</resheader>
    <resheader name="version">2.0</resheader>
    <resheader name="reader">System.Resources.ResXResourceReader, System.Windows.Forms, ...</resheader>
    <resheader name="writer">System.Resources.ResXResourceWriter, System.Windows.Forms, ...</resheader>
    <data name="Name1"><value>this is my long string</value><comment>this is a comment</comment></data>
    <data name="Color1" type="System.Drawing.Color, System.Drawing">Blue</data>
    <data name="Bitmap1" mimetype="application/x-microsoft.net.object.binary.base64">
        <value>[base64 mime encoded serialized .NET Framework object]</value>
    </data>
    <data name="Icon1" type="System.Drawing.Icon, System.Drawing" mimetype="application/x-microsoft.net.object.bytearray.base64">
        <value>[base64 mime encoded string representing a byte array form of the .NET Framework object]</value>
        <comment>This is a comment</comment>
    </data>
                
    There are any number of "resheader" rows that contain simple 
    name/value pairs.
    
    Each data row contains a name, and value. The row also contains a 
    type or mimetype. Type corresponds to a .NET class that support 
    text/value conversion through the TypeConverter architecture. 
    Classes that don't support this are serialized and stored with the 
    mimetype set.
    
    The mimetype is used for serialized objects, and tells the 
    ResXResourceReader how to depersist the object. This is currently not 
    extensible. For a given mimetype the value must be set accordingly:
    
    Note - application/x-microsoft.net.object.binary.base64 is the format 
    that the ResXResourceWriter will generate, however the reader can 
    read any of the formats listed below.
    
    mimetype: application/x-microsoft.net.object.binary.base64
    value   : The object must be serialized with 
            : System.Runtime.Serialization.Formatters.Binary.BinaryFormatter
            : and then encoded with base64 encoding.
    
    mimetype: application/x-microsoft.net.object.soap.base64
    value   : The object must be serialized with 
            : System.Runtime.Serialization.Formatters.Soap.SoapFormatter
            : and then encoded with base64 encoding.

    mimetype: application/x-microsoft.net.object.bytearray.base64
    value   : The object must be serialized into a byte array 
            : using a System.ComponentModel.TypeConverter
            : and then encoded with base64 encoding.
    -->
  <xsd:schema id="root" xmlns="" xmlns:xsd="http://www.w3.org/2001/XMLSchema" xmlns:msdata="urn:schemas-microsoft-com:xml-msdata">
    <xsd:import namespace="http://www.w3.org/XML/1998/namespace" />
    <xsd:element name="root" msdata:IsDataSet="true">
      <xsd:complexType>
        <xsd:choice maxOccurs="unbounded">
          <xsd:element name="metadata">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" />
              </xsd:sequence>
              <xsd:attribute name="name" use="required" type="xsd:string" />
              <xsd:attribute name="type" type="xsd:string" />
              <xsd:attribute name="mimetype" type="xsd:string" />
              <xsd:attribute ref="xml:space" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="assembly">
            <xsd:complexType>
              <xsd:attribute name="alias" type="xsd:string" />
              <xsd:attribute name="name" type="xsd:string" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="data">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" msdata:Ordinal="1" />
                <xsd:element name="comment" type="xsd:string" minOccurs="0" msdata:Ordinal="2" />
              </xsd:sequence>
              <xsd:attribute name="name" type="xsd:string" use="required" msdata:Ordinal="1" />
              <xsd:attribute name="type" type="xsd:string" msdata:Ordinal="3" />
              <xsd:attribute name="mimetype" type="xsd:string" msdata:Ordinal="4" />
              <xsd:attribute ref="xml:space" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="resheader">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" msdata:Ordinal="1" />
              </xsd:sequence>
              <xsd:attribute name="name" type="xsd:string" use="required" />
            </xsd:complexType>
          </xsd:element>
        </xsd:choice>
      </xsd:complexType>
    </xsd:element>
  </xsd:schema>
  <resheader name="resmimetype">
    <value>text/microsoft-resx</value>
  </resheader>
  <resheader name="version">
    <value>2.0</value>
  </resheader>
  <resheader name="reader">
    <value>System.Resources.ResXResourceReader, System.Windows.Forms, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089</value>
  </resheader>
  <resheader name="writer">
    <value>System.Resources.ResXResourceWriter, System.Windows.Forms, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089</value>
  </resheader>
  <data name="E210003" xml:space="preserve">
    <value>You have exceeded the daily limit, please try again after 24 hours.</value>
  </data>
  <data name="E240003" xml:space="preserve">
    <value>This transaction has already been completed.</value>
  </data>
  <data name="E980004" xml:space="preserve">
    <value>The Credit Card information does not pass validation.</value>
  </data>
  <data name="resCreditCardAdd" xml:space="preserve">
    <value>Add PayFish Cash with Credit Card</value>
  </data>
  <data name="resCreditCardResultValidationError" xml:space="preserve">
    <value>The Credit Card information does not pass validation</value>
  </data>
  <data name="resCreditCardSuccess" xml:space="preserve">
    <value>The Credit Card Tranaction completed successfully</value>
  </data>
  <data name="resPayPalCanceled" xml:space="preserve">
    <value>The PayPal transaction was cancelled.</value>
  </data>
  <data name="resPayPalCancelWait" xml:space="preserve">
    <value>Please wait while the PayPal transaction canceled.</value>
  </data>
  <data name="resPayPalCashAdd" xml:space="preserve">
    <value>Add PayFish Cash with Paypal</value>
  </data>
  <data name="resPayPalComplete" xml:space="preserve">
    <value>The PayPal transaction completed succesfully.</value>
  </data>
  <data name="resPayPalCompletesWait" xml:space="preserve">
    <value>Please wait while the PayPal transaction completes.</value>
  </data>
  <data name="resTest" xml:space="preserve">
    <value>Test of ServerCommon Resources</value>
  </data>
  <data name="resBestValue" xml:space="preserve">
    <value>BEST VALUE!</value>
  </data>
  <data name="resBuyCreditCard" xml:space="preserve">
    <value>Buy With Credit Card</value>
  </data>
  <data name="resBuyPayPal" xml:space="preserve">
    <value>Buy with PayPal</value>
  </data>
  <data name="resDefaultOffers" xml:space="preserve">
    <value>No offers are available at this time please try again later.</value>
  </data>
  <data name="resGetCashLine1" xml:space="preserve">
    <value>GET CASH</value>
  </data>
  <data name="resGetCashLine2" xml:space="preserve">
    <value>Get Cash to buy special items!</value>
  </data>
  <data name="resGetCoinLine1" xml:space="preserve">
    <value>GET COIN</value>
  </data>
  <data name="resGetCoinLine2" xml:space="preserve">
    <value>Need more coins? Buy some now!</value>
  </data>
  <data name="resNoOfferSelected" xml:space="preserve">
    <value>Please Select an offer</value>
  </data>
  <data name="resPayPalCompleted" xml:space="preserve">
    <value>The PayPal transaction completed successfully.</value>
  </data>
  <data name="resPayPalWaitCancel" xml:space="preserve">
    <value>Please wait while the PayPal transaction is canceled.</value>
  </data>
  <data name="resPayPalWaitComplete" xml:space="preserve">
    <value>Please wait while the PayPal transaction completes.</value>
  </data>
  <data name="resZongCompleted" xml:space="preserve">
    <value>The Zong transaction completed successfully.</value>
  </data>
  <data name="resSelectPackage" xml:space="preserve">
    <value>1. Select Which Package You Want</value>
  </data>
  <data name="resSelectPayment" xml:space="preserve">
    <value>2. Select Payment Option</value>
  </data>
  <data name="resTransactionComplete" xml:space="preserve">
    <value>Transaction Complete</value>
  </data>
  <data name="resTransactionCanceled" xml:space="preserve">
    <value>Transaction Canceled</value>
  </data>
  <data name="EDefaultCCError" xml:space="preserve">
    <value>The Credit Card information does not pass validation</value>
  </data>
  <data name="resRequiredFieldError" xml:space="preserve">
    <value>Required Field</value>
  </data>
  <data name="resCCSecurityCodeError" xml:space="preserve">
    <value>Security Code must be 3 or 4 digits</value>
  </data>
  <data name="resCCEmailAddressNotValid" xml:space="preserve">
    <value>EMAIL Address is not valid</value>
  </data>
  <data name="resCCEmailAddressConfirmDoesNotMatch" xml:space="preserve">
    <value>EMAIL Address and confirm MAIL Address do not match</value>
  </data>
  <data name="resCCCardType" xml:space="preserve">
    <value>Card Type:</value>
  </data>
  <data name="resCCCreditCard" xml:space="preserve">
    <value>Credit Card:</value>
  </data>
  <data name="resCCEmail" xml:space="preserve">
    <value>Email:</value>
  </data>
  <data name="resCCExpireDate" xml:space="preserve">
    <value>Expiration Date:</value>
  </data>
  <data name="resCCName" xml:space="preserve">
    <value>Name:</value>
  </data>
  <data name="resCCPackage" xml:space="preserve">
    <value>Package:</value>
  </data>
  <data name="resCCSupport" xml:space="preserve">
    <value>If you have any questions or problems with your order, please feel free to contact us at</value>
  </data>
  <data name="resCCTransaction" xml:space="preserve">
    <value>Confirmation Number:</value>
  </data>
  <data name="resCCPackageSelected" xml:space="preserve">
    <value>Package Selected: {0} Hangout Cash -  ${1} (USD)</value>
  </data>
  <data name="resCCConfirmPurchase" xml:space="preserve">
    <value>Click SUBMIT below to confirm the purchase of &lt;br/ &gt;{0} Hangout Cash for ${1} &lt;br/&gt; Thanks!</value>
  </data>
  <data name="resCCPurchaseThankYou" xml:space="preserve">
    <value>Thank you for your order! Please print this receipt as a copy for your records.</value>
  </data>
</root>